{"version":3,"sources":["webpack://TDLib/webpack/universalModuleDefinition","webpack://TDLib/./src/TDLib.js","webpack://TDLib/./src/boot/Boot.js","webpack://TDLib/./src/boot/DebugHeader.js","webpack://TDLib/./src/boot/Game.js","webpack://TDLib/./src/boot/Settings.js","webpack://TDLib/./src/components/ActionComponent.js","webpack://TDLib/./src/components/BehaviourComponent.js","webpack://TDLib/./src/components/Component.js","webpack://TDLib/./src/components/EffectComponent.js","webpack://TDLib/./src/components/index.js","webpack://TDLib/./src/const.js","webpack://TDLib/./src/managers/Manager.js","webpack://TDLib/./src/managers/index.js","webpack://TDLib/./src/managers/layers/LayerManager.js","webpack://TDLib/./src/managers/layers/Settings.js","webpack://TDLib/./src/managers/light-sources/LightSourceManager.js","webpack://TDLib/./src/managers/updates/UpdateManager.js","webpack://TDLib/./src/rooms/Room.js","webpack://TDLib/./src/rooms/Utils.js","webpack://TDLib/./src/rooms/index.js","webpack://TDLib/./src/sprites/Sprite.js","webpack://TDLib/./src/sprites/actions/Action.js","webpack://TDLib/./src/sprites/actions/examine/Examine.js","webpack://TDLib/./src/sprites/actions/face-to/FaceTo.js","webpack://TDLib/./src/sprites/actions/face-to/Settings.js","webpack://TDLib/./src/sprites/actions/idle/Idle.js","webpack://TDLib/./src/sprites/actions/index.js","webpack://TDLib/./src/sprites/actions/interact/Interact.js","webpack://TDLib/./src/sprites/actions/observe/Observe.js","webpack://TDLib/./src/sprites/actions/run-to/RunTo.js","webpack://TDLib/./src/sprites/actions/run-to/Settings.js","webpack://TDLib/./src/sprites/actions/walk-to/Settings.js","webpack://TDLib/./src/sprites/actions/walk-to/WalkTo.js","webpack://TDLib/./src/sprites/behaviours/Behaviour.js","webpack://TDLib/./src/sprites/behaviours/const.js","webpack://TDLib/./src/sprites/behaviours/examinable/Examinable.js","webpack://TDLib/./src/sprites/behaviours/index.js","webpack://TDLib/./src/sprites/behaviours/interactive/Interactive.js","webpack://TDLib/./src/sprites/behaviours/inventory/Inventory.js","webpack://TDLib/./src/sprites/behaviours/observable/Observable.js","webpack://TDLib/./src/sprites/behaviours/observable/Settings.js","webpack://TDLib/./src/sprites/characters/Character.js","webpack://TDLib/./src/sprites/characters/index.js","webpack://TDLib/./src/sprites/characters/npc-characters/NPCharacter.js","webpack://TDLib/./src/sprites/characters/players/Player.js","webpack://TDLib/./src/sprites/effects/Effect.js","webpack://TDLib/./src/sprites/effects/index.js","webpack://TDLib/./src/sprites/effects/light-effects/HardFlickering.js","webpack://TDLib/./src/sprites/effects/light-effects/HardFlickeringAndTrembling.js","webpack://TDLib/./src/sprites/effects/light-effects/LightEffect.js","webpack://TDLib/./src/sprites/effects/light-effects/RadiusFlickering.js","webpack://TDLib/./src/sprites/effects/light-effects/SoftFlickering.js","webpack://TDLib/./src/sprites/effects/light-effects/SoftFlickeringAndTrembling.js","webpack://TDLib/./src/sprites/effects/light-effects/Trembling.js","webpack://TDLib/./src/sprites/effects/light-effects/index.js","webpack://TDLib/./src/sprites/index.js","webpack://TDLib/./src/sprites/inventory-items/InventoryItem.js","webpack://TDLib/./src/sprites/inventory-items/index.js","webpack://TDLib/./src/sprites/world-items/WorldItem.js","webpack://TDLib/./src/sprites/world-items/index.js","webpack://TDLib/./src/sprites/world-items/light-sources/LightSource.js","webpack://TDLib/./src/sprites/world-items/light-sources/index.js","webpack://TDLib/./src/sprites/world-items/room-furnitures/RoomFurniture.js","webpack://TDLib/./src/sprites/world-items/room-furnitures/index.js","webpack://TDLib/./src/sprites/world-items/wall-furnitures/WallFurniture.js","webpack://TDLib/./src/sprites/world-items/wall-furnitures/index.js","webpack://TDLib/./src/systems/cursors/CursorSystem.js","webpack://TDLib/./src/systems/index.js","webpack://TDLib/./src/systems/rooms/RoomSystem.js","webpack://TDLib/./src/utils/Utils.js","webpack://TDLib/./src/utils/index.js","webpack://TDLib/./node_modules/filter-obj/index.js","webpack://TDLib/external \"phaser\"","webpack://TDLib/webpack/bootstrap","webpack://TDLib/webpack/startup","webpack://TDLib/webpack/runtime/global"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__1487__","TDLib","Components","Game","Managers","Rooms","Settings","Sprites","Systems","Utils","Objects","Extend","global","Boot","console","log","this","cursors","configure","GAME","scene","rooms","start","STARTING_ROOM","Scene","CONST","game","config","bannerBackgroundColor","bannerTextColor","hidePhaser","renderType","audioType","audioConfig","audio","deviceAudio","device","webAudio","disableWebAudio","noAudio","audioData","browser","ie","lastColor","c","args","Array","isArray","forEach","color","concat","push","length","gameTitle","gameVersion","VERSION","PHASER_VERSION","DEVICE","gameURL","apply","_setScreenConfig","_setPhysicsConfig","_setPlugins","_setBoot","_setHeaderProps","_finalizeConfig","startingRoom","GAME_SPRITES","_setGameSprites","Clone","sprites","SCREEN_PROPS","getScreenProps","width","calculatedWidth","height","calculatedHeight","zoom","calculatedZoom","autoResize","backgroundColor","pixelArt","physics","default","arcade","debug","gravity","y","x","plugins","key","plugin","RoomSystem","mapping","CursorSystem","UpdateManager","LightSourceManager","LayerManager","banner","obj","flag","Object","keys","value","objectsObj","temp","father","output","getChildrenFromFather","element","type","WEBGL","maxLights","parent","disableContextMenu","TILE_SIZE","ROOM_HEIGHT_IN_TILE","INVENTORY_WIDTH_IN_TILES_MOBILE","INVENTORY_WIDTH_IN_TILES_DESKTOP","INVENTORY_HEIGHT_IN_TILES_MOBILE","INVENTORY_HEIGHT_IN_TILES_DESKTOP","ROOM_FRAME_IN_TILES_DESKTOP","ROOM_FRAME_IN_TILES_MOBILE","ActionComponent","gameObject","defaultAction","Idle","_queue","_start","Action","mode","DEFAULT_MODE","newAction","_abort","QUEUE_MODE","PAUSE_MODE","_pause","unshift","shift","isPaused","_resume","name","_update","BehaviourComponent","pixelPerfect","player","room","_addBehaviours","EXAMINABLE","INTERACTIVE","observe","Observable","examine","Examinable","interact","Interactive","constructor","EffectComponent","previousEffects","currentEffect","duration","stop","LightEffects","play","timer","time","addEvent","delay","callback","callbackScope","repeat","remove","Component","LEFT","RIGHT","Manager","pluginManager","Plugins","ScenePlugin","layerSize","strartingDepth","startingDepth","backgroundLayer","add","group","rearDoorsLayer","wallFurnitureLayer","roomFurnitureLayer","sideDoorsLayer","npcLayer","playerLayer","cielingObjectsLayer","frontDoorsLayer","wallsLayer","wallsMaskLayer","overallDarknessLayer","borderMasksLayer","i","setDepth","graphicLights","diffusedLights","lightSources","source","getChildren","lightSource","setPipeline","target","singleLightContributeAccumulator","light","isOn","singleLightContribute","diffusedLight","intensity","Math","abs","offset","effects","contributeFactor","floor","singleLightIntensityAccumulator","averageLightsContribute","layers","events","systems","gameObjects","Phaser","Structs","Set","on","_sceneUpdate","_sceneShutdown","once","_sceneDestroy","delta","iterateLocal","clear","off","_scenePostUpdate","set","objs","delete","Room","sceneKey","rawAssets","assets","raw","array","map","_scrapeAssets","load","path","nPath","bPath","image","scrapeComplexObjKey","params","findFileNameFromPath","setName","lights","enable","bringToTop","_setCameraViewport","_createRoom","_createSprites","_applyBorderMasks","setLayersDepth","cameras","main","setBounds","startFollow","setRoundPixels","world","setPosition","setSize","make","tilemap","tilemapTiledJSON","tileWidth","tileHeight","createDynamicLayer","addTilesetImage","tiles","background","walls","_this","objects","layer","create","setScrollFactor","setOrigin","_updateMasksByLightDiffusion","children","list","actions","calculateAverageLightsContribute","setAlpha","searchKey","prop","nameFirstCharachterPosition","lastIndexOf","nameLastCharachterPosition","slice","Sprite","texture","hasBody","behaviourType","INERT","observeText","DEFAULT_OBSERVE_TEXT","examineOrInteractText","DEFAULT_EXAMINE_OR_INTERACT_TEXT","blockExamineText","noLightObserveText","DEFAULT_NO_LIGHT_OBSERVE_TEXT","noLightExamineOrInteractText","DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT","examineOrInteractOffsetX","examineOrInteractThresholdRadius","minLightLevelToExamineOrInteract","DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT","minLightLevelToObserve","DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE","random","behaviours","existing","updates","setCollideWorldBounds","setGravityY","warn","offsetX","offsetY","input","hitArea","Physics","Arcade","invoker","actor","action","finish","_remove","startCallback","finishCallback","updateCallback","resumeCallback","pauseCallback","Examine","arguments","addActions","getAction","FaceTo","BaseAction","MICRO_MOVEMENT_RADIUS","facing","setFlipX","body","setVelocity","anims","Actions","Interact","Observe","RunTo","WalkTo","RUN_VELOCITY","velocity","WALK_VELOCITY","Behaviour","component","setInteractive","alphaTolerance","draggable","calculateLightsContribuitePoint","TALKABLE","INVENTORY","checkLight","Behaviours","Talkable","Inventory","_timer","pointer","setCursor","DEFAULT_MIN_TIME_TO_OBSERVE","isBlocked","bind","Character","Characters","NPCharacter","Player","pointerDown","Effect","Effects","HardFlickering","minTime","maxTime","finalState","setTimer","stopped","initialConfig","graphicLight","setIntensity","turnOff","HardFlickeringAndTrembling","hardFlickering","trembling","LightEffect","RadiusFlickering","minPercentageIntensity","maxPercentageIntensity","minPercentageRadius","maxPercentageRadius","backToInitialIntensity","backToInitialRadius","newIntensityPercentage","newRadiusPercentage","setRadius","radius","SoftFlickering","SoftDefaultFlickeringAndtrembling","softFlickering","Trembling","SoftFlickeringAndTrembling","InventoryItems","WorldItems","InentoryItem","resetPipeline","InventoryItem","WorldItem","LightSources","RoomFurnitures","WallFurnitures","LightSource","graphicLightConfig","diffusedLightConfig","turnOn","addLight","diffusedLightindex","indexOf","splice","removeLight","graphicLightindex","RoomFurniture","WallFurniture","cursorScene","sceneManager","lastTarget","CURSOR_SCENE_KEY","CursorScene","cursor","DEFAULT_CURSOR","activePointer","camera","worldX","EXAMINABLE_CURSOR","abort","INTERACTIVE_CURSOR","TALKABLE_CURSOR","TalkTo","setTexture","setVisible","HOLD_CURSOR","CHOICE_CURSOR","CHOICE_PRESSED_CURSOR","setDefaultCursor","BasePlugin","currentRoom","autoStart","returnValue","availHeight","window","innerHeight","availWidth","innerWidth","screen","ceil","object","predicate","result","entries","includes","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","g","globalThis","Function","e"],"mappings":"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","file":"the-darkest-lib.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"phaser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"TDLib\", [\"phaser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TDLib\"] = factory(require(\"phaser\"));\n\telse\n\t\troot[\"TDLib\"] = factory(root[\"phaser\"]);\n})(self, function(__WEBPACK_EXTERNAL_MODULE__1487__) {\nreturn ","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport CONST from './const';\nimport Phaser from 'phaser';\n\n/**\n * @namespace TDLib\n */\n\nvar TDLib = {\n  Components: require('./components'),\n  Game: require('./boot/Game'),\n  Managers: require('./managers'),\n  Rooms: require('./rooms'),\n  Settings: require('./boot/Settings'),\n  Sprites: require('./sprites'),\n  Systems: require('./systems'),\n  Utils: require('./utils')\n};\n\n// Merge the consts\nTDLib = Phaser.Utils.Objects.Extend(false, TDLib, CONST);\n\n// Export the module\nmodule.exports = TDLib;\nglobal.TDLib = TDLib;\n","import Phaser from 'phaser';\nimport Settings from './Settings';\n\nexport default class Boot extends Phaser.Scene {\n  constructor() {\n    super('Boot');\n  }\n\n  preload() {\n\n  }\n\n  create() {\n    console.log('Booting all game systems...');\n    this.cursors.configure(Settings.GAME.scene);\n    this.rooms.configure(Settings.GAME.scene);\n    this.rooms.start(Settings.STARTING_ROOM); // TEMP NAME\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nvar CONST = require('../const');\nvar Settings = require('./Settings');\n\n/**\n * Called automatically by Phaser.Game and responsible for creating the console.log debug header.\n *\n * You can customize or disable the header via the Game Config object.\n *\n * @function TDLib.Boot.DebugHeader\n * @since 1.0.0\n *\n * @param {TDLib.Game} game - The TDLib.Game instance which will output this debug header.\n */\nvar DebugHeader = function (game) {\n  let config = game.config;\n\n  config.bannerBackgroundColor = '#0002e6';\n  config.bannerTextColor = '#ffffff';\n  config.hidePhaser = false;\n\n  let renderType = 'WebGL';\n\n  if (config.renderType !== 2) {\n    renderType = 'NULL';\n  }\n\n  let audioConfig = config.audio;\n\n  let deviceAudio = game.device.audio;\n\n  let audioType;\n\n  if (deviceAudio.webAudio && !(audioConfig && audioConfig.disableWebAudio)) {\n    audioType = 'Web Audio';\n  } else if ((audioConfig && audioConfig.noAudio) || (!deviceAudio.webAudio && !deviceAudio.audioData)) {\n    audioType = 'No Audio';\n  } else {\n    audioType = 'HTML5 Audio';\n  }\n\n  if (!game.device.browser.ie) {\n    let c = '';\n\n    let args = [c];\n\n    if (Array.isArray(config.bannerBackgroundColor)) {\n      let lastColor;\n\n      config.bannerBackgroundColor.forEach(function (color) {\n        c = c.concat('%c ');\n\n        args.push('background: ' + color);\n\n        lastColor = color;\n\n      });\n\n      //  inject the text color\n      args[args.length - 1] = 'color: ' + config.bannerTextColor + '; background: ' + lastColor;\n    } else {\n      c = c.concat('%c ');\n\n      args.push('color: ' + config.bannerTextColor + '; background: ' + config.bannerBackgroundColor);\n    }\n\n    //  URL link background color (always white)\n    args.push('background: #fff');\n\n    if (config.gameTitle) {\n      c = c.concat(config.gameTitle);\n\n      if (config.gameVersion) {\n        c = c.concat(' v' + config.gameVersion);\n      }\n\n      if (!config.hidePhaser) {\n        c = c.concat(' / ');\n      }\n    }\n\n    if (!config.hidePhaser) {\n      c = c.concat('TDLib v' + CONST.VERSION + ' / Phaser v' + CONST.PHASER_VERSION);\n      c = c.concat(' (' + renderType + ' | ' + audioType + ' | ' + Settings.DEVICE + ')');\n    }\n\n    c = c.concat(' %c ' + config.gameURL);\n\n    //  Inject the new string back into the args array\n    args[0] = c;\n\n    console.log.apply(console, args);\n  }\n};\n\nmodule.exports = DebugHeader;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Settings from './Settings';\nimport DebugHeader from './DebugHeader';\nimport Utils from '../utils';\nimport Managers from '../managers';\nimport Systems from '../systems';\nimport Boot from './Boot';\nimport Phaser from 'phaser';\nimport filterObj from 'filter-obj';\n\n/**\n * @classdesc\n * The TDLib.Game instance is the main controller for the entire game. It create an instace\n * of Phaser.Game with a default configuration of various parameters.\n *\n * @class Game\n * @memberof TDLib\n * @constructor\n * @since 1.0.0\n *\n * @param {Object} [config] - The configuration object for your TDLib Game instance.\n * @param {Object} [config.title] - The title of your game.\n * @param {Object} [config.url] - The url of your online game or website.\n * @param {Object} [config.version] - The version of your game.\n */\nexport default class Game {\n  constructor(config) {\n    /**\n     * The parsed Game Configuration object.\n     *\n     * The values stored within this object are read-only and should not be changed at run-time.\n     *\n     * @name TDLib.Game#config\n     * @type {Object}\n     * @readonly\n     * @since 1.0.0\n     */\n    this.config = config;\n    this._setScreenConfig();\n    this._setPhysicsConfig();\n    this._setPlugins();\n    this._setBoot();\n    this._setHeaderProps();\n    this._finalizeConfig();\n\n    /** ************ TODO: Aggiungere il device e la funzione per determinarlo **************/\n    Settings.STARTING_ROOM = this.config.startingRoom;\n    Settings.GAME_SPRITES = this._setGameSprites(Phaser.Utils.Objects.Clone(this.config.sprites));\n    Settings.GAME = new Phaser.Game(this.config);\n\n    DebugHeader(Settings.GAME);\n    return Settings.GAME;\n  }\n\n  /**\n   * This method is called automatically and configure the screen proportions and settings for the Game.\n   *\n   * @method TDLib.Game#_setScreenConfig\n   * @protected\n   * @since 1.0.0\n   */\n  _setScreenConfig() {\n    Settings.SCREEN_PROPS = Utils.getScreenProps();\n\n    this.config.width = Settings.SCREEN_PROPS.calculatedWidth;\n    this.config.height = Settings.SCREEN_PROPS.calculatedHeight;\n    this.config.zoom = Settings.SCREEN_PROPS.calculatedZoom;\n\n    this.config.autoResize = false;\n    this.config.backgroundColor = '#000000';\n    this.config.pixelArt = true;\n  }\n\n  /**\n   * This method is called automatically and configure physics for the Game using the Arcade engine of Phaser.\n   *\n   * @method TDLib.Game#_setPhysicsConfig\n   * @protected\n   * @since 1.0.0\n   */\n  _setPhysicsConfig() {\n    this.config.physics = {\n      default: 'arcade',\n      arcade: {\n        debug: false,\n        gravity: { y: 0, x: 0 }\n      }\n    };\n  }\n\n  /**\n   * This method is called automatically and configure the plugins for the Game.\n   * Global plugins are called Systems.\n   * Scene plugins are called Managers.\n   *\n   * @method TDLib.Game#_setPlugins\n   * @protected\n   * @since 1.0.0\n   */\n  _setPlugins() {\n    this.config.plugins = {\n      // Systems\n      global: [\n        { key: 'RoomSystem', plugin: Systems.RoomSystem, start: false, mapping: 'rooms' },\n        { key: 'CursorSystem', plugin: Systems.CursorSystem, start: false, mapping: 'cursors' }\n      ],\n      // Managers\n      scene: [\n        { key: 'UpdateManager', plugin: Managers.UpdateManager, mapping: 'updates' },\n        { key: 'LightSourceManager', plugin: Managers.LightSourceManager, mapping: 'lightSources' },\n        { key: 'LayerManager', plugin: Managers.LayerManager, mapping: 'layers' }\n      ]\n    };\n  }\n\n  /**\n   * This method is called automatically and configure the Phaser.Scene Boot to start the Systems.\n   *\n   * @method TDLib.Game#_setBoot\n   * @protected\n   * @since 1.0.0\n   */\n  _setBoot() {\n    this.config.scene = [Boot];\n  }\n\n  /**\n   * This method is called automatically and turn off the default Phaser header/banner.\n   *\n   * @method TDLib.Game#_setHeaderProps\n   * @protected\n   * @since 1.0.0\n   */\n  _setHeaderProps() {\n    this.config.banner = false;\n  }\n\n  _setGameSprites(obj) {\n    function haveChildObject(father) {\n      let flag = false;\n\n      if (Object.keys(filterObj(obj, (key, value) => (\n        // eslint-disable-next-line eqeqeq\n        typeof value == 'object' &&\n        // eslint-disable-next-line eqeqeq\n        typeof value.default != 'function' &&\n        Object.keys(value).length > 0))).length > 0) flag = true;\n      return flag;\n    }\n\n    function getChildrenFromFather(father) {\n      let output = [];\n\n      for (let key in father) {\n        output.push(father[key]);\n      }\n\n      return output;\n    }\n\n    if (haveChildObject(obj)) {\n      // eslint-disable-next-line eqeqeq\n      let objectsObj = filterObj(obj, (key, value) => (typeof value == 'object' && typeof value.default != 'function'));\n\n      let temp = getChildrenFromFather(objectsObj);\n\n      temp.forEach(element => {\n        obj = Phaser.Utils.Objects.Extend(false, obj, element);\n      });\n\n      for (let key in objectsObj) delete obj[key];\n\n      return this._setGameSprites(obj);\n    }\n    return obj;\n\n  }\n\n  /**\n   * This method is called automatically and finalize the config passed to Phaser.Game.\n   *\n   * @method TDLib.Game#_finalizeConfig\n   * @protected\n   * @since 1.0.0\n   */\n  _finalizeConfig() {\n    this.config.type = Phaser.WEBGL;\n    this.config.maxLights = 20;\n    this.config.parent = 'game';\n    this.config.disableContextMenu = true;\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * The default Game settings.\n * @namespace TDLib.Settings\n */\nvar Settings = {\n  /**\n   * The instance of the Game.\n   *\n   * @name TDLib.Settings.GAME\n   * @const\n   * @type {TDLib.Game}\n   * @since 1.0.0\n   */\n  GAME: '',\n  /**\n   * The size of the tiles.\n   *\n   * @name TDLib.Settings.TILE_SIZE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  TILE_SIZE: 48,\n  /**\n   * The height of a standard room in tiles.\n   *\n   * @name TDLib.Settings.ROOM_HEIGHT_IN_TILE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  ROOM_HEIGHT_IN_TILE: 6,\n  /**\n   * The inventory width in tiles in mobile devices.\n   *\n   * @name TDLib.Settings.INVENTORY_WIDTH_IN_TILES_MOBILE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  INVENTORY_WIDTH_IN_TILES_MOBILE: 1.25,\n  /**\n   * The inventory width in tiles in desktop devices.\n   *\n   * @name TDLib.Settings.INVENTORY_WIDTH_IN_TILES_DESKTOP\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  INVENTORY_WIDTH_IN_TILES_DESKTOP: 0,\n  /**\n   * The inventory height in tiles in mobile devices.\n   *\n   * @name TDLib.Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  INVENTORY_HEIGHT_IN_TILES_MOBILE: 0,\n  /**\n   * The inventory height in tiles in desktop devices.\n   *\n   * @name TDLib.Settings.INVENTORY_HEIGHT_IN_TILES_DESKTOP\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  INVENTORY_HEIGHT_IN_TILES_DESKTOP: 1,\n  /**\n   * The room frame in tiles in desktop devices.\n   *\n   * @name TDLib.Settings.ROOM_FRAME_IN_TILES_DESKTOP\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  ROOM_FRAME_IN_TILES_DESKTOP: 0.5,\n  /**\n   * The room frame in tiles in mobile devices.\n   *\n   * @name TDLib.Settings.ROOM_FRAME_IN_TILES_MOBILE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  ROOM_FRAME_IN_TILES_MOBILE: 0.25,\n  /**\n   * The proportions of the used screen.\n   *\n   * @name TDLib.Settings.SCREEN_PROPS\n   * @type {Object}\n   * @since 1.0.0\n   */\n  SCREEN_PROPS: {},\n  /**\n   * The used device.\n   *\n   * @name TDLib.Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE\n   * @type {String}\n   * @since 1.0.0\n   */\n  DEVICE: 'Desktop',\n  STARTING_ROOM: null,\n  GAME_SPRITES: null\n};\n\nmodule.exports = Settings;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Component from './Component';\nimport Actions from '../sprites/actions';\n\n/**\n * @classdesc\n * Class representing the ActionComponent.\n * ActionComponent is responsible to handle all the actions for a Sprite.\n *\n * @class ActionComponent\n * @memberof TDLib.Components\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Sprites.Sprite} gameObject - The performer of the action.\n */\nexport default class ActionComponent extends Component {\n  constructor(gameObject) {\n    super(gameObject);\n\n    /**\n     * The performer of the action.\n     * @type {TDLib.Sprites.Sprite}\n     * @name TDLib.Components.ActionComponent#gameObject\n     * @since 1.0.0\n     */\n    this.gameObject = gameObject;\n\n    /**\n     * The default action to be played, AIdle by default.\n     * @type {TDLib.Components.Actions.Action}\n     * @name TDLib.Components.ActionComponent#defaultAction\n     * @since 1.0.0\n     */\n    this.defaultAction = new Actions.Idle(this, this.gameObject);\n\n    /**\n     * The queue of actions.\n     * @type {Array}\n     * @name TDLib.Components.ActionComponent#_queue\n     * @protected\n     * @since 1.0.0\n     */\n    this._queue = [this.defaultAction];\n    this._queue[0]._start();\n  }\n\n  /**\n   * Using this mode the queue is emptied and the new action is immediately performed.\n   * @name TDLib.Components.ActionComponent#DEFAULT_MODE\n   * @since 1.0.0\n   */\n  static get DEFAULT_MODE() {\n    return 0;\n  }\n\n  /**\n   * Using this mode the new action is added to the queue.\n   * @name TDLib.Components.ActionComponent#QUEUE_MODE\n   * @since 1.0.0\n   */\n  static get QUEUE_MODE() {\n    return 1;\n  }\n\n  /**\n   * Using this mode the currently performed action is paused and the new action is immediately performed.\n   * Then the paused action is resumed.\n   * @name TDLib.Components.ActionComponent#PAUSE_MODE\n   * @since 1.0.0\n   */\n  static get PAUSE_MODE() {\n    return 2;\n  }\n\n  /**\n   * Starts a new action or add that to the queue.\n   *\n   * @method TDLib.Components.ActionComponent#add\n   * @param {TDLib.Components.Sprites.Actions.Action} action - The action to add or execute.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   * @param {number} [mode=ActionComponent.DEFAULT_MODE] - The operating mode of the component.\n   * @since 1.0.0\n   */\n  add(Action, config, mode = ActionComponent.DEFAULT_MODE) {\n\n    let newAction = new Action(this, this.gameObject, config);\n\n    switch (mode) {\n      case ActionComponent.DEFAULT_MODE: {\n        this._queue[0]._abort();\n        this._queue = [];\n        this._queue.push(newAction);\n        this._queue[0]._start();\n      };\n        break;\n\n      case ActionComponent.QUEUE_MODE: {\n        this._queue.push(newAction);\n      };\n        break;\n\n      case ActionComponent.PAUSE_MODE: {\n        this._queue[0]._pause();\n        this._queue.unshift(newAction);\n        this._queue[0]._start();\n      };\n        break;\n    }\n\n    return newAction;\n  }\n\n  /**\n   * Remove a completed action from the queue.\n   *\n   * @method TDLib.Components.ActionComponent#_remove\n   * @protected\n   * @since 1.0.0\n   */\n  _remove() {\n    this._queue.shift();\n    if (this._queue.length <= 0) this._queue.push(this.defaultAction);\n    if (this._queue[0].isPaused) this._queue[0]._resume();\n    else this._queue[0]._start();\n  }\n\n  /**\n   * Update the currently performed action.\n   *\n   * @method TDLib.Components.ActionComponent#_update\n   * @protected\n   * @since 1.0.0\n   */\n  _update() {\n    if (this._queue.length <= 0) this._queue.push(this.defaultAction);\n    else if (this._queue.length > 1 && this._queue[0].name === 'Idle') {\n      this._queue.shift();\n      if (this._queue[0].isPaused) this._queue[0]._resume();\n      else this._queue[0]._start();\n    }\n\n    this._queue[0]._update();\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Component from './Component';\nimport Behaviours from '../sprites/behaviours';\n\n/**\n * @classdesc\n * Class representing the BehaviourComponent.\n * BehaviourComponent is responsible to handle all the behaviours of a Sprite.\n * A Sprite can be INERT, OBSERVABLE, EXAMINABLE, INTERACTIVE, INVENTORY, TALKABLE.\n *\n * @class BehaviourComponent\n * @memberof TDLib.Components\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Sprites.Sprite} gameObject - The Sprite that owns the component.\n * @param {string} type - The type of behaviour of the gameObject.\n * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n */\nexport default class BehaviourComponent extends Component {\n  constructor(gameObject, type, pixelPerfect) {\n    super(gameObject);\n\n    /**\n     * A reference to the player in the current room.\n     * @type {TDLib.Sprites.Characters.Player}\n     * @name TDLib.Components.BehaviourComponent#player\n     * @since 1.0.0\n     */\n    this.player;\n    if (typeof this.gameObject.room.player === 'undefined') this.player = this.gameObject;\n    else this.player = this.gameObject.room.player;\n\n    /**\n     * The type of behaviour of the gameObject.\n     * @type {string}\n     * @name TDLib.Components.BehaviourComponent#type\n     * @since 1.0.0\n     */\n    this.type = type;\n\n    /**\n     * If not null enable the pixel perfect pointer hit for the Sprite.\n     * @type {string}\n     * @name TDLib.Components.BehaviourComponent#pixelPerfect\n     * @since 1.0.0\n     */\n    this.pixelPerfect = pixelPerfect;\n\n    this._addBehaviours();\n  }\n\n  /**\n   * Select the appropriate behaviour for the gameObject.\n   *\n   * @method TDLib.Components.BehaviourComponent#_addBehaviours\n   * @protected\n   * @since 1.0.0\n   */\n  _addBehaviours() {\n    // Se l'oggetto è osservabile (cioè esaminabile o interagibile) setto il cursore appropriato\n    if (this.type === Behaviours.EXAMINABLE || this.type === Behaviours.INTERACTIVE) {\n      this.observe = new Behaviours.Observable(this);\n      if (this.type === Behaviours.EXAMINABLE) this.examine = new Behaviours.Examinable(this);\n      else if (this.type === Behaviours.INTERACTIVE) this.interact = new Behaviours.Interactive(this);\n    }\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * @classdesc\n * Class representing a generic Component.\n * A Component is bound to a Sprite and extends the members and methods of it.\n * To access the component you have to use a specific key.\n *\n * @class Component\n * @memberof TDLib.Components\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Sprites.Sprite} gameObject - The Sprite using the Component.\n */\nexport default class Component {\n  constructor(gameObject) {\n\n    /**\n     * The name of the Component.\n     * @type {string}\n     * @name TDLib.Components.Component#name\n     * @since 1.0.0\n     */\n    this.name = this.constructor.name;\n\n    /**\n     * The Sprite using the Component.\n     * @type {TDLib.Sprites.Sprite}\n     * @name TDLib.Components.Component#gameObject\n     * @since 1.0.0\n     */\n    this.gameObject = gameObject;\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Component from './Component';\nimport Effects from '../sprites/effects';\nimport LightSource from '../sprites/world-items/light-sources/LightSource';\n\n/**\n * @classdesc\n * Class representing the EffectComponent.\n * EffectComponent is responsible to handle all the effects of a Sprite.\n *\n * @class EffectComponent\n * @memberof TDLib.Components\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Sprites.Sprite} gameObject - The Sprite that owns the component.\n */\nexport default class EffectComponent extends Component {\n  constructor(gameObject) {\n    super(gameObject);\n\n    /**\n     * An array containing all the already played Effects.\n     * @type {Array}\n     * @name TDLib.Components.EffectComponent#previousEffects\n     * @since 1.0.0\n     */\n    this.previousEffects = [];\n\n    /**\n     * The currently played Effect.\n     * @type {TDLib.Sprites.Effects.Effect}\n     * @name TDLib.Components.EffectComponent#currentEffect\n     * @since 1.0.0\n     */\n    this.currentEffect = null;\n  }\n\n  /**\n   * Starts a new Effect. If there's an already running Effect it is stopped.\n   *\n   * @method TDLib.Components.EffectComponent#play\n   * @param {string} key - A key identifying an Effect.\n   * @param {Object} [duration=-1] - If specified it represents the duration of the Effect.\n   * @param {Object} [config] - The configuration object for the Effect.\n   * @since 1.0.0\n   */\n  play(key, duration = -1, config) {\n    if (this.currentEffect) this.stop();\n\n    if (key in Effects) this.currentEffect = new Effects[key](this, config);\n    else if (key in Effects.LightEffects) {\n      if (this.gameObject instanceof LightSource) this.currentEffect = new Effects.LightEffects[key](this, config);\n      else console.log(key + ' can only be run by a LightSource');\n    } else {\n      console.log('No effect with key: ', key);\n    }\n\n    if (this.currentEffect) this.currentEffect.play();\n\n    if (duration > 0) {\n      this.timer = this.gameObject.room.time.addEvent({\n        delay: duration,\n        callback: () => {\n          this.stop();\n        },\n        callbackScope: this,\n        repeat: 0\n      });\n      console.log(this.currentEffect.name + 'Effect started for', duration, 'ms');\n    } else if (duration === -1) {\n      console.log(this.currentEffect.name + 'Effect started');\n    } else {\n      console.log('You must use a positive value!');\n    }\n  }\n\n  /**\n   * Stops the currently played Effect.\n   *\n   * @method TDLib.Components.EffectComponent#stop\n   * @since 1.0.0\n   */\n  stop() {\n    if (this.currentEffect) {\n      if (this.timer) {\n        this.timer.remove();\n        this.timer = null;\n      }\n      this.previousEffects.push(this.currentEffect);\n      this.currentEffect.stop();\n      console.log(this.currentEffect.name + 'Effect stopped');\n      this.currentEffect = null;\n      console.log(this.previousEffects);\n    }\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * Components are attachable to Sprites in order to extend their capabilities.\n * @namespace TDLib.Components\n */\n\nconst Components = {\n  Component: require('./Component'),\n  ActionComponent: require('./ActionComponent'),\n  BehaviourComponent: require('./BehaviourComponent'),\n  EffectComponent: require('./EffectComponent')\n};\n\nmodule.exports = Components;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * Global consts.\n *\n * @ignore\n */\n\nimport Phaser from 'phaser';\n\nconst CONST = {\n  /**\n   * TheDarkestLib Release Version.\n   *\n   * @name TDLib.VERSION\n   * @const\n   * @type {string}\n   * @since 1.0.0\n   */\n  VERSION: require('../package.json').version,\n  /**\n   * Phaser Release Version.\n   *\n   * @name TDLib.PHASER_VERSION\n   * @const\n   * @type {string}\n   * @since 1.0.0\n   */\n  PHASER_VERSION: Phaser.VERSION,\n  /**\n   * Left direction constant.\n   *\n   * @name TDLib.LEFT\n   * @const\n   * @type {string}\n   * @since 1.0.0\n   */\n  LEFT: '_left',\n  /**\n   * Right direction constant.\n   *\n   * @name TDLib.RIGHT\n   * @const\n   * @type {string}\n   * @since 1.0.0\n   */\n  RIGHT: '_right'\n};\n\nmodule.exports = CONST;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Phaser from 'phaser';\n\n/**\n * @classdesc\n * Class representing a generic Manager.\n * A Manager is a controller working at a Room level.\n * It is unique in its own Room, but it isn't in the whole game.\n * From Phaser library a Manager is handled as a Phaser.Plugins.ScenePlugin.\n * It has to be added to the game into Game.js through the specified method..\n *\n * @class Manager\n * @extends Phaser.Plugins.ScenePlugin\n * @memberof TDLib.Managers\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Rooms.Room|Phaser.Scene} room - The room running the Manager.\n * @param {Phaser.Plugins.PluginManager} - A reference to Phaser PluginManager.\n */\nexport default class Manager extends Phaser.Plugins.ScenePlugin {\n  constructor(room, pluginManager) {\n    super(room, pluginManager);\n\n    /**\n     * The room running the Manager.\n     * @type {TDLib.Rooms.Room|Phaser.Scene}\n     * @since 1.0.0\n     */\n    this.room = room;\n  }\n\n  /**\n   * Default function called by Phaser when booting the plugins.\n   * @method TDLib.Managers.Manager#boot\n   * @protected\n   * @since 1.0.0\n   */\n  boot() {\n\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * A Manager is a controller working at a Room level.\n * It is unique in its own Room, but it isn't in the whole game.\n * From Phaser library a Manager is handled as a Phaser.Plugins.ScenePlugin.\n * It has to be added to the game into Game.js through the specified method.\n * @see TDLib.Game#_setPlugins\n * @namespace TDLib.Managers\n */\n\nconst Managers = {\n  LayerManager: require('./layers/LayerManager'),\n  LightSourceManager: require('./light-sources/LightSourceManager'),\n  Manager: require('./Manager'),\n  UpdateManager: require('./updates/UpdateManager')\n};\n\nmodule.exports = Managers;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Manager from '../Manager';\nimport Settings from './Settings';\n\n/**\n * @classdesc\n * Class representing a LayerManager, responsible to manage\n * the layers order, in order to have all the elements rendered correctly.\n * Layers are Phaser.GameObjects.Group.\n *\n * @class LayerManager\n * @extends TDLib.Managers.Manager\n * @memberof TDLib.Managers\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Rooms.Room|Phaser.Scene} room - The room running the Manager.\n * @param {Phaser.Plugins.PluginManager} - A reference to Phaser PluginManager.\n */\nexport default class LayerManager extends Manager {\n  constructor(room, pluginManager) {\n    super(room, pluginManager);\n    /**\n     * The size in cells of each Layer.\n     * @type {number}\n     * @name TDLib.Managers.LayerManager#layerSize\n     * @since 1.0.0\n     */\n    this.layerSize = Settings.layerSize;\n\n    /**\n     * The starting depth of Layers.\n     * @type {number}\n     * @name TDLib.Managers.LayerManager#startingDepth\n     * @since 1.0.0\n     */\n    this.strartingDepth = Settings.startingDepth;\n  }\n\n  /**\n   * @lends TDLib.Managers.Manager.boot\n   */\n  boot() {\n    super.boot();\n    /**\n     * The Layer containing the background wall.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#backgroundLayer\n     * @since 1.0.0\n     */\n    this.backgroundLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the rear doors.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#rearDoorsLayer\n     * @since 1.0.0\n     */\n    this.rearDoorsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the objects fixed to the background wall.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#wallFurnitureLayer\n     * @since 1.0.0\n     */\n    this.wallFurnitureLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the objects in the room.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#roomFurnitureLayer\n     * @since 1.0.0\n     */\n    this.roomFurnitureLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the side doors.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#sideDoorsLayer\n     * @since 1.0.0\n     */\n    this.sideDoorsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the NPCs.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#playerLayer\n     * @since 1.0.0\n     */\n    this.npcLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the Player.\n     * @type {Phaser.GameObjects.Group}\n     * @since 1.0.0\n     */\n    this.playerLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the cieling objects from the roof.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#cielingObjectsLayer\n     * @since 1.0.0\n     */\n    this.cielingObjectsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the front doors.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#frontDoorsLayer\n     * @since 1.0.0\n     */\n    this.frontDoorsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the lateral walls.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#wallsLayer\n     * @since 1.0.0\n     */\n    this.wallsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the lateral walls black mask.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#wallsMaskLayer\n     * @since 1.0.0\n     */\n    this.wallsMaskLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the overall darkness mask.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#overallDarknessLayer\n     * @since 1.0.0\n     */\n    this.overallDarknessLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the border black masks.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#borderMasksLayer\n     * @since 1.0.0\n     */\n    this.borderMasksLayer = this.room.add.group();\n  }\n\n  /**\n   * Set the correct depth for each Layer in the right order.\n   * @method TDLib.Managers.LayerManager#setLayersDepth\n   * @since 1.0.0\n   */\n  setLayersDepth() {\n    let i = this.strartingDepth;\n\n    this.backgroundLayer.setDepth(this.layerSize * i);\n    i++;\n    this.rearDoorsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.wallFurnitureLayer.setDepth(this.layerSize * i);\n    i++;\n    this.roomFurnitureLayer.setDepth(this.layerSize * i);\n    i++;\n    this.sideDoorsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.npcLayer.setDepth(this.layerSize * i);\n    i++;\n    this.playerLayer.setDepth(this.layerSize * i);\n    i++;\n    this.cielingObjectsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.frontDoorsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.wallsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.wallsMaskLayer.setDepth(this.layerSize * i);\n    i++;\n    this.overallDarknessLayer.setDepth(this.layerSize * i);\n    i++;\n    this.borderMasksLayer.setDepth(this.layerSize * i);\n    i++;\n  }\n}\n","const Settings = {\n  layerSize: 10,\n  startingDepth: 0\n};\n\nmodule.exports = Settings;\n","import Manager from '../Manager';\nimport GlobalSettings from '../../boot/Settings';\n\nexport default class LightSourceManager extends Manager {\n  constructor(room, pluginManager) {\n    super(room, pluginManager);\n\n    this.graphicLights = [];\n    this.diffusedLights = [];\n  }\n\n  boot() {\n    super.boot();\n    this.lightSources = this.room.add.group();\n  }\n\n  add(source) {\n    this.lightSources.add(source, true);\n    this.lightSources.getChildren().forEach(lightSource => {\n      lightSource.setPipeline('Light2D');\n    });\n\n    return source;\n  }\n\n  // Le luci che flickerano o con comportamenti strani vanno contate?\n  calculateLightsContribuitePoint(target) {\n    let singleLightContributeAccumulator = 0;\n\n    this.lightSources.getChildren().forEach(light => {\n      if (light.isOn) {\n        // eslint-disable-next-line max-len\n        let singleLightContribute = light.config.diffusedLight.intensity / (Math.abs(light.x + light.config.offset.x - target.x) ^ 2);\n\n        // COSE\n        if (light.effects.currentEffect) {\n          singleLightContribute *= light.effects.currentEffect.contributeFactor;\n        }\n\n        singleLightContributeAccumulator += singleLightContribute;\n      }\n    });\n\n    return Math.floor(singleLightContributeAccumulator * 10000) / 1000;\n  }\n\n  calculateAverageLightsContribute() {\n    let singleLightIntensityAccumulator = 0;\n\n    this.diffusedLights.forEach(light => {\n      singleLightIntensityAccumulator += light.intensity;\n    });\n    let averageLightsContribute = 0;\n\n    // eslint-disable-next-line max-len\n    if (singleLightIntensityAccumulator !== 0) averageLightsContribute = Math.floor((singleLightIntensityAccumulator * 10000 / this.room.layers.wallsLayer.width / GlobalSettings.TILE_SIZE) * 100) / 100 + 0.3;\n    return averageLightsContribute;\n  }\n}\n","import Manager from '../Manager';\n\n/**\n * Class representing the update plugin.\n * @extends TDLib.Plugins.TDLRoomPlugin\n * @memberof TDLib.Plugins.RoomPlugins\n * @since 1.0.0\n */\nexport default class UpdateManager extends Manager {\n  /**\n   * Create a new UpdatePlugin.\n   * @param {TDLib.Rooms.Room} room - The room in which the layer manager operates.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the plugin manager.\n   */\n  constructor(room, pluginManager) {\n    super(room, pluginManager);\n  }\n\n  /**\n   * Boot the plugin.\n   * @since 1.0.0\n   */\n  boot() {\n    super.boot();\n    const events = this.systems.events;\n\n    // eslint-disable-next-line no-undef\n    this.gameObjects = new Phaser.Structs.Set();\n\n    events.on('update', this._sceneUpdate, this);\n    events.on('shutdown', this._sceneShutdown, this);\n    events.once('destroy', this._sceneDestroy, this);\n  }\n\n  /**\n   * Update every game object.\n   * @param {*} time\n   * @param {*} delta\n   * @private\n   * @since 1.0.0\n   */\n  _sceneUpdate(time, delta) {\n    this.gameObjects.iterateLocal('update', time, delta);\n  }\n\n  /**\n   * Called at the shutdown of the scene.\n   * @private\n   * @since 1.0.0\n   */\n  _sceneShutdown() {\n    this.gameObjects.clear();\n  }\n\n  /**\n   * Called when the scene is destroyed.\n   * @private\n   * @since 1.0.0\n   */\n  _sceneDestroy() {\n    const events = this.systems.events;\n\n    events.off('update', this._scenePostUpdate, this);\n    events.off('shutdown', this._sceneShutdown, this);\n    events.off('destroy', this._sceneDestroy, this);\n\n    this.gameObjects = null;\n    this.scene = null;\n    this.systems = null;\n  }\n\n  /**\n   * Add an object to the global update loop of the game.\n   * @param {TDLib.Sprites.TDLSprite} obj - The object to add to the update loop.\n   * @since 1.0.0\n   */\n  add(obj) {\n    obj.once('destroy', this.remove, this);\n    this.gameObjects.set(obj);\n  }\n\n  /**\n   * Add multiple objects to the global update loop of the game.\n   * @param {TDLib.Sprites.TDLSprite[]} obj - The objects to add to the update loop.\n   * @since 1.0.0\n   */\n  addMultiple(objs) {\n    objs.forEach(this.add, this);\n  }\n\n  /**\n   * Remove an object from the global update loop of the game.\n   * @param {TDLib.Sprites.TDLSprite} obj - The object to remove from the update loop.\n   * @since 1.0.0\n   */\n  remove(obj) {\n    obj.off('destroy', this.remove, this);\n    this.gameObjects.delete(obj);\n  }\n}\n","import Settings from '../boot/Settings';\nimport Utils from './Utils';\nimport Phaser from 'phaser';\n\n/**\n * The rooms namespace.\n * @namespace TDLib.Rooms\n * @since 1.0.0\n */\n\n/**\n * Class representing a TDLRoom.\n * @extends Phaser.Scene\n * @memberof TDLib.Rooms\n * @since 1.0.0\n */\nexport default class Room extends Phaser.Scene {\n  /**\n   * Create a new TDLRoom.\n   * @param {string} sceneKey - The unique key to identify the room.\n   * @param {Object} rawAssets - The raw object of assets needed by the room. (Ripensarlo ?)\n   */\n  constructor(sceneKey, rawAssets) {\n    super(sceneKey);\n\n    /**\n       * This object contains an array with all the assets needed by the room.\n       * @type {Object}\n       * @since 1.0.0\n       */\n    this.assets = { raw: rawAssets, array: [] };\n\n    /**\n       * The average contribute of light sources to the room.\n       * @type {number}\n       * @since 1.0.0\n       */\n    this.averageLightsContribute;\n\n    /**\n       * The Settings cursor manager.\n       * @type {TDLib.Plugins.SettingsPlugins.CursorManager}\n       * @since 1.0.0\n       */\n    this.cursors;\n\n    /**\n       * The layer manager of the room.\n       * @type {TDLib.Plugins.RoomPlugins.LayerManager}\n       * @since 1.0.0\n       */\n    this.layers;\n\n    /**\n       * The tilemap of the room.\n       * @type {Phaser.Tilemaps.Tilemap}\n       * @since 1.0.0\n       */\n    this.map;\n\n    /**\n       * The name of the room.\n       * @type {string}\n       * @since 1.0.0\n       */\n    this.name = this.constructor.name;\n\n    /**\n       * The instance of the TDLCharacter designated as player for the room.\n       * @type {TDLib.Sprites.Characters.TDLCharacter}\n       * @since 1.0.0\n       */\n    this.player;\n\n    /**\n       * The Settings room manager.\n       * @type {TDLib.Plugins.SettingsPlugins.RoomManager}\n       * @since 1.0.0\n       */\n    this.rooms;\n  }\n\n  /**\n   * The preload function is executed once and load all the assets needed by the room.\n   * @since 1.0.0\n   */\n  preload() {\n    this._scrapeAssets();\n    this.assets.array.forEach(obj => {\n      if ('nPath' in obj) {\n        this.load[obj.type](obj.key, [obj.path, obj.nPath]);\n      } else if ('bPath' in obj) {\n        this.load[obj.type](obj.key, obj.path);\n        this.load[obj.type](obj.key + '_b', obj.bPath);\n      } else {\n        this.load[obj.type](obj.key, obj.path);\n      }\n    });\n\n    // Loading Border Camera Masks\n    this.load.image('top-border-mask-camera', 'assets/Masks/topMaskCamera.png');\n    this.load.image('bottom-border-mask-camera', 'assets/Masks/bottomMaskCamera.png');\n    this.load.image('left-border-mask-camera', 'assets/Masks/leftMaskCamera.png');\n    this.load.image('right-border-mask-camera', 'assets/Masks/rightMaskCamera.png');\n  }\n\n  /**\n   * Scrape the object of raw assets.\n   * @private\n   * @since 1.0.0\n   */\n  _scrapeAssets() {\n    for (let type in this.assets.raw) {\n      Utils.scrapeComplexObjKey(\n        this.assets.raw[type],\n        { type: type },\n        'path',\n        (obj, params) => {\n          obj['type'] = params.type;\n          obj['key'] = Utils.findFileNameFromPath(obj.path);\n          this.assets.array.push(obj);\n        }\n      );\n    }\n  }\n\n  /**\n   * The create function is executed once, when the room is initialized.\n   * @param {TDLib.Sprites.Characters.TDLCharacter} player - The instance of the player for the room.\n   * @since 1.0.0\n   */\n  create(player) {\n    this.player = player.setName('player');\n    this.lights.enable(); // Boot Phaser's LightManager\n    // this.scene.bringToTop(CursorManager.CURSOR_SCENE_KEY); // Add the cursor to the Room\n    this.scene.bringToTop('CursorScene');\n\n    this._setCameraViewport();\n    this._createRoom();\n    this._createSprites();\n    this._applyBorderMasks();\n    this.layers.setLayersDepth();\n\n    // Camera bounds, anche il wallsLayer\n    this.cameras.main.setBounds(0, 0, this.layers.wallsLayer.width, this.layers.wallsLayer.height);\n    this.cameras.main.startFollow(this.player);\n    this.cameras.main.setRoundPixels(true);\n    // Physics Bounds, sarà solo lo spazio di gioco (togliamo il wall layer tutto attorno!!)\n    this.physics.world.setBounds(\n      Settings.TILE_SIZE, Settings.TILE_SIZE, this.layers.wallsLayer.width - 2 * Settings.TILE_SIZE,\n      this.layers.wallsLayer.height - 2 * Settings.TILE_SIZE\n    );\n  }\n\n  /**\n   * Set the correct camera viewport.\n   * @private\n   * @since 1.0.0\n   */\n  _setCameraViewport() {\n    if (Settings.DEVICE === 'MOBILE') {\n      this.cameras.main.setPosition(\n        (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_WIDTH_IN_TILES_MOBILE) * Settings.TILE_SIZE,\n        (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE) * Settings.TILE_SIZE\n      );\n      this.cameras.main.setSize(\n        // eslint-disable-next-line max-len\n        Settings.SCREEN_PROPS.calculatedWidth - 2 * (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_WIDTH_IN_TILES_MOBILE) * Settings.TILE_SIZE,\n        Settings.ROOM_HEIGHT_IN_TILE * Settings.TILE_SIZE\n      );\n    } else {\n      this.cameras.main.setPosition(\n        Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE,\n        Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE\n      );\n      this.cameras.main.setSize(\n        Settings.SCREEN_PROPS.calculatedWidth - 2 * Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE,\n        Settings.ROOM_HEIGHT_IN_TILE * Settings.TILE_SIZE\n      );\n    }\n  }\n\n  /**\n   * Create room tilemap and layers.\n   * @private\n   * @since 1.0.0\n   */\n  _createRoom() {\n    this.map = this.make.tilemap({\n      key: Utils.findFileNameFromPath(this.assets.raw.tilemapTiledJSON.path),\n      tileWidth: Settings.TILE_SIZE,\n      tileHeight: Settings.TILE_SIZE\n    });\n\n    this.layers.backgroundLayer = this.map.createDynamicLayer(\n      'backgroundLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.background.path)),\n      0, 0\n    ).setPipeline('Light2D');\n    this.layers.wallsLayer = this.map.createDynamicLayer(\n      'wallsLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.walls.path)),\n      0, 0\n    );\n    this.layers.wallsMaskLayer = this.map.createDynamicLayer(\n      'wallsMaskLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.walls.bPath)),\n      0, 0\n    );\n  }\n\n  /**\n   * Create all the objects present in Tiled JSON map.\n   * @private\n   * @since 1.0.0\n   */\n  _createSprites() {\n    let _this = this;\n\n    this.map.objects.forEach(layer => {\n      layer.objects.forEach(element => {\n        _this;\n        // eslint-disable-next-line\n        this[element.name] = new Settings.GAME_SPRITES[element.type].default(_this, element.x + element.width / 2, element.y - element.height / 2);\n        this[element.name].setName(element.name);\n      });\n    });\n  }\n\n  /**\n   * Apply the four border masks to the camera.\n   * @private\n   * @since 1.0.0\n   */\n  _applyBorderMasks() {\n    this.layers.borderMasksLayer.create(\n      0, 0,\n      'top-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(\n      0, 0,\n      'left-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(\n      this.cameras.main.width - Settings.TILE_SIZE, 0,\n      'right-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(\n      0, this.cameras.main.height - Settings.TILE_SIZE,\n      'bottom-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n  }\n\n  /**\n   * The update function is executed at every cycle of the game loop.\n   * @since 1.0.0\n   */\n  update() {\n    this._updateMasksByLightDiffusion();\n\n    // Updates all Actions in  every ActionComponent (if present)\n    this.children.list.forEach(element => {\n      if ('actions' in element) {\n        element.actions._update();\n      }\n    });\n  }\n\n  /**\n   * Update the border masks alpha according to the average diffused light in the room.\n   * @private\n   * @since 1.0.0\n   */\n  _updateMasksByLightDiffusion() {\n    this.averageLightsContribute = this.lightSources.calculateAverageLightsContribute();\n    this.layers.wallsMaskLayer.setAlpha(1 - this.averageLightsContribute);\n  }\n}\n\n","const Utils = {\n  scrapeComplexObjKey: (obj, params, searchKey, callback) => {\n    if (Array.isArray(obj)) {\n      for (let i = 0; i < obj.length; i++) {\n        Utils.scrapeComplexObjKey(obj[i], params, searchKey, callback);\n      }\n    } else if (obj !== null && typeof obj === 'object') {\n      if (searchKey in obj) {\n        callback(obj, params);\n      } else {\n        for (let prop in obj) {\n          Utils.scrapeComplexObjKey(obj[prop], params, searchKey, callback);\n        }\n      }\n    }\n  },\n  findFileNameFromPath: (path) => {\n    let nameFirstCharachterPosition = path.lastIndexOf('/') + 1;\n\n    let nameLastCharachterPosition = path.lastIndexOf('.');\n\n    if (nameFirstCharachterPosition === -1) nameFirstCharachterPosition = 0;\n    if (nameLastCharachterPosition === -1) return -1;\n    let filename = path.slice(nameFirstCharachterPosition, nameLastCharachterPosition);\n\n    return filename;\n  }\n};\n\nmodule.exports = Utils;\n","const Rooms = {\n  Room: require('./Room')\n};\n\nmodule.exports = Rooms;\n","/* eslint-disable max-len */\nimport Behaviours from '../sprites/behaviours';\nimport BehaviourComponent from '../components/BehaviourComponent';\nimport Phaser from 'phaser';\n\n/**\n * The Darkest Lib.\n * @namespace TDLib\n * @since 1.0.0\n */\n\n/**\n * The actions namespace.\n * @namespace TDLib.Sprites\n * @since 1.0.0\n */\n\n/**\n * Class representing a TDLSprite.\n * @extends Phaser.Physics.Arcade.Sprite\n * @memberof TDLib.Sprites\n * @since 1.0.0\n */\nexport default class Sprite extends Phaser.Physics.Arcade.Sprite {\n  /**\n   * Create a TDLSprite.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [layer=null] - The key of the layer which will contain the sprite.\n   * @param {boolean} [hasBody=true] - Specify if the sprite has physics.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   * @param {boolean} [precisePosition=false] - Specify if to examine or interact with the sprite it's required to be precisely at the examineOrInteractPoint. (Probably not needed)\n   */\n  constructor(\n    room,\n    x, y,\n    texture,\n    layer = null,\n    hasBody = true,\n    behaviourType = Behaviours.INERT,\n    pixelPerfect = null,\n    observeText = Behaviours.DEFAULT_OBSERVE_TEXT,\n    examineOrInteractText = Behaviours.DEFAULT_EXAMINE_OR_INTERACT_TEXT,\n    blockExamineText = null,\n    noLightObserveText = Behaviours.DEFAULT_NO_LIGHT_OBSERVE_TEXT,\n    noLightExamineOrInteractText = Behaviours.DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT,\n    examineOrInteractOffsetX = 0,\n    examineOrInteractThresholdRadius = 0,\n    minLightLevelToExamineOrInteract = Behaviours.DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT,\n    minLightLevelToObserve = Behaviours.DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE\n\n  ) {\n    super(room, x, y, texture);\n\n    /**\n     * The room where the sprite is created.\n     * @type {TDLib.Rooms.TDLRoom}\n     * @since 1.0.0\n     */\n    this.room = room;\n\n    /**\n     * The name of the sprite, to map it in the room. Usually it's obtained by Tiled.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.name;\n\n    /**\n     * The unique key of the sprite, composed by the sprite type and a 4 digits random integer number.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.key = this.constructor.name + (Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000);\n\n    /**\n     * The type of the sprite.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.type = this.constructor.name;\n\n    /**\n     * The sprite behaviour component instance.\n     * @type {TDLib.Components.SpriteBehaviourComponent}\n     * @since 1.0.0\n     */\n    this.behaviours = new BehaviourComponent(this, behaviourType, pixelPerfect);\n\n    /**\n     * The text which appears when observing the sprite.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.observeText = observeText;\n\n    /**\n * The text which appears when examine or interact with the sprite.\n     * @type {string}\n     * @since 1.0.0\n */\n    this.examineOrInteractText = examineOrInteractText;\n\n    /**\n     * If not null it's the blocking text which appears the first time the sprite is examined.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.blockExamineText = blockExamineText;\n\n    /**\n     * The text which appears when observing the sprite when the diffused light is not sufficient.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.noLightObserveText = noLightObserveText;\n\n    /**\n * The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.noLightExamineOrInteractText = noLightExamineOrInteractText;\n\n    /**\n     * The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n     */\n    this.examineOrInteractOffsetX = examineOrInteractOffsetX;\n\n    /**\n     * The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n         */\n    this.examineOrInteractThresholdRadius = examineOrInteractThresholdRadius;\n\n    /**\n     * The minimum value of diffused light to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n         */\n    this.minLightLevelToExamineOrInteract = minLightLevelToExamineOrInteract;\n\n    /**\n * The minimum value of diffused light to observe the sprite.\n     * @type {number}\n     * @since 1.0.0\n     */\n    this.minLightLevelToObserve = minLightLevelToObserve;\n\n    this.room.add.existing(this);\n    this.room.updates.add(this);\n    if (hasBody) {\n      this.room.physics.add.existing(this);\n      this.setCollideWorldBounds(true);\n      this.setGravityY(10000);\n    }\n\n    if (layer != null) {\n      if (layer in this.room.layers) {\n        this.room.layers[layer].add(this);\n        this.room.layers.setLayersDepth();\n      } else console.warn('ALERT: layer not found for object', this);\n    }\n\n    this.create();\n  }\n\n  /**\n   * The create function is executed once, immediately after the initialization of the sprite.\n   * @since 1.0.0\n   */\n  create() {\n    console.log('Created:', this.key, '- Type:', this.type, '- Behaviour:', this.behaviours.type);\n    this.setPipeline('Light2D');\n  }\n\n  /**\n   * The update is executed at every cycle of the game loop.\n   * @since 1.0.0\n   */\n  update() {\n\n  }\n\n  /**\n   * Set the name property of a sprite.\n   * @param {string} value - The name which is used to map a sprite in the room.\n   * @return {TDLib.Sprites.TDLSprite}\n   * @since 1.0.0\n   */\n  setName(value) {\n    this.name = value;\n    return this;\n  }\n\n  // Poichè è stata aggiunta la pixel perfect collision, valutare l'utilità di questa funzione!\n  setHitAreaSize(width = this.width, height = this.height, offsetX = 0, offsetY = 0) {\n    this.input.hitArea.setSize(width, height);\n    this.input.hitArea.setPosition(((this.width - width) / 2) + offsetX, ((this.height - height) / 2) + offsetY);\n  }\n}\n","/* eslint-disable max-len */\n/**\n * Class representing a TDLAction.\n * @memberof TDLib.Components.Actions\n * @since 1.0.0\n */\nexport default class Action {\n  /**\n   * Start a new TDLAction.\n   * @param {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @param {TDLSprite} actor - The actor who performs the action.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   */\n  constructor(invoker, actor, config = {}) {\n    /**\n     * The invoker of the action.\n     * @type {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction}\n     * @since 1.0.0\n     */\n    this.invoker = invoker;\n\n    /**\n     * The name of the action.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.name = this.constructor.name;\n\n    /**\n     * The actor who performs the action.\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.actor = actor;\n\n    /**\n     * The target of the action.\n     * @type {Object|TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.target = config.target;\n\n    /**\n     * The config object for the action.\n     * @type {Object}\n     * @since 1.0.0\n     */\n    this.config = config;\n\n    /**\n     * The queue of actions.\n     * @type {Array}\n     * @private\n     * @since 1.0.0\n     */\n    this._queue = [];\n\n    /**\n     * Tells if the action has been paused.\n     * @type {boolean}\n     * @since 1.0.0\n     */\n    this.isPaused = false;\n  }\n\n  /**\n   * Add one or more new actions to the queue.\n   * @param {TDLib.Components.Actions.TDLAction|TDLib.Components.Actions.TDLAction[]|TDLib.Components.Actions.TDLAction.BaseAction|TDLib.Components.Actions.TDLAction.BaseAction[]} actions - The new actions to add.\n   * @since 1.0.0\n   */\n  addActions(actions) {\n    if (Array.isArray(actions)) {\n      actions.forEach(action => {\n        this._queue.push(action);\n      });\n    } else this._queue.push(actions);\n  }\n\n  /**\n   * The blank action to create new composed and complex actions.\n   * @typedef {TDLib.Components.Actions.TDLAction.BaseAction}\n   *\n   * @property {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @property {Function} startCallback - The callback to execute at the beginning of the action.\n   * @property {Function} [finishCallback] - The callback to execute at the end of the action.\n   * @property {Function} [updateCallback]  - The callback to execute at every update loop.\n   * @property {Function} [resumeCallback=startCallback] - The callback to execute when the action is paused.\n   * @property {Function} [pauseCallback=finishCallback]  - The callback to execute when the action is resumed.\n   * @since 1.0.0\n   */\n  static get BaseAction() {\n    return class BaseAction {\n      constructor(invoker, startCallback, finishCallback = () => { }, updateCallback = () => { }, resumeCallback = startCallback, pauseCallback = finishCallback) {\n        this.invoker = invoker;\n\n        this.startCallback = startCallback;\n        this.finishCallback = finishCallback;\n        this.updateCallback = updateCallback;\n        this.resumeCallback = resumeCallback;\n        this.pauseCallback = pauseCallback;\n\n        this.isPaused = false;\n      }\n\n      _start() {\n        this.startCallback();\n      }\n\n      finish() {\n        this.finishCallback();\n        this.invoker._remove();\n      }\n\n      _abort() {\n        this.finishCallback();\n      }\n\n      _resume() {\n        this.isPaused = false;\n        this.resumeCallback();\n      }\n\n      _pause() {\n        this.pauseCallback();\n        this.isPaused = true;\n      }\n\n      _update() {\n        this.updateCallback();\n      }\n    };\n  }\n\n  /**\n   * Abort an uncompleted action.\n   * @private\n   * @since 1.0.0\n   */\n  _abort() {\n    if (this._queue.length > 0) this._queue[0]._abort();\n  }\n\n  /**\n   * Start an action.\n   * @private\n   * @since 1.0.0\n   */\n  _start() {\n    if (this._queue.length > 0) this._queue[0]._start();\n  }\n\n  /**\n   * Finish a completed action.\n   * @private\n   * @since 1.0.0\n   */\n  finish() {\n    if (this._queue.length > 0) this._queue[0].finish();\n  }\n\n  /**\n   * Remove a completed action from the queue.\n   * @private\n   * @since 1.0.0\n   */\n  _remove() {\n    if (this._queue.length > 0) this._queue.shift();\n\n    if (this._queue.length <= 0) this.invoker._remove();\n    else this._queue[0]._start();\n  }\n\n  /**\n   * Pause an action.\n   * @private\n   * @since 1.0.0\n   */\n  _pause() {\n    if (this._queue.length > 0) {\n      this._queue[0]._pause();\n      this.isPaused = true;\n    }\n  }\n\n  /**\n   * Resume a paused action.\n   * @private\n   * @since 1.0.0\n   */\n  _resume() {\n    if (this._queue.length > 0) {\n      this.isPaused = false;\n      this._queue[0]._resume();\n    }\n  }\n\n  /**\n   * Update the currently performed action.\n   * @private\n   * @since 1.0.0\n   */\n  _update() {\n    if (this._queue.length > 0) this._queue[0]._update();\n  }\n}\n","import Action from '../Action';\nimport WalkTo from '../walk-to/WalkTo';\n\nexport default class Examine extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new WalkTo(this, this.actor, this.config),\n        this.target.behaviours.examine.getAction(this)\n      ]\n    );\n  }\n}\n","import Action from '../Action';\nimport CONST from '../../../const';\nimport Settings from './Settings';\n\nexport default class FaceTo extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      new Action.BaseAction(\n        this,\n        () => {\n          if (Math.abs(this.actor.x - this.target.x) > Settings.MICRO_MOVEMENT_RADIUS) {\n            if (this.actor.facing === CONST.RIGHT) {\n              if (this.actor.x > this.target.x) {\n                this.actor.facing = CONST.LEFT;\n                this.actor.setFlipX(true);\n                // this.actor.anims.play('idleLeft');\n              }\n            } else if (this.actor.facing === CONST.LEFT) {\n              if (this.actor.x < this.target.x) {\n                this.actor.facing = CONST.RIGHT;\n                this.actor.setFlipX(false);\n                // this.actor.anims.play('idleRight');\n              }\n            }\n          }\n          this.finish();\n        }\n      )\n    );\n  }\n}\n","const Settings = {\n  MICRO_MOVEMENT_RADIUS: 6\n};\n\nmodule.exports = Settings;\n","import Action from '../Action';\nimport CONST from '../../../const';\n\n/**\n * Class representing the idle action.\n * @extends TDLib.Components.Actions.Action\n * @memberof TDLib.Components.Actions\n */\nexport default class Idle extends Action {\n  /**\n   * Start a new idle action.\n   * @param {Components.ActionComponent|Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @param {TDLSprite} actor - The actor who performs the action.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   */\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      new Action.BaseAction(\n        this,\n        () => {\n          this.actor.body.setVelocity(0);\n          switch (this.actor.facing) {\n\n            case CONST.LEFT: {\n              this.actor.anims.play('idle');\n              // this.actor.anims.play('idleLeft');\n            }\n              break;\n\n            case CONST.RIGHT: {\n              this.actor.anims.play('idle');\n              // this.actor.anims.play('idleRight');\n            }\n              break;\n\n            // possibili altri casi di facing (es girato di spalle o da davanti)\n          }\n        }\n      )\n    );\n  }\n}\n","const Actions = {\n  Action: require('./Action'),\n  Examine: require('./examine/Examine'),\n  FaceTo: require('./face-to/FaceTo'),\n  Idle: require('./idle/Idle'),\n  Interact: require('./interact/Interact'),\n  Observe: require('./observe/Observe'),\n  RunTo: require('./run-to/RunTo'),\n  WalkTo: require('./walk-to/WalkTo')\n};\n\nmodule.exports = Actions;\n","import Action from '../Action';\nimport WalkTo from '../walk-to/WalkTo';\n\nexport default class Interact extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new WalkTo(this, this.actor, this.config),\n        this.target.behaviours.interact.getAction(this)\n      ]\n    );\n  }\n}\n","import Action from '../Action';\nimport FaceTo from '../face-to/FaceTo';\n\nexport default class Observe extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new FaceTo(this, this.actor, this.config),\n        this.target.behaviours.observe.getAction(this)\n      ]\n    );\n  }\n}\n","import Action from '../Action';\nimport FaceTo from '../face-to/FaceTo';\nimport Settings from './Settings';\n\n// da cambiare e mettere tutta dentro l'AWalkTo e fare un Move to che distingua che azioni chiamare?\nexport default class RunTo extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new FaceTo(this, this.actor, this.config),\n        new Action.BaseAction(\n          this,\n          () => {\n            if (Math.abs(this.actor.x - this.target.x) > Settings.MICRO_MOVEMENT_RADIUS) {\n              if (this.actor.x < this.target.x) {\n                this.actor.anims.play('run');\n                // this.actor.anims.play('runRight');\n                this.actor.body.setVelocity(Settings.RUN_VELOCITY);\n              } else if (this.actor.x > this.target.x) {\n                this.actor.anims.play('run');\n                // this.actor.anims.play('runLeft');\n                this.actor.body.setVelocity(-Settings.RUN_VELOCITY);\n              }\n              console.log('start to run to ', config.target.x);\n            } else {\n              this.finish();\n            }\n          },\n          () => {\n            this.actor.body.setVelocity(0);\n          },\n          () => {\n            if ((this.actor.x - this.target.x) * this.actor.body.velocity.x > 0) this.finish();\n          }\n        )\n      ]\n    );\n  }\n}\n","const Settings = {\n  RUN_VELOCITY: 240,\n  MICRO_MOVEMENT_RADIUS: 20\n};\n\nmodule.exports = Settings;\n","const Settings = {\n  WALK_VELOCITY: 100,\n  MICRO_MOVEMENT_RADIUS: 20\n};\n\nmodule.exports = Settings;\n","import Action from '../Action';\nimport FaceTo from '../face-to/FaceTo';\nimport Settings from './Settings';\n\nexport default class WalkTo extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new FaceTo(this, this.actor, this.config),\n        new Action.BaseAction(\n          this,\n          () => {\n            if (Math.abs(this.actor.x - this.target.x) > Settings.MICRO_MOVEMENT_RADIUS) {\n              if (this.actor.x < this.target.x) {\n                this.actor.anims.play('walk');\n                // this.actor.anims.play('walkRight');\n                this.actor.body.setVelocity(Settings.WALK_VELOCITY);\n              } else if (this.actor.x > this.target.x) {\n                this.actor.anims.play('walk');\n                // this.actor.anims.play('walkLeft');\n                this.actor.body.setVelocity(-Settings.WALK_VELOCITY);\n              }\n            } else {\n              this.finish();\n            }\n          },\n          () => {\n            this.actor.body.setVelocity(0);\n          },\n          () => {\n            if ((this.actor.x - this.target.x) * this.actor.body.velocity.x > 0) this.finish();\n          }\n        )\n      ]\n    );\n  }\n}\n","import Action from '../actions/Action';\n\n/**\n * Class representing the behaviour of a sprite.\n * @memberof TDLib.Components.SpriteBehaviours\n * @since 1.0.0\n */\nexport default class Behaviour {\n  /**\n   * Create a SpriteBehaviour.\n   * @param {TDLib.Components.SpriteBehaviourComponent} component - The component which has invoked the behaviour.\n   */\n  constructor(component) {\n    /**\n     * The component which has invoked the behaviour.\n     * @type {TDLib.Components.SpriteBehaviourComponent}\n     * @since 1.0.0\n     */\n    this.component = component;\n\n    /**\n     * The global cursor manager.\n     * @type {TDLib.Plugins.GlobalPlugins.CursorManager}\n     * @since 1.0.0\n     */\n    this.cursors = this.component.gameObject.room.cursors;\n\n    /**\n     * The sprite which has invoked the behaviour.\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.gameObject = this.component.gameObject;\n\n    /**\n     * The room where the gameObject lives.\n     * @type {TDLib.Rooms.TDLRoom}\n     * @since 1.0.0\n     */\n    this.room = this.component.gameObject.room;\n\n    this.add();\n  }\n\n  /**\n   * Set the gameObject as interactive.\n   * @since 1.0.0\n   */\n  add() {\n    if (this.component.pixelPerfect === null) this.component.gameObject.setInteractive();\n    else {\n      this.component.gameObject.setInteractive(\n        {\n          pixelPerfect: true,\n          alphaTolerance: this.component.pixelPerfect.alphaTolerance,\n          draggable: false\n        }\n      );\n    }\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Action.BaseAction(\n      invoker,\n      () => {\n        console.log('Sono una generica action dei behaviour');\n        invoker.finish();\n      }\n    );\n  }\n\n  checkLight(value) {\n    if (this.room.lightSources.calculateLightsContribuitePoint(this.gameObject) >= value) return true;\n    return false;\n  }\n}\n","const CONST = {\n  EXAMINABLE: 'EXAMINABLE',\n  INERT: 'INERT',\n  INTERACTIVE: 'INTERACTIVE',\n  TALKABLE: 'TALKABLE',\n  INVENTORY: 'INVENTORY',\n\n  DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE: 0.05,\n  DEFAULT_OBSERVE_TEXT: 'Observe default text',\n  DEFAULT_NO_LIGHT_OBSERVE_TEXT: 'NoLightObserve default text',\n  DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT: 0.04,\n  DEFAULT_EXAMINE_OR_INTERACT_TEXT: 'ExamineOrInteract default text',\n  DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT: 'NoLightExamineOrInteract default text'\n};\n\nmodule.exports = CONST;\n","import Behaviour from '../Behaviour';\nimport Action from '../../actions/Action';\n\nexport default class Examinable extends Behaviour {\n  constructor(component) {\n    super(component);\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Action.BaseAction(\n      invoker,\n      () => {\n        // Fare i controlli su quanta luce c'è nella stanza!\n        if (this.checkLight(this.gameObject.minLightLevelToExamineOrInteract)) {\n          console.log(this.gameObject.examineOrInteractText);\n        } else console.log(this.gameObject.noLightExamineOrInteractText);\n        invoker.finish();\n      }\n    );\n  }\n}\n","import CONST from './const';\n\nvar Behaviours = {\n  Behaviour: require('./Behaviour'),\n  Examinable: require('./examinable/Examinable'),\n  Interactive: require('./interactive/Interactive'),\n  Observable: require('./observable/Observable'),\n  Talkable: require('./talkable/Talkable'),\n  Inventory: require('./inventory/Inventory')\n};\n\n// eslint-disable-next-line no-undef\nBehaviours = Phaser.Utils.Objects.Extend(false, Behaviours, CONST);\nmodule.exports = Behaviours;\n","import Behaviour from '../Behaviour';\nimport Action from '../../actions/Action';\n\nexport default class Interactive extends Behaviour {\n  constructor(component) {\n    super(component);\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Action.BaseAction(\n      invoker,\n      () => {\n        // Fare i controlli su quanta luce c'è nella stanza!\n        if (this.checkLight(this.gameObject.minLightLevelToExamineOrInteract)) {\n          console.log(this.gameObject.examineOrInteractText);\n        } else console.log(this.gameObject.noLightExamineOrInteractText);\n        invoker.finish();\n      }\n    );\n  }\n}\n","export default class Inventory {\n  constructor() {\n\n  }\n}\n","import Behaviour from '../Behaviour';\nimport Actions from '../../actions';\nimport Settings from './Settings';\n\nexport default class Observable extends Behaviour {\n  constructor(component) {\n    super(component);\n\n    this._timer;\n  }\n\n  add() {\n    super.add();\n\n    this.gameObject.on('pointerover', function (pointer) {\n      this.cursors.setCursor(this.gameObject);\n\n      this._timer = this.gameObject.room.time.addEvent({\n        delay: Settings.DEFAULT_MIN_TIME_TO_OBSERVE,\n        callback: () => {\n          if (this.gameObject !== this.room.player && !this.room.player.isBlocked) {\n            this.room.player.actions.add(Actions.Observe, { target: this.gameObject });\n          }\n        },\n        callbackScope: this\n      });\n    }.bind(this));\n\n    this.gameObject.on('pointerout', function (pointer) {\n      this._timer.remove(false);\n      this.cursors.setCursor();\n    }.bind(this));\n  }\n\n  /**\n   * Delete the timer which starts the AObserve action.\n   */\n  abort() {\n    this._timer.remove(false);\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Actions.Action.BaseAction(\n      invoker,\n      () => {\n        // Fare i controlli su quanta luce c'è nella stanza!\n        if (this.checkLight(this.gameObject.minLightLevelToObserve)) console.log(this.gameObject.observeText);\n        else console.log(this.gameObject.noLightObserveText);\n        invoker.finish();\n      }\n    );\n  }\n}\n","const Settings = {\n  DEFAULT_MIN_TIME_TO_OBSERVE: 1200\n};\n\nmodule.exports = Settings;\n","import Sprite from '../Sprite';\nimport Behaviour from '../behaviours';\nimport Components from '../../components';\nimport CONST from '../../const';\n\n/**\n * The characters namespace.\n * @namespace TDLib.Sprites.Characters\n * @since 1.0.0\n */\n\n/**\n * Class representing a Character.\n * @extends TDLib.Sprites.Sprite\n * @memberof TDLib.Sprites.Characters\n * @since 1.0.0\n */\nexport default class Character extends Sprite {\n  /**\n   * Create a new Character.\n   * @param {Room} room - The room where the character is created.\n   * @param {number} x - The x coordinate of the character.\n   * @param {number} y - The y coordinate of the character.\n   * @param {string} texture - The character's graphic.\n   * @param {string} layer - The character's layer.\n   */\n  constructor(room, x, y, texture, layer) {\n    super(...arguments, true, Behaviour.INTERACTIVE, { alphaTolerance: 1 });\n\n    /**\n     * The ActionComponent for this character.\n     * @type {Components.ActionComponent}\n     * @since 1.0.0\n     */\n    this.actions = new Components.ActionComponent(this);\n\n    /**\n     * The facing of the character.\n     * @type {TDLCharacter.FACING}\n     * @since 1.0.0\n     */\n    this.facing = CONST.RIGHT;\n  }\n\n  create() {\n    super.create();\n  }\n}\n","const Characters = {\n  NPCharacter: require('./npc-characters/NPCharacter'),\n  Player: require('./players/Player')\n};\n\nmodule.exports = Characters;\n","import Character from '../Character';\n\nexport default class NPCharacter extends Character {\n  constructor(room, x, y, texture, layer) {\n    super(room, x, y, texture, layer);\n  }\n}\n","import Character from '../Character';\n\nexport default class Player extends Character {\n  constructor(room, x, y, texture) {\n    super(room, x, y, texture, 'playerLayer');\n\n    this.isBlocked = false;\n  }\n\n  create() {\n    super.create();\n\n    this.room.input.on('pointerdown', function (pointer) {\n      this.room.cursors.pointerDown(this);\n    }, this);\n  }\n}\n","import EffectComponent from '../../components/EffectComponent';\n\nexport default class Effect {\n  constructor(invoker, config = {}) {\n\n    this.invoker = invoker;\n\n    this.config = config;\n\n    this.gameObject = invoker.gameObject;\n\n    this.name = this.constructor.name;\n  }\n\n  play(callback = () => { }) {\n    if (this.invoker instanceof EffectComponent) {\n      callback();\n    } else console.log('Effects can only be played by the EffectComponent');\n  }\n\n  stop(callback = () => { }) {\n    if (this.invoker instanceof EffectComponent) {\n      callback();\n    } else console.log('Effects can only be stopped by the EffectComponent');\n  }\n}\n","const Effects = {\n  Effect: require('./Effect'),\n  LightEffects: require('./light-effects')\n};\n\nmodule.exports = Effects;\n","import LightEffect from './LightEffect';\n\nexport default class HardFlickering extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.5);\n\n    if (!this.config.minTime) this.config.minTime = 10;\n    if (!this.config.maxTime) this.config.maxTime = 400;\n    if (!this.config.finalState) this.config.finalState = 'on';\n  }\n\n  play() {\n    super.play(() => {\n      let setTimer = () => {\n        this.gameObject.room.time.addEvent({\n          delay: Math.floor(Math.random() * (this.config.maxTime - this.config.minTime)) + this.config.minTime,\n          callback: () => {\n            if (!this.stopped) {\n              if (this.gameObject.initialConfig.graphicLight !== null) {\n                if (this.gameObject.graphicLight.intensity === 0) {\n                  this.gameObject.graphicLight.setIntensity(this.gameObject.initialConfig.graphicLight.intensity);\n                } else this.gameObject.graphicLight.setIntensity(0);\n              }\n\n              if (this.gameObject.initialConfig.diffusedLight !== null) {\n                if (this.gameObject.diffusedLight.intensity === 0) {\n                  this.gameObject.diffusedLight.setIntensity(this.gameObject.initialConfig.diffusedLight.intensity);\n                } else this.gameObject.diffusedLight.setIntensity(0);\n              }\n              setTimer();\n            }\n          },\n          callbackScope: this,\n          repeat: 0\n        });\n      };\n\n      setTimer();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      if (this.config.finalState === 'on') {\n        if (this.gameObject.initialConfig.graphicLight !== null) {\n          this.gameObject.graphicLight.setIntensity(this.gameObject.initialConfig.graphicLight.intensity);\n        }\n        if (this.gameObject.initialConfig.diffusedLight !== null) {\n          this.gameObject.diffusedLight.setIntensity(this.gameObject.initialConfig.diffusedLight.intensity);\n        }\n      } else if (this.config.finalState === 'off') {\n        this.gameObject.turnOff();\n      }\n    });\n  }\n}\n","import LightEffect from './LightEffect';\nimport HardFlickering from './HardFlickering';\nimport Trembling from './Trembling';\n\nexport default class HardFlickeringAndTrembling extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.5);\n\n    this.hardFlickering = new HardFlickering(this.invoker, this.config);\n    this.trembling = new Trembling(this.invoker, this.config);\n  }\n\n  play() {\n    super.play(() => {\n      this.hardFlickering.play();\n      this.trembling.play();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      this.hardFlickering.stop();\n      this.trembling.stop();\n    });\n  }\n}\n","import Effect from '../Effect';\n\nexport default class LightEffect extends Effect {\n  constructor(invoker, config, contributeFactor = 1) {\n    super(invoker, config);\n\n    this.contributeFactor = contributeFactor;\n  }\n\n  play(callback) {\n    super.play(() => {\n      this.stopped = false;\n      callback();\n    });\n  }\n\n  stop(callback) {\n    super.stop(() => {\n      this.stopped = true;\n      callback();\n    });\n  }\n}\n","/* eslint-disable max-len */\nimport LightEffect from './LightEffect';\n\nexport default class RadiusFlickering extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.9);\n\n    if (!this.config.minTime) this.config.minTime = 10;\n    if (!this.config.maxTime) this.config.maxTime = 100;\n    if (!this.config.minPercentageIntensity) this.config.minPercentageIntensity = 0.8;\n    if (!this.config.maxPercentageIntensity) this.config.maxPercentageIntensity = 1;\n    if (!this.config.minPercentageRadius) this.config.minPercentageRadius = 0.8;\n    if (!this.config.maxPercentageRadius) this.config.maxPercentageRadius = 1;\n    if (!this.config.backToInitialIntensity) this.config.backToInitialIntensity = true;\n    if (!this.config.backToInitialRadius) this.config.backToInitialRadius = true;\n  }\n\n  play() {\n    super.play(() => {\n      var setTimer = () => {\n        this.gameObject.room.time.addEvent({\n          delay: Math.floor(Math.random() * (this.config.maxTime - this.config.minTime)) + this.config.minTime,\n          callback: () => {\n            if (!this.stopped) {\n              let newIntensityPercentage = Math.floor((this.config.minPercentageIntensity + Math.random() * (this.config.maxPercentageIntensity - this.config.minPercentageIntensity)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity * newIntensityPercentage);\n              this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity * newIntensityPercentage);\n              let newRadiusPercentage = Math.floor((this.config.minPercentageRadius + Math.random() * (this.config.maxPercentageRadius - this.config.minPercentageRadius)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setRadius(this.gameObject.config.graphicLight.radius * newRadiusPercentage);\n\n              setTimer();\n            }\n\n          },\n          callbackScope: this,\n          repeat: 0\n        });\n      };\n\n      setTimer();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      if (this.config.backToInitialIntensity) {\n        this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity);\n        this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity);\n      } else {\n        this.gameObject.config.graphicLight.intensity = this.gameObject.graphicLight.intensity;\n        this.gameObject.config.diffusedLight.intensity = this.gameObject.diffusedLight.intensity;\n      }\n      if (this.config.backToInitialRadius) {\n        this.gameObject.graphicLight.setRadius(this.gameObject.config.graphicLight.radius);\n      } else {\n        this.gameObject.config.graphicLight.radius = this.gameObject.graphicLight.radius;\n      }\n    });\n  }\n}\n","/* eslint-disable max-len */\nimport LightEffect from './LightEffect';\n\nexport default class SoftFlickering extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.8);\n\n    if (!this.config.minTime) this.config.minTime = 10;\n    if (!this.config.maxTime) this.config.maxTime = 100;\n    if (!this.config.minPercentageIntensity) this.config.minPercentageIntensity = 0.8;\n    if (!this.config.maxPercentageIntensity) this.config.maxPercentageIntensity = 1;\n    if (!this.config.backToInitialIntensity) this.config.backToInitialIntensity = true;\n  }\n\n  play() {\n    super.play(() => {\n      let setTimer = () => {\n        this.gameObject.room.time.addEvent({\n          delay: Math.floor(Math.random() * (this.config.maxTime - this.config.minTime)) + this.config.minTime,\n          callback: () => {\n            if (!this.stopped) {\n              let newIntensityPercentage = Math.floor((this.config.minPercentageIntensity + Math.random() * (this.config.maxPercentageIntensity - this.config.minPercentageIntensity)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity * newIntensityPercentage);\n              this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity * newIntensityPercentage);\n              setTimer();\n            }\n          },\n          callbackScope: this,\n          repeat: 0\n        });\n      };\n\n      setTimer();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      if (this.config.backToInitialIntensity) {\n        this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity);\n        this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity);\n      } else {\n        this.gameObject.config.graphicLight.intensity = this.gameObject.graphicLight.intensity;\n        this.gameObject.config.diffusedLight.intensity = this.gameObject.diffusedLight.intensity;\n      }\n    });\n  }\n}\n","import LightEffect from './LightEffect';\nimport SoftFlickering from './SoftFlickering';\nimport Trembling from './Trembling';\n\nexport default class SoftDefaultFlickeringAndtrembling extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.5);\n\n    this.softFlickering = new SoftFlickering(this.invoker, this.config);\n    this.trembling = new Trembling(this.invoker, this.config);\n  }\n\n  play() {\n    super.play(() => {\n      this.softFlickering.play();\n      this.trembling.play();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      this.softFlickering.stop();\n      this.trembling.stop();\n    });\n  }\n}\n","/* eslint-disable max-len */\nimport LightEffect from './LightEffect';\n\nexport default class Trembling extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.8);\n\n    if (!this.config.minTime) this.config.minTime = 10;\n    if (!this.config.maxTime) this.config.maxTime = 100;\n    if (!this.config.minPercentageIntensity) this.config.minPercentageIntensity = 0.8;\n    if (!this.config.maxPercentageIntensity) this.config.maxPercentageIntensity = 1;\n    if (!this.config.minPercentageRadius) this.config.minPercentageRadius = 0.8;\n    if (!this.config.maxPercentageRadius) this.config.maxPercentageRadius = 1;\n    if (!this.config.backToInitialIntensity) this.config.backToInitialIntensity = true;\n    if (!this.config.backToInitialRadius) this.config.backToInitialRadius = true;\n  }\n\n  play() {\n    super.play(() => {\n      let setTimer = () => {\n        this.gameObject.room.time.addEvent({\n          delay: Math.floor(Math.random() * (this.config.maxTime - this.config.minTime)) + this.config.minTime,\n          callback: () => {\n\n            if (!this.stopped) {\n              let newIntensityPercentage = Math.floor((this.config.minPercentageIntensity + Math.random() * (this.config.maxPercentageIntensity - this.config.minPercentageIntensity)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity * newIntensityPercentage);\n              this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity * newIntensityPercentage);\n              let newRadiusPercentage = Math.floor((this.config.minPercentageRadius + Math.random() * (this.config.maxPercentageRadius - this.config.minPercentageRadius)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setRadius(this.gameObject.config.graphicLight.radius * newRadiusPercentage);\n\n              setTimer();\n            }\n\n          },\n          callbackScope: this,\n          repeat: 0\n        });\n      };\n\n      setTimer();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      if (this.config.backToInitialIntensity) {\n        this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity);\n        this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity);\n      } else {\n        this.gameObject.config.graphicLight.intensity = this.gameObject.graphicLight.intensity;\n        this.gameObject.config.diffusedLight.intensity = this.gameObject.diffusedLight.intensity;\n      }\n      if (this.config.backToInitialRadius) {\n        this.gameObject.graphicLight.setRadius(this.gameObject.config.graphicLight.radius);\n      } else {\n        this.gameObject.config.graphicLight.radius = this.gameObject.graphicLight.radius;\n      }\n    });\n  }\n}\n","const LightEffects = {\n  HardFlickering: require('./HardFlickering'),\n  HardFlickeringAndTrembling: require('./HardFlickeringAndTrembling'),\n  LightEffect: require('./LightEffect'),\n  RadiusFlickering: require('./RadiusFlickering'),\n  SoftFlickering: require('./SoftFlickering'),\n  SoftFlickeringAndTrembling: require('./SoftFlickeringAndTrembling'),\n  Trembling: require('./Trembling')\n};\n\nmodule.exports = LightEffects;\n","const Sprites = {\n  Actions: require('./actions'),\n  Behaviours: require('./behaviours'),\n  Characters: require('./characters'),\n  Effects: require('./effects'),\n  InventoryItems: require('./inventory-items'),\n  WorldItems: require('./world-items'),\n  Sprite: require('./Sprite')\n};\n\nmodule.exports = Sprites;\n","import Sprite from '../Sprite';\n\n/**\n * The inventory items namespace.\n * @namespace TDLib.Sprites.InventoryItems\n * @since 1.0.0\n */\n\n/**\n * Class representing an InentoryItem.\n * @extends TDLib.Sprites.Sprite\n * @memberof TDLib.Sprites.InventoryItems\n * @since 1.0.0\n */\n\nexport default class InentoryItem extends Sprite {\n  /**\n   * Create a new InvetoryItem.\n   * @param {Room} room - The room where the item is created.\n   * @param {number} x - The x coordinate of the item.\n   * @param {number} y - The y coordinate of the item.\n   * @param {string} texture - The item's graphic.\n   * @param {string} layer - The item's layer.\n   */\n  constructor(room, x, y, texture, layer) {\n    super(...arguments, false);\n  }\n\n  create() {\n    super.create();\n    this.resetPipeline(); // InventoryItems are not part of the Light2D pipeline!\n  }\n}\n","const InventoryItems = {\n  InventoryItem: require('./InventoryItem')\n};\n\nmodule.exports = InventoryItems;\n","/* eslint-disable max-len */\nimport Sprite from '../Sprite';\n\n/**\n * The world items namespace.\n * @namespace TDLib.Sprites.WorldItems\n * @since 1.0.0\n */\n\n/**\n * Class representing a WorldItem.\n * @extends TDLib.Sprites.Sprite\n * @memberof TDLib.Sprites.WorldItems\n * @since 1.0.0\n */\nexport default class WorldItem extends Sprite {\n  /**\n   * Create a WorldObject.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [layer=null] - The key of the layer which will contain the sprite.\n   * @param {boolean} [hasBody=true] - Specify if the sprite has physics.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   */\n  constructor(room, x, y, texture, layer, hasBody, behaviourType, pixelPerfect, observeText, examineOrInteractText, blockExamineText, noLightObserveText, noLightExamineOrInteractText, examineOrInteractOffsetX, examineOrInteractThresholdRadius, minLightLevelToExamineOrInteract, minLightLevelToObserve) {\n    super(\n      room,\n      x, y,\n      texture,\n      layer,\n      hasBody,\n      behaviourType,\n      pixelPerfect,\n      observeText,\n      examineOrInteractText,\n      blockExamineText,\n      noLightObserveText,\n      noLightExamineOrInteractText,\n      examineOrInteractOffsetX,\n      examineOrInteractThresholdRadius,\n      minLightLevelToExamineOrInteract,\n      minLightLevelToObserve\n    );\n  }\n\n  create() {\n    super.create();\n  }\n}\n","const WorldItems = {\n  WorldItem: require('./WorldItem'),\n  LightSources: require('./light-sources'),\n  RoomFurnitures: require('./room-furnitures'),\n  WallFurnitures: require('./wall-furnitures')\n};\n\nmodule.exports = WorldItems;\n","/* eslint-disable max-len */\nimport WorldItem from '../WorldItem';\nimport Behaviours from '../../behaviours';\nimport EffectComponent from '../../../components/EffectComponent';\n\nexport default class LightSource extends WorldItem {\n  /**\n   * constructor of the class\n   * @param {Room} room - Room in which will be created the LightSource.\n   * @param {number} x - X position of the sprite.\n   * @param {number} y - Y position of the sprite.\n   * @param {string} texture - Name of the sprite for the LightSource.\n   * @param {string} layer - Name of the Layer in which will be put the LightSource.\n   * @param {Object} graphicLightConfig - Configuration of the graphic light of the LightSource.\n   * @param {number} graphicLightConfig.intensity - Intensity of the graphic light.\n   * @param {number} graphicLightConfig.radius - Radius of the graphic light.\n   * @param {Object} diffusedLightConfig - Configuration of the diffused light of the LightSource.\n   * @param {number} diffusedLightConfig.intensity - Intensity of the diffused light.\n   * @param {number} diffusedLightConfig.radius - Radius of the diffused light.\n   * @param {Object} offset - Offset of the graphic light respect the center of the sprite.\n   * @param {number} offset.x - X offset.\n   * @param {number} offset.y - Y offset.\n   * @param {boolean} [isOn=true] - Light created as switched on or off.\n   */\n  constructor(room, x, y, texture, layer, graphicLightConfig, diffusedLightConfig, offset, isOn = true) {\n    super(room, x, y, texture, layer, true, Behaviours.EXAMINABLE);\n\n    this.setGravityY(0);\n\n    this.initialConfig = {\n      graphicLight: graphicLightConfig,\n      diffusedLight: diffusedLightConfig,\n      offset: offset\n    };\n\n    this.config = this.initialConfig;\n\n    this.isOn = false;\n    if (isOn) {\n      this.turnOn();\n    }\n\n    // Register this LightSource instance to the Room's LightManager\n    this.room.lightSources.add(this);\n    this.effects = new EffectComponent(this);\n  }\n\n  /**\n   * Turn on the lights of the LightSource by creating new ones.\n   */\n  turnOn() {\n    if (!this.isOn) {\n      if (this.initialConfig.diffusedLight !== null) {\n        this.diffusedLight = this.room.lights.addLight(this.x + this.initialConfig.offset.x, this.y + this.initialConfig.offset.y, this.initialConfig.diffusedLight.radius).setIntensity(this.initialConfig.diffusedLight.intensity);\n        this.room.lightSources.diffusedLights.push(this.diffusedLight);\n      }\n\n      if (this.initialConfig.graphicLight !== null) {\n        this.graphicLight = this.room.lights.addLight(this.x + this.initialConfig.offset.x, this.y + this.initialConfig.offset.y, this.initialConfig.graphicLight.radius).setIntensity(this.initialConfig.graphicLight.intensity);\n        this.room.lightSources.graphicLights.push(this.graphicLight);\n      }\n\n      this.isOn = true;\n    }\n  }\n\n  /**\n     * Turn off the lights of the LightSource by deleting the existing ones.\n     * @param {boolean} [stopBehaviours=true] - If true, turning off the light stops all the behaviours.\n     */\n  turnOff(stopBehaviours = true) {\n\n    // if (stopBehaviours) this.lightBehaviour.stopAllBehaviours();\n    if (this.isOn) {\n      let diffusedLightindex = this.room.lightSources.diffusedLights.indexOf(this.diffusedLight);\n\n      if (diffusedLightindex > -1) {\n        this.room.lightSources.diffusedLights.splice(diffusedLightindex, 1);\n        this.room.lights.removeLight(this.diffusedLight);\n      }\n\n      let graphicLightindex = this.room.lightSources.graphicLights.indexOf(this.graphicLight);\n\n      if (graphicLightindex > -1) {\n        this.room.lightSources.graphicLights.splice(graphicLightindex, 1);\n        this.room.lights.removeLight(this.graphicLight);\n      }\n\n      this.isOn = false;\n    }\n  }\n\n  /**\n   * If the light source is on, turn it off and vice versa.\n   */\n  switch() {\n    if (this.isOn) this.turnOff();\n    else this.turnOn();\n  }\n}\n","const LightSources = {\n  LightSource: require('./LightSource')\n};\n\nmodule.exports = LightSources;\n","/* eslint-disable max-len */\nimport WorldItem from '../WorldItem';\n\n/**\n * The room furnitures namespace.\n * @namespace TDLib.Sprites.Objects.WorldObjects.RoomFurnitures\n * @since 1.0.0\n */\n\n/**\n * Class representing a RoomFurniture.\n * @extends TDLib.Sprites.Objects.WorldObjects.WorldObject\n * @memberof TDLib.Sprites.Objects.WorldObjects.RoomFurnitures\n * @since 1.0.0\n */\nexport default class RoomFurniture extends WorldItem {\n  /**\n   * Create a RoomFurniture.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   */\n  constructor(room, x, y, texture, behaviourType, pixelPerfect, observeText, examineOrInteractText, blockExamineText, noLightObserveText, noLightExamineOrInteractText, examineOrInteractOffsetX, examineOrInteractThresholdRadius, minLightLevelToExamineOrInteract, minLightLevelToObserve) {\n    super(\n      room,\n      x, y,\n      texture,\n      'roomFurnitureLayer',\n      true,\n      behaviourType,\n      pixelPerfect,\n      observeText,\n      examineOrInteractText,\n      blockExamineText,\n      noLightObserveText,\n      noLightExamineOrInteractText,\n      examineOrInteractOffsetX,\n      examineOrInteractThresholdRadius,\n      minLightLevelToExamineOrInteract,\n      minLightLevelToObserve\n    );\n  }\n}\n","const RoomFurnitures = {\n  RoomFurniture: require('./RoomFurniture')\n};\n\nmodule.exports = RoomFurnitures;\n","/* eslint-disable max-len */\nimport WorldItem from '../WorldItem';\n\n/**\n * The wall furnitures namespace.\n * @namespace TDLib.Sprites.Objects.WorldObjects.WallFurnitures\n * @since 1.0.0\n */\n\n/**\n * Class representing a WallFurniture.\n * @extends TDLib.Sprites.Objects.WorldObjects.WorldObject\n * @memberof TDLib.Sprites.Objects.WorldObjects.WallFurnitures\n * @since 1.0.0\n */\nexport default class WallFurniture extends WorldItem {\n  /**\n   * Create a WallFurniture.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   */\n  constructor(room, x, y, texture, behaviourType, pixelPerfect, observeText, examineOrInteractText, blockExamineText, noLightObserveText, noLightExamineOrInteractText, examineOrInteractOffsetX, examineOrInteractThresholdRadius, minLightLevelToExamineOrInteract, minLightLevelToObserve) {\n    super(\n      room,\n      x, y,\n      texture,\n      'wallFurnitureLayer',\n      true,\n      behaviourType,\n      pixelPerfect,\n      observeText,\n      examineOrInteractText,\n      blockExamineText,\n      noLightObserveText,\n      noLightExamineOrInteractText,\n      examineOrInteractOffsetX,\n      examineOrInteractThresholdRadius,\n      minLightLevelToExamineOrInteract,\n      minLightLevelToObserve\n    );\n\n    this.setGravityY(0);\n  }\n}\n","const WallFurnitures = {\n  WallFurniture: require('./WallFurniture')\n};\n\nmodule.exports = WallFurnitures;\n","/* eslint-disable max-len */\nimport Actions from '../../sprites/actions';\nimport Behaviours from '../../sprites/behaviours';\nimport Phaser from 'phaser';\n\n/**\n * Class representing the CursorSystem, able to select the correct graphic for the cursor and to handle pointer events.\n * @extends Phaser.Plugins.BasePlugin\n * @memberof TDLib.Plugins.GlobalPlugins\n * @since 1.0.0\n */\nexport default class CursorSystem extends Phaser.Plugins.BasePlugin {\n  /**\n   * Create a new CursorSystem.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the plugin manager.\n   */\n  constructor(pluginManager) {\n    super(pluginManager);\n\n    /**\n     * The scene containing the cursor.\n     * @type {CursorSystem.CURSOR_SCENE}\n     * @since 1.0.0\n     */\n    this.cursorScene;\n\n    /**\n     * The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n     * @type {Phaser.Scenes.SceneManager}\n     * @since 1.0.0\n     */\n    this.sceneManager;\n\n    /**\n     * Save the last sprite who called the function setCursor().\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.lastTarget;\n  }\n\n  /**\n   * It's a Phaser.Scene representing the scene containing the cursor which will be put on the rooms level.\n   * @typedef {TDLib.Plugins.GlobalPlugins.CursorSystem.CursorScene}\n   * @extends {Phaser.Scenes.Scene}\n   * @since 1.0.0\n   */\n  static get CursorScene() {\n    return class CursorScene extends Phaser.Scene {\n      constructor() {\n        super(CursorSystem.CURSOR_SCENE_KEY);\n\n        this.cursor;\n      }\n\n      preload() {\n        this.load.image(CursorSystem.EXAMINABLE_CURSOR, 'assets/Cursors/CursorExamine.png');\n        this.load.image(CursorSystem.HOLD_CURSOR, 'assets/Cursors/CursorHold.png');\n        this.load.image(CursorSystem.INTERACTIVE_CURSOR, 'assets/Cursors/CursorInteract.png');\n        this.load.image(CursorSystem.DEFAULT_CURSOR, 'assets/Cursors/CursorMove.png');\n        this.load.image(CursorSystem.TALKABLE_CURSOR, 'assets/Cursors/CursorTalk.png');\n        this.load.image(CursorSystem.CHOICE_CURSOR, 'assets/Cursors/CursorChoice.png');\n        this.load.image(CursorSystem.CHOICE_PRESSED_CURSOR, 'assets/Cursors/CursorChoicePressed.png');\n      }\n\n      create() {\n        this.input.setDefaultCursor('none');\n        this.cursor = this.add.image(0, 0, CursorSystem.DEFAULT_CURSOR).setOrigin(0.4, 0.33).setDepth(100000);\n      }\n\n      update() {\n        this.cursor.setPosition(this.input.activePointer.x, this.input.activePointer.y);\n      }\n    };\n  }\n\n  /**\n   * The key of the scene containing the cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get CURSOR_SCENE_KEY() {\n    return 'CursorScene';\n  }\n\n  /**\n   * The key of the inert cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get DEFAULT_CURSOR() {\n    return 'cursorMove';\n  }\n\n  /**\n   * The key of the examine cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get EXAMINABLE_CURSOR() {\n    return 'cursorExamine';\n  }\n\n  /**\n   * The key of the interact cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get INTERACTIVE_CURSOR() {\n    return 'cursorInteract';\n  }\n\n  /**\n   * The key of the hold cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get HOLD_CURSOR() {\n    return 'cursorHold';\n  }\n\n  /**\n   * The key of the talk cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get TALKABLE_CURSOR() {\n    return 'cursorTalk';\n  }\n\n  /**\n   * The key of the choice cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get CHOICE_CURSOR() {\n    return 'cursorChoice';\n  }\n\n  /**\n   * The key of the choice pressed cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get CHOICE_PRESSED_CURSOR() {\n    return 'cursorChoicePressed';\n  }\n\n  /**\n   * Configure the cursor manager.\n   * @param {Phaser.Scenes.SceneManager} sceneManager - The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n   * @since 1.0.0\n   */\n  configure(sceneManager) {\n    this.sceneManager = sceneManager;\n    this.cursorScene = this.sceneManager.add(CursorSystem.CURSOR_SCENE_KEY, CursorSystem.CursorScene, true);\n  }\n\n  /**\n   * Handle the pointer down event.\n   * @param {TDLib.Sprites.Characters.TDLCharacter} player - The current player.\n   * @since 1.0.0\n   */\n  pointerDown(player, pointer = null) {\n    if (!player.isBlocked) {\n      switch (this.cursorScene.cursor.texture.key) {\n        case CursorSystem.DEFAULT_CURSOR: {\n          if (typeof player.room.input.activePointer.camera !== 'undefined') player.actions.add(Actions.WalkTo, { target: { x: player.room.input.activePointer.worldX } });\n        }\n          break;\n\n        case CursorSystem.EXAMINABLE_CURSOR: {\n          this.lastTarget.behaviours.observe.abort();\n          player.actions.add(Actions.Examine, { target: this.lastTarget });\n        }\n          break;\n\n        case CursorSystem.INTERACTIVE_CURSOR: {\n          this.lastTarget.behaviours.observe.abort();\n          player.actions.add(Actions.Interact, { target: this.lastTarget });\n        }\n          break;\n\n        case CursorSystem.TALKABLE_CURSOR: {\n          player.actions.add(Actions.TalkTo, { target: this.lastTarget });\n        }\n          break;\n      }\n    }\n  }\n\n  /**\n   * Set the correct cursor for the target selected.\n   * @param {Object} target - The target of the pointer.sceneManager\n   * @param {TDLib.Components.ActionComponent} target.behaviours - The SpriteBehaviourComponent of the target.\n   * @param {string} [target.behaviours.type=TDLib.Sprites.Behaviours.INERT] - The type of the sprite behaviour for this target.\n   * @since 1.0.0\n   */\n  setCursor(target = { behaviours: { type: Behaviours.INERT }, room: {} }) {\n    if ('room' in target && target !== target.room.player) {\n      switch (target.behaviours.type) {\n        case Behaviours.INERT: {\n          this.cursorScene.cursor.setTexture(CursorSystem.DEFAULT_CURSOR).setOrigin(0.4, 0.33);\n        }\n          break;\n\n        case Behaviours.EXAMINABLE: {\n          this.cursorScene.cursor.setTexture(CursorSystem.EXAMINABLE_CURSOR).setOrigin(0.33, 0.29);\n        }\n          break;\n\n        case Behaviours.INTERACTIVE: {\n          this.cursorScene.cursor.setTexture(CursorSystem.INTERACTIVE_CURSOR).setOrigin(0.4, 0.33);\n        }\n          break;\n\n        case Behaviours.TALKABLE: {\n          this.cursorScene.cursor.setTexture(CursorSystem.TALKABLE_CURSOR);\n        }\n          break;\n      }\n\n      this.lastTarget = target;\n    }\n  }\n\n  /**\n   * Show the cursor.\n   * @since 1.0.0\n   */\n  showCursor() {\n    this.cursorScene.cursor.setVisible(true);\n  }\n\n  /**\n   * Hide the cursor.\n   * @since 1.0.0\n   */\n  hideCursor() {\n    this.cursorScene.cursor.setVisible(false);\n  }\n}\n","const Systems = {\n  CursorSystem: require('./cursors/CursorSystem'),\n  RoomSystem: require('./rooms/RoomSystem')\n};\n\nmodule.exports = Systems;\n","/* eslint-disable max-len */\nimport Phaser from 'phaser';\n\n/**\n * Class representing the manager of the rooms\n * @extends Phaser.Plugins.BasePlugin\n * @memberof TDLib.Plugins.GlobalPlugins\n */\nexport default class RoomSystem extends Phaser.Plugins.BasePlugin {\n  /**\n   * Create a new RoomSystem.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the plugin manager.\n   */\n  constructor(pluginManager) {\n    super(pluginManager);\n\n    /**\n     * The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n     * @type {Phaser.Scenes.SceneManager}\n     */\n    this.sceneManager = {};\n\n    this.currentRoom = null;\n  }\n\n  /**\n   * Add (and start) a new room to the RoomSystem.\n   * @param {TDLib.Rooms.Room} room - The class of the new room to add.\n   * @param {boolean} [autoStart=true] - Specify if the room has to start.\n   */\n  start(room, autoStart = true) {\n    if (room) {\n      console.log('Starting room:', room.name);\n      if (this.currentRoom) this.sceneManager.remove(this.currentRoom.name);\n      if (room.name in this.sceneManager.keys) {\n        this.sceneManager.start(room.name);\n      } else {\n        this.sceneManager.add(room.name, room, autoStart);\n\n      }\n      this.currentRoom = room;\n    }\n  }\n\n  /**\n   * Configure the RoomSystem.\n   * @param {Phaser.Scenes.SceneManager} sceneManager - The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n   */\n  configure(sceneManager) {\n    this.sceneManager = sceneManager;\n  }\n}\n","/* eslint-disable max-len */\nimport Settings from '../boot/Settings';\n\nconst getScreenProps = () => {\n  var returnValue = {};\n\n  // cz : ah = 1 : mh\n  if (Settings.DEVICE === 'MOBILE') {\n    returnValue.availHeight = window.innerHeight;\n    returnValue.availWidth = window.innerWidth;\n    returnValue.calculatedZoom = Math.floor(returnValue.availHeight / ((Settings.ROOM_HEIGHT_IN_TILE + Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE + Settings.ROOM_FRAME_IN_TILES_MOBILE * 2) * Settings.TILE_SIZE) * 100) / 100;\n  } else {\n    returnValue.availHeight = screen.height;\n    returnValue.availWidth = screen.width;\n    returnValue.calculatedZoom = Math.floor(returnValue.availHeight / ((Settings.ROOM_HEIGHT_IN_TILE + Settings.INVENTORY_HEIGHT_IN_TILES_DESKTOP + Settings.ROOM_FRAME_IN_TILES_DESKTOP * 2) * Settings.TILE_SIZE) * 100) / 100;\n  }\n\n  console.log('ZOOM: ' + returnValue.calculatedZoom);\n\n  // Sono le dimensioni riaggiustate rispetto allo zoom scelto\n  // ch : ah = 1 : cz\n  returnValue.calculatedHeight = Math.ceil(returnValue.availHeight / returnValue.calculatedZoom);\n  returnValue.calculatedWidth = Math.ceil(returnValue.availWidth / returnValue.calculatedZoom);\n\n  console.log('AVAIL-H: ' + returnValue.availHeight + '\\nCALC-H: ' + returnValue.calculatedHeight);\n  console.log('AVAIL-W: ' + returnValue.availWidth + '\\nCALC-W: ' + returnValue.calculatedWidth);\n\n  return returnValue;\n};\n\nmodule.exports = getScreenProps;\n","const Utils = {\n  getScreenProps: require('./Utils')\n};\n\nmodule.exports = Utils;\n","'use strict';\n\nmodule.exports = (object, predicate) => {\n\tconst result = {};\n\tconst isArray = Array.isArray(predicate);\n\n\tfor (const [key, value] of Object.entries(object)) {\n\t\tif (isArray ? predicate.includes(key) : predicate(key, value, object)) {\n\t\t\tresult[key] = value;\n\t\t}\n\t}\n\n\treturn result;\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1487__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(8908);\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();"],"sourceRoot":""}