{"version":3,"sources":["webpack://TDLib/webpack/universalModuleDefinition","webpack://TDLib/webpack/bootstrap","webpack://TDLib/./src/sprites/actions/Action.js","webpack://TDLib/external \"phaser\"","webpack://TDLib/./src/sprites/effects/light-effects/LightEffect.js","webpack://TDLib/./src/boot/Settings.js","webpack://TDLib/./src/sprites/behaviours/index.js","webpack://TDLib/./src/const.js","webpack://TDLib/./src/components/Component.js","webpack://TDLib/./src/sprites/actions/index.js","webpack://TDLib/./src/sprites/actions/face-to/FaceTo.js","webpack://TDLib/./src/sprites/behaviours/Behaviour.js","webpack://TDLib/./src/sprites/world-items/WorldItem.js","webpack://TDLib/./src/sprites/Sprite.js","webpack://TDLib/./src/managers/Manager.js","webpack://TDLib/./src/sprites/actions/walk-to/WalkTo.js","webpack://TDLib/./src/components/EffectComponent.js","webpack://TDLib/./src/sprites/effects/light-effects/Trembling.js","webpack://TDLib/./src/components/index.js","webpack://TDLib/./src/components/BehaviourComponent.js","webpack://TDLib/./src/sprites/effects/index.js","webpack://TDLib/./src/sprites/effects/Effect.js","webpack://TDLib/./src/sprites/effects/light-effects/HardFlickering.js","webpack://TDLib/./src/sprites/effects/light-effects/SoftFlickering.js","webpack://TDLib/./src/sprites/world-items/light-sources/LightSource.js","webpack://TDLib/./src/utils/index.js","webpack://TDLib/./src/managers/index.js","webpack://TDLib/./src/systems/index.js","webpack://TDLib/./src/sprites/characters/Character.js","webpack://TDLib/./src/TDLib.js","webpack://TDLib/(webpack)/buildin/global.js","webpack://TDLib/./src/components/ActionComponent.js","webpack://TDLib/./src/sprites/actions/examine/Examine.js","webpack://TDLib/./src/sprites/actions/face-to/Settings.js","webpack://TDLib/./src/sprites/actions/walk-to/Settings.js","webpack://TDLib/./src/sprites/actions/idle/Idle.js","webpack://TDLib/./src/sprites/actions/interact/Interact.js","webpack://TDLib/./src/sprites/actions/observe/Observe.js","webpack://TDLib/./src/sprites/actions/run-to/RunTo.js","webpack://TDLib/./src/sprites/actions/run-to/Settings.js","webpack://TDLib/./src/sprites/behaviours/const.js","webpack://TDLib/./src/sprites/behaviours/examinable/Examinable.js","webpack://TDLib/./src/sprites/behaviours/interactive/Interactive.js","webpack://TDLib/./src/sprites/behaviours/observable/Observable.js","webpack://TDLib/./src/sprites/behaviours/observable/Settings.js","webpack://TDLib/./src/sprites/behaviours/inventory/Inventory.js","webpack://TDLib/./src/sprites/effects/light-effects/index.js","webpack://TDLib/./src/sprites/effects/light-effects/HardFlickeringAndTrembling.js","webpack://TDLib/./src/sprites/effects/light-effects/RadiusFlickering.js","webpack://TDLib/./src/sprites/effects/light-effects/SoftFlickeringAndTrembling.js","webpack://TDLib/./src/boot/Game.js","webpack://TDLib/./src/boot/DebugHeader.js","webpack://TDLib/./src/utils/Utils.js","webpack://TDLib/./src/managers/layers/LayerManager.js","webpack://TDLib/./src/managers/layers/Settings.js","webpack://TDLib/./src/managers/light-sources/LightSourceManager.js","webpack://TDLib/./src/managers/updates/UpdateManager.js","webpack://TDLib/./src/systems/cursors/CursorSystem.js","webpack://TDLib/./src/systems/rooms/RoomSystem.js","webpack://TDLib/./src/boot/Boot.js","webpack://TDLib/./node_modules/filter-obj/index.js","webpack://TDLib/./src/rooms/index.js","webpack://TDLib/./src/rooms/Room.js","webpack://TDLib/./src/rooms/Utils.js","webpack://TDLib/./src/sprites/index.js","webpack://TDLib/./src/sprites/characters/index.js","webpack://TDLib/./src/sprites/characters/npc-characters/NPCharacter.js","webpack://TDLib/./src/sprites/characters/players/Player.js","webpack://TDLib/./src/sprites/inventory-items/index.js","webpack://TDLib/./src/sprites/inventory-items/InventoryItem.js","webpack://TDLib/./src/sprites/world-items/index.js","webpack://TDLib/./src/sprites/world-items/light-sources/index.js","webpack://TDLib/./src/sprites/world-items/room-furnitures/index.js","webpack://TDLib/./src/sprites/world-items/room-furnitures/RoomFurniture.js","webpack://TDLib/./src/sprites/world-items/wall-furnitures/index.js","webpack://TDLib/./src/sprites/world-items/wall-furnitures/WallFurniture.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Action","invoker","actor","config","arguments","length","undefined","_classCallCheck","this","constructor","target","_queue","isPaused","actions","_this","Array","isArray","forEach","action","push","_abort","_start","finish","shift","_remove","_pause","_resume","_update","BaseAction","startCallback","finishCallback","updateCallback","resumeCallback","pauseCallback","_createClass","_Effect2","LightEffect","contributeFactor","_possibleConstructorReturn","__proto__","getPrototypeOf","callback","_this2","_get","stopped","_this3","GAME","TILE_SIZE","ROOM_HEIGHT_IN_TILE","INVENTORY_WIDTH_IN_TILES_MOBILE","INVENTORY_WIDTH_IN_TILES_DESKTOP","INVENTORY_HEIGHT_IN_TILES_MOBILE","INVENTORY_HEIGHT_IN_TILES_DESKTOP","ROOM_FRAME_IN_TILES_DESKTOP","ROOM_FRAME_IN_TILES_MOBILE","SCREEN_PROPS","DEVICE","STARTING_ROOM","GAME_SPRITES","_const","Behaviours","Behaviour","Examinable","Interactive","Observable","Talkable","Inventory","Phaser","Utils","Objects","Extend","default","_phaser","CONST","VERSION","version","PHASER_VERSION","LEFT","RIGHT","Component","gameObject","Actions","Examine","FaceTo","Idle","Interact","Observe","RunTo","WalkTo","_Action2","_interopRequireDefault","_Settings","apply","addActions","Math","abs","x","MICRO_MOVEMENT_RADIUS","facing","setFlipX","_Action","component","cursors","room","add","pixelPerfect","setInteractive","alphaTolerance","draggable","console","log","lightSources","calculateLightsContribuitePoint","_Sprite2","WorldItem","y","texture","layer","hasBody","behaviourType","observeText","examineOrInteractText","blockExamineText","noLightObserveText","noLightExamineOrInteractText","examineOrInteractOffsetX","examineOrInteractThresholdRadius","minLightLevelToExamineOrInteract","minLightLevelToObserve","setPipeline","_behaviours","_BehaviourComponent","Sprite","INERT","DEFAULT_OBSERVE_TEXT","DEFAULT_EXAMINE_OR_INTERACT_TEXT","DEFAULT_NO_LIGHT_OBSERVE_TEXT","DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT","DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT","DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE","floor","random","type","behaviours","existing","updates","physics","setCollideWorldBounds","setGravityY","layers","setLayersDepth","warn","Physics","Arcade","width","height","offsetX","offsetY","input","hitArea","setSize","setPosition","Manager","pluginManager","Plugins","ScenePlugin","_FaceTo","anims","play","body","setVelocity","WALK_VELOCITY","velocity","_Component2","_effects","_LightSource","EffectComponent","previousEffects","currentEffect","duration","stop","LightEffects","timer","time","addEvent","delay","callbackScope","repeat","remove","_LightEffect2","Trembling","minTime","maxTime","minPercentageIntensity","maxPercentageIntensity","minPercentageRadius","maxPercentageRadius","backToInitialIntensity","backToInitialRadius","setTimer","newIntensityPercentage","graphicLight","setIntensity","intensity","diffusedLight","newRadiusPercentage","setRadius","radius","Components","ActionComponent","BehaviourComponent","player","_addBehaviours","EXAMINABLE","INTERACTIVE","observe","examine","interact","Effects","Effect","_EffectComponent","HardFlickering","finalState","initialConfig","turnOff","SoftFlickering","_WorldItem2","LightSource","graphicLightConfig","diffusedLightConfig","offset","isOn","turnOn","effects","lights","addLight","diffusedLights","graphicLights","diffusedLightindex","indexOf","splice","removeLight","graphicLightindex","getScreenProps","Managers","LayerManager","LightSourceManager","UpdateManager","Systems","CursorSystem","RoomSystem","_components","Character","_ref","concat","slice","TDLib","Game","Rooms","Settings","Sprites","global","g","Function","e","_actions","defaultAction","DEFAULT_MODE","newAction","QUEUE_MODE","PAUSE_MODE","unshift","_WalkTo","getAction","RUN_VELOCITY","TALKABLE","INVENTORY","_Behaviour2","checkLight","_timer","on","pointer","setCursor","DEFAULT_MIN_TIME_TO_OBSERVE","isBlocked","HardFlickeringAndTrembling","RadiusFlickering","SoftFlickeringAndTrembling","_HardFlickering","_Trembling","hardFlickering","trembling","_SoftFlickering","SoftDefaultFlickeringAndtrembling","softFlickering","_DebugHeader","_utils","_managers","_systems","_Boot","_filterObj","_setScreenConfig","_setPhysicsConfig","_setPlugins","_setBoot","_setHeaderProps","_finalizeConfig","startingRoom","_setGameSprites","Clone","sprites","calculatedWidth","calculatedHeight","zoom","calculatedZoom","autoResize","backgroundColor","pixelArt","arcade","debug","gravity","plugins","plugin","start","mapping","scene","banner","obj","flag","keys","_typeof","objectsObj","temp","father","output","getChildrenFromFather","element","WEBGL","maxLights","parent","disableContextMenu","game","bannerBackgroundColor","bannerTextColor","hidePhaser","renderType","audioType","audioConfig","audio","deviceAudio","device","webAudio","disableWebAudio","noAudio","audioData","browser","ie","lastColor","args","color","gameTitle","gameVersion","gameURL","returnValue","availHeight","innerHeight","availWidth","innerWidth","screen","ceil","_Manager2","layerSize","strartingDepth","startingDepth","backgroundLayer","group","rearDoorsLayer","wallFurnitureLayer","roomFurnitureLayer","sideDoorsLayer","npcLayer","playerLayer","cielingObjectsLayer","frontDoorsLayer","wallsLayer","wallsMaskLayer","overallDarknessLayer","borderMasksLayer","setDepth","source","getChildren","lightSource","singleLightContributeAccumulator","light","singleLightContribute","singleLightIntensityAccumulator","averageLightsContribute","events","systems","gameObjects","Structs","Set","_sceneUpdate","_sceneShutdown","once","_sceneDestroy","delta","iterateLocal","clear","off","_scenePostUpdate","set","objs","delete","cursorScene","sceneManager","lastTarget","BasePlugin","CURSOR_SCENE_KEY","CursorScene","cursor","DEFAULT_CURSOR","activePointer","camera","worldX","EXAMINABLE_CURSOR","abort","INTERACTIVE_CURSOR","TALKABLE_CURSOR","TalkTo","setTexture","setOrigin","setVisible","_Phaser$Scene","_inherits","Scene","load","image","HOLD_CURSOR","CHOICE_CURSOR","CHOICE_PRESSED_CURSOR","setDefaultCursor","autoStart","Boot","configure","rooms","predicate","ret","isArr","val","Room","_Utils","sceneKey","rawAssets","assets","raw","array","map","_scrapeAssets","path","nPath","bPath","_this4","scrapeComplexObjKey","params","findFileNameFromPath","setName","enable","bringToTop","_setCameraViewport","_createRoom","_createSprites","_applyBorderMasks","cameras","main","setBounds","startFollow","setRoundPixels","world","make","tilemap","tilemapTiledJSON","tileWidth","tileHeight","createDynamicLayer","addTilesetImage","tiles","background","walls","_this5","objects","setScrollFactor","_updateMasksByLightDiffusion","children","list","calculateAverageLightsContribute","setAlpha","searchKey","prop","nameFirstCharachterPosition","lastIndexOf","nameLastCharachterPosition","Characters","InventoryItems","WorldItems","NPCharacter","Player","_Character2","pointerDown","InventoryItem","InentoryItem","LightSources","RoomFurnitures","WallFurnitures","RoomFurniture","WallFurniture"],"mappings":"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","file":"the-darkest-lib.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"phaser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"TDLib\", [\"phaser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TDLib\"] = factory(require(\"phaser\"));\n\telse\n\t\troot[\"TDLib\"] = factory(root[\"phaser\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","/**\n * Class representing a TDLAction.\n * @memberof TDLib.Components.Actions\n * @since 1.0.0\n */\nexport default class Action {\n  /**\n   * Start a new TDLAction.\n   * @param {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @param {TDLSprite} actor - The actor who performs the action.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   */\n  constructor(invoker, actor, config = {}) {\n    /**\n     * The invoker of the action.\n     * @type {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction}\n     * @since 1.0.0\n     */\n    this.invoker = invoker;\n\n    /**\n     * The name of the action.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.name = this.constructor.name;\n\n    /**\n     * The actor who performs the action.\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.actor = actor;\n\n    /**\n     * The target of the action.\n     * @type {Object|TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.target = config.target;\n\n    /**\n     * The config object for the action.\n     * @type {Object}\n     * @since 1.0.0\n     */\n    this.config = config;\n\n    /**\n     * The queue of actions.\n     * @type {Array}\n     * @private\n     * @since 1.0.0\n     */\n    this._queue = [];\n\n    /**\n     * Tells if the action has been paused.\n     * @type {boolean}\n     * @since 1.0.0\n     */\n    this.isPaused = false;\n  }\n\n  /**\n   * Add one or more new actions to the queue.\n   * @param {TDLib.Components.Actions.TDLAction|TDLib.Components.Actions.TDLAction[]|TDLib.Components.Actions.TDLAction.BaseAction|TDLib.Components.Actions.TDLAction.BaseAction[]} actions - The new actions to add.\n   * @since 1.0.0\n   */\n  addActions(actions) {\n    if (Array.isArray(actions)) {\n      actions.forEach(action => {\n        this._queue.push(action);\n      });\n    } else this._queue.push(actions);\n  }\n\n  /**\n   * The blank action to create new composed and complex actions.\n   * @typedef {TDLib.Components.Actions.TDLAction.BaseAction}\n   *\n   * @property {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @property {Function} startCallback - The callback to execute at the beginning of the action.\n   * @property {Function} [finishCallback] - The callback to execute at the end of the action.\n   * @property {Function} [updateCallback]  - The callback to execute at every update loop.\n   * @property {Function} [resumeCallback=startCallback] - The callback to execute when the action is paused.\n   * @property {Function} [pauseCallback=finishCallback]  - The callback to execute when the action is resumed.\n   * @since 1.0.0\n   */\n  static get BaseAction() {\n    return class BaseAction {\n      constructor(invoker, startCallback, finishCallback = () => { }, updateCallback = () => { }, resumeCallback = startCallback, pauseCallback = finishCallback) {\n        this.invoker = invoker;\n\n        this.startCallback = startCallback;\n        this.finishCallback = finishCallback;\n        this.updateCallback = updateCallback;\n        this.resumeCallback = resumeCallback;\n        this.pauseCallback = pauseCallback;\n\n        this.isPaused = false;\n      }\n\n      _start() {\n        this.startCallback();\n      }\n\n      finish() {\n        this.finishCallback();\n        this.invoker._remove();\n      }\n\n      _abort() {\n        this.finishCallback();\n      }\n\n      _resume() {\n        this.isPaused = false;\n        this.resumeCallback();\n      }\n\n      _pause() {\n        this.pauseCallback();\n        this.isPaused = true;\n      }\n\n      _update() {\n        this.updateCallback();\n      }\n    };\n  }\n\n  /**\n   * Abort an uncompleted action.\n   * @private\n   * @since 1.0.0\n   */\n  _abort() {\n    if (this._queue.length > 0) this._queue[0]._abort();\n  }\n\n  /**\n   * Start an action.\n   * @private\n   * @since 1.0.0\n   */\n  _start() {\n    if (this._queue.length > 0) this._queue[0]._start();\n  }\n\n  /**\n   * Finish a completed action.\n   * @private\n   * @since 1.0.0\n   */\n  finish() {\n    if (this._queue.length > 0) this._queue[0].finish();\n  }\n\n  /**\n   * Remove a completed action from the queue.\n   * @private\n   * @since 1.0.0\n   */\n  _remove() {\n    if (this._queue.length > 0) this._queue.shift();\n\n    if (this._queue.length <= 0) this.invoker._remove();\n    else this._queue[0]._start();\n  }\n\n  /**\n   * Pause an action.\n   * @private\n   * @since 1.0.0\n   */\n  _pause() {\n    if (this._queue.length > 0) {\n      this._queue[0]._pause();\n      this.isPaused = true;\n    }\n  }\n\n  /**\n   * Resume a paused action.\n   * @private\n   * @since 1.0.0\n   */\n  _resume() {\n    if (this._queue.length > 0) {\n      this.isPaused = false;\n      this._queue[0]._resume();\n    }\n  }\n\n  /**\n   * Update the currently performed action.\n   * @private\n   * @since 1.0.0\n   */\n  _update() {\n    if (this._queue.length > 0) this._queue[0]._update();\n  }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import Effect from '../Effect';\n\nexport default class LightEffect extends Effect {\n  constructor(invoker, config, contributeFactor = 1) {\n    super(invoker, config);\n\n    this.contributeFactor = contributeFactor;\n  }\n\n  play(callback) {\n    super.play(() => {\n      this.stopped = false;\n      callback();\n    });\n  }\n\n  stop(callback) {\n    super.stop(() => {\n      this.stopped = true;\n      callback();\n    });\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * The default Game settings.\n * @namespace TDLib.Settings\n */\nvar Settings = {\n  /**\n   * The instance of the Game.\n   *\n   * @name TDLib.Settings.GAME\n   * @const\n   * @type {TDLib.Game}\n   * @since 1.0.0\n   */\n  GAME: '',\n  /**\n   * The size of the tiles.\n   *\n   * @name TDLib.Settings.TILE_SIZE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  TILE_SIZE: 48,\n  /**\n   * The height of a standard room in tiles.\n   *\n   * @name TDLib.Settings.ROOM_HEIGHT_IN_TILE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  ROOM_HEIGHT_IN_TILE: 6,\n  /**\n   * The inventory width in tiles in mobile devices.\n   *\n   * @name TDLib.Settings.INVENTORY_WIDTH_IN_TILES_MOBILE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  INVENTORY_WIDTH_IN_TILES_MOBILE: 1.25,\n  /**\n   * The inventory width in tiles in desktop devices.\n   *\n   * @name TDLib.Settings.INVENTORY_WIDTH_IN_TILES_DESKTOP\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  INVENTORY_WIDTH_IN_TILES_DESKTOP: 0,\n  /**\n   * The inventory height in tiles in mobile devices.\n   *\n   * @name TDLib.Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  INVENTORY_HEIGHT_IN_TILES_MOBILE: 0,\n  /**\n   * The inventory height in tiles in desktop devices.\n   *\n   * @name TDLib.Settings.INVENTORY_HEIGHT_IN_TILES_DESKTOP\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  INVENTORY_HEIGHT_IN_TILES_DESKTOP: 1,\n  /**\n   * The room frame in tiles in desktop devices.\n   *\n   * @name TDLib.Settings.ROOM_FRAME_IN_TILES_DESKTOP\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  ROOM_FRAME_IN_TILES_DESKTOP: 0.5,\n  /**\n   * The room frame in tiles in mobile devices.\n   *\n   * @name TDLib.Settings.ROOM_FRAME_IN_TILES_MOBILE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  ROOM_FRAME_IN_TILES_MOBILE: 0.25,\n  /**\n   * The proportions of the used screen.\n   *\n   * @name TDLib.Settings.SCREEN_PROPS\n   * @type {Object}\n   * @since 1.0.0\n   */\n  SCREEN_PROPS: {},\n  /**\n   * The used device.\n   *\n   * @name TDLib.Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE\n   * @type {String}\n   * @since 1.0.0\n   */\n  DEVICE: 'Desktop',\n  STARTING_ROOM: null,\n  GAME_SPRITES: null\n};\n\nmodule.exports = Settings;\n","import CONST from './const';\n\nvar Behaviours = {\n  Behaviour: require('./Behaviour'),\n  Examinable: require('./examinable/Examinable'),\n  Interactive: require('./interactive/Interactive'),\n  Observable: require('./observable/Observable'),\n  Talkable: require('./talkable/Talkable'),\n  Inventory: require('./inventory/Inventory')\n};\n\nBehaviours = Phaser.Utils.Objects.Extend(false, Behaviours, CONST);\nmodule.exports = Behaviours;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * Global consts.\n *\n * @ignore\n */\n\nimport Phaser from 'phaser';\n\nconst CONST = {\n  /**\n   * TheDarkestLib Release Version.\n   *\n   * @name TDLib.VERSION\n   * @const\n   * @type {string}\n   * @since 1.0.0\n   */\n  VERSION: require('../package.json').version,\n  /**\n   * Phaser Release Version.\n   *\n   * @name TDLib.PHASER_VERSION\n   * @const\n   * @type {string}\n   * @since 1.0.0\n   */\n  PHASER_VERSION: Phaser.VERSION,\n  /**\n   * Left direction constant.\n   *\n   * @name TDLib.LEFT\n   * @const\n   * @type {string}\n   * @since 1.0.0\n   */\n  LEFT: '_left',\n  /**\n   * Right direction constant.\n   *\n   * @name TDLib.RIGHT\n   * @const\n   * @type {string}\n   * @since 1.0.0\n   */\n  RIGHT: '_right'\n};\n\nmodule.exports = CONST;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * @classdesc\n * Class representing a generic Component.\n * A Component is bound to a Sprite and extends the members and methods of it.\n * To access the component you have to use a specific key.\n *\n * @class Component\n * @memberof TDLib.Components\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Sprites.Sprite} gameObject - The Sprite using the Component.\n */\nexport default class Component {\n  constructor(gameObject) {\n\n    /**\n     * The name of the Component.\n     * @type {string}\n     * @name TDLib.Components.Component#name\n     * @since 1.0.0\n     */\n    this.name = this.constructor.name;\n\n    /**\n     * The Sprite using the Component.\n     * @type {TDLib.Sprites.Sprite}\n     * @name TDLib.Components.Component#gameObject\n     * @since 1.0.0\n     */\n    this.gameObject = gameObject;\n  }\n}\n","const Actions = {\n  Action: require('./Action'),\n  Examine: require('./examine/Examine'),\n  FaceTo: require('./face-to/FaceTo'),\n  Idle: require('./idle/Idle'),\n  Interact: require('./interact/Interact'),\n  Observe: require('./observe/Observe'),\n  RunTo: require('./run-to/RunTo'),\n  WalkTo: require('./walk-to/WalkTo')\n};\n\nmodule.exports = Actions;\n","import Action from '../Action';\nimport CONST from '../../../const';\nimport Settings from './Settings';\n\nexport default class FaceTo extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      new Action.BaseAction(\n        this,\n        () => {\n          if (Math.abs(this.actor.x - this.target.x) > Settings.MICRO_MOVEMENT_RADIUS) {\n            if (this.actor.facing === CONST.RIGHT) {\n              if (this.actor.x > this.target.x) {\n                this.actor.facing = CONST.LEFT;\n                this.actor.setFlipX(true);\n                // this.actor.anims.play('idleLeft');\n              }\n            } else if (this.actor.facing === CONST.LEFT) {\n              if (this.actor.x < this.target.x) {\n                this.actor.facing = CONST.RIGHT;\n                this.actor.setFlipX(false);\n                // this.actor.anims.play('idleRight');\n              }\n            }\n          }\n          this.finish();\n        }\n      )\n    );\n  }\n}\n","import Action from '../actions/Action';\n\n/**\n * Class representing the behaviour of a sprite.\n * @memberof TDLib.Components.SpriteBehaviours\n * @since 1.0.0\n */\nexport default class Behaviour {\n  /**\n   * Create a SpriteBehaviour.\n   * @param {TDLib.Components.SpriteBehaviourComponent} component - The component which has invoked the behaviour.\n   */\n  constructor(component) {\n    /**\n     * The component which has invoked the behaviour.\n     * @type {TDLib.Components.SpriteBehaviourComponent}\n     * @since 1.0.0\n     */\n    this.component = component;\n\n    /**\n     * The global cursor manager.\n     * @type {TDLib.Plugins.GlobalPlugins.CursorManager}\n     * @since 1.0.0\n     */\n    this.cursors = this.component.gameObject.room.cursors;\n\n    /**\n     * The sprite which has invoked the behaviour.\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.gameObject = this.component.gameObject;\n\n    /**\n     * The room where the gameObject lives.\n     * @type {TDLib.Rooms.TDLRoom}\n     * @since 1.0.0\n     */\n    this.room = this.component.gameObject.room;\n\n    this.add();\n  }\n\n  /**\n   * Set the gameObject as interactive.\n   * @since 1.0.0\n   */\n  add() {\n    if (this.component.pixelPerfect === null) this.component.gameObject.setInteractive();\n    else {\n      this.component.gameObject.setInteractive(\n        {\n          pixelPerfect: true,\n          alphaTolerance: this.component.pixelPerfect.alphaTolerance,\n          draggable: false\n        }\n      );\n    }\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Action.BaseAction(\n      invoker,\n      () => {\n        console.log('Sono una generica action dei behaviour');\n        invoker.finish();\n      }\n    );\n  }\n\n  checkLight(value) {\n    if (this.room.lightSources.calculateLightsContribuitePoint(this.gameObject) >= value) return true;\n    return false;\n  }\n}\n","import Sprite from '../Sprite';\n\n/**\n * The world items namespace.\n * @namespace TDLib.Sprites.WorldItems\n * @since 1.0.0\n */\n\n/**\n * Class representing a WorldItem.\n * @extends TDLib.Sprites.Sprite\n * @memberof TDLib.Sprites.WorldItems\n * @since 1.0.0\n */\nexport default class WorldItem extends Sprite {\n  /**\n   * Create a WorldObject.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [layer=null] - The key of the layer which will contain the sprite.\n   * @param {boolean} [hasBody=true] - Specify if the sprite has physics.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   */\n  constructor(room, x, y, texture, layer, hasBody, behaviourType, pixelPerfect, observeText, examineOrInteractText, blockExamineText, noLightObserveText, noLightExamineOrInteractText, examineOrInteractOffsetX, examineOrInteractThresholdRadius, minLightLevelToExamineOrInteract, minLightLevelToObserve) {\n    super(\n      room,\n      x, y,\n      texture,\n      layer,\n      hasBody,\n      behaviourType,\n      pixelPerfect,\n      observeText,\n      examineOrInteractText,\n      blockExamineText,\n      noLightObserveText,\n      noLightExamineOrInteractText,\n      examineOrInteractOffsetX,\n      examineOrInteractThresholdRadius,\n      minLightLevelToExamineOrInteract,\n      minLightLevelToObserve\n    );\n  }\n\n  create() {\n    super.create();\n    this.setPipeline('Light2D'); // Da spostare in TDLSprite non appena il player supporterà la Light2D\n  }\n}\n","import Behaviours from '../sprites/behaviours';\nimport BehaviourComponent from '../components/BehaviourComponent';\nimport Phaser from 'phaser';\n\n/**\n * The Darkest Lib.\n * @namespace TDLib\n * @since 1.0.0\n */\n\n/**\n * The actions namespace.\n * @namespace TDLib.Sprites\n * @since 1.0.0\n */\n\n/**\n * Class representing a TDLSprite.\n * @extends Phaser.Physics.Arcade.Sprite\n * @memberof TDLib.Sprites\n * @since 1.0.0\n */\nexport default class Sprite extends Phaser.Physics.Arcade.Sprite {\n  /**\n   * Create a TDLSprite.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [layer=null] - The key of the layer which will contain the sprite.\n   * @param {boolean} [hasBody=true] - Specify if the sprite has physics.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   * @param {boolean} [precisePosition=false] - Specify if to examine or interact with the sprite it's required to be precisely at the examineOrInteractPoint. (Probably not needed)\n   */\n  constructor(\n    room,\n    x, y,\n    texture,\n    layer = null,\n    hasBody = true,\n    behaviourType = Behaviours.INERT,\n    pixelPerfect = null,\n    observeText = Behaviours.DEFAULT_OBSERVE_TEXT,\n    examineOrInteractText = Behaviours.DEFAULT_EXAMINE_OR_INTERACT_TEXT,\n    blockExamineText = null,\n    noLightObserveText = Behaviours.DEFAULT_NO_LIGHT_OBSERVE_TEXT,\n    noLightExamineOrInteractText = Behaviours.DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT,\n    examineOrInteractOffsetX = 0,\n    examineOrInteractThresholdRadius = 0,\n    minLightLevelToExamineOrInteract = Behaviours.DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT,\n    minLightLevelToObserve = Behaviours.DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE\n\n  ) {\n    super(room, x, y, texture);\n\n    /**\n     * The room where the sprite is created.\n     * @type {TDLib.Rooms.TDLRoom}\n     * @since 1.0.0\n     */\n    this.room = room;\n\n    /**\n     * The name of the sprite, to map it in the room. Usually it's obtained by Tiled.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.name;\n\n    /**\n     * The unique key of the sprite, composed by the sprite type and a 4 digits random integer number.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.key = this.constructor.name + (Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000);\n\n    /**\n     * The type of the sprite.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.type = this.constructor.name;\n\n    /**\n     * The sprite behaviour component instance.\n     * @type {TDLib.Components.SpriteBehaviourComponent}\n     * @since 1.0.0\n     */\n    this.behaviours = new BehaviourComponent(this, behaviourType, pixelPerfect);\n\n    /**\n     * The text which appears when observing the sprite.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.observeText = observeText;\n\n    /**\n * The text which appears when examine or interact with the sprite.\n     * @type {string}\n     * @since 1.0.0\n */\n    this.examineOrInteractText = examineOrInteractText;\n\n    /**\n     * If not null it's the blocking text which appears the first time the sprite is examined.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.blockExamineText = blockExamineText;\n\n    /**\n     * The text which appears when observing the sprite when the diffused light is not sufficient.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.noLightObserveText = noLightObserveText;\n\n    /**\n * The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.noLightExamineOrInteractText = noLightExamineOrInteractText;\n\n    /**\n     * The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n     */\n    this.examineOrInteractOffsetX = examineOrInteractOffsetX;\n\n    /**\n     * The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n         */\n    this.examineOrInteractThresholdRadius = examineOrInteractThresholdRadius;\n\n    /**\n     * The minimum value of diffused light to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n         */\n    this.minLightLevelToExamineOrInteract = minLightLevelToExamineOrInteract;\n\n    /**\n * The minimum value of diffused light to observe the sprite.\n     * @type {number}\n     * @since 1.0.0\n     */\n    this.minLightLevelToObserve = minLightLevelToObserve;\n\n    this.room.add.existing(this);\n    this.room.updates.add(this);\n    if (hasBody) {\n      this.room.physics.add.existing(this);\n      this.setCollideWorldBounds(true);\n      this.setGravityY(10000);\n    }\n\n    if (layer != null) {\n      if (layer in this.room.layers) {\n        this.room.layers[layer].add(this);\n        this.room.layers.setLayersDepth();\n      } else console.warn('ALERT: layer not found for object', this);\n    }\n\n    this.create();\n  }\n\n  /**\n   * The create function is executed once, immediately after the initialization of the sprite.\n   * @since 1.0.0\n   */\n  create() {\n    console.log('Created:', this.key, '- Type:', this.type, '- Behaviour:', this.behaviours.type);\n  }\n\n  /**\n   * The update is executed at every cycle of the game loop.\n   * @since 1.0.0\n   */\n  update() {\n\n  }\n\n  /**\n   * Set the name property of a sprite.\n   * @param {string} value - The name which is used to map a sprite in the room.\n   * @return {TDLib.Sprites.TDLSprite}\n   * @since 1.0.0\n   */\n  setName(value) {\n    this.name = value;\n    return this;\n  }\n\n  // Poichè è stata aggiunta la pixel perfect collision, valutare l'utilità di questa funzione!\n  setHitAreaSize(width = this.width, height = this.height, offsetX = 0, offsetY = 0) {\n    this.input.hitArea.setSize(width, height);\n    this.input.hitArea.setPosition(((this.width - width) / 2) + offsetX, ((this.height - height) / 2) + offsetY);\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Phaser from 'phaser';\n\n/**\n * @classdesc\n * Class representing a generic Manager.\n * A Manager is a controller working at a Room level.\n * It is unique in its own Room, but it isn't in the whole game.\n * From Phaser library a Manager is handled as a Phaser.Plugins.ScenePlugin.\n * It has to be added to the game into Game.js through the specified method..\n *\n * @class Manager\n * @extends Phaser.Plugins.ScenePlugin\n * @memberof TDLib.Managers\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Rooms.Room|Phaser.Scene} room - The room running the Manager.\n * @param {Phaser.Plugins.PluginManager} - A reference to Phaser PluginManager.\n */\nexport default class Manager extends Phaser.Plugins.ScenePlugin {\n  constructor(room, pluginManager) {\n    super(room, pluginManager);\n\n    /**\n     * The room running the Manager.\n     * @type {TDLib.Rooms.Room|Phaser.Scene}\n     * @since 1.0.0\n     */\n    this.room = room;\n  }\n\n  /**\n   * Default function called by Phaser when booting the plugins.\n   * @method TDLib.Managers.Manager#boot\n   * @protected\n   * @since 1.0.0\n   */\n  boot() {\n\n  }\n}\n","import Action from '../Action';\nimport FaceTo from '../face-to/FaceTo';\nimport Settings from './Settings';\n\nexport default class WalkTo extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new FaceTo(this, this.actor, this.config),\n        new Action.BaseAction(\n          this,\n          () => {\n            if (Math.abs(this.actor.x - this.target.x) > Settings.MICRO_MOVEMENT_RADIUS) {\n              if (this.actor.x < this.target.x) {\n                this.actor.anims.play('walk');\n                // this.actor.anims.play('walkRight');\n                this.actor.body.setVelocity(Settings.WALK_VELOCITY);\n              } else if (this.actor.x > this.target.x) {\n                this.actor.anims.play('walk');\n                // this.actor.anims.play('walkLeft');\n                this.actor.body.setVelocity(-Settings.WALK_VELOCITY);\n              }\n            } else {\n              this.finish();\n            }\n          },\n          () => {\n            this.actor.body.setVelocity(0);\n          },\n          () => {\n            if ((this.actor.x - this.target.x) * this.actor.body.velocity.x > 0) this.finish();\n          }\n        )\n      ]\n    );\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Component from './Component';\nimport Effects from '../sprites/effects';\nimport LightSource from '../sprites/world-items/light-sources/LightSource';\n\n/**\n * @classdesc\n * Class representing the EffectComponent.\n * EffectComponent is responsible to handle all the effects of a Sprite.\n *\n * @class EffectComponent\n * @memberof TDLib.Components\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Sprites.Sprite} gameObject - The Sprite that owns the component.\n */\nexport default class EffectComponent extends Component {\n  constructor(gameObject) {\n    super(gameObject);\n\n    /**\n     * An array containing all the already played Effects.\n     * @type {Array}\n     * @name TDLib.Components.EffectComponent#previousEffects\n     * @since 1.0.0\n     */\n    this.previousEffects = [];\n\n    /**\n     * The currently played Effect.\n     * @type {TDLib.Sprites.Effects.Effect}\n     * @name TDLib.Components.EffectComponent#currentEffect\n     * @since 1.0.0\n     */\n    this.currentEffect = null;\n  }\n\n  /**\n   * Starts a new Effect. If there's an already running Effect it is stopped.\n   *\n   * @method TDLib.Components.EffectComponent#play\n   * @param {string} key - A key identifying an Effect.\n   * @param {Object} [duration=-1] - If specified it represents the duration of the Effect.\n   * @param {Object} [config] - The configuration object for the Effect.\n   * @since 1.0.0\n   */\n  play(key, duration = -1, config) {\n    if (this.currentEffect) this.stop();\n\n    if (key in Effects) this.currentEffect = new Effects[key](this, config);\n    else if (key in Effects.LightEffects) {\n      if (this.gameObject instanceof LightSource) this.currentEffect = new Effects.LightEffects[key](this, config);\n      else console.log(key + ' can only be run by a LightSource');\n    } else {\n      console.log('No effect with key: ', key);\n    }\n\n    if (this.currentEffect) this.currentEffect.play();\n\n    if (duration > 0) {\n      this.timer = this.gameObject.room.time.addEvent({\n        delay: duration,\n        callback: () => {\n          this.stop();\n        },\n        callbackScope: this,\n        repeat: 0\n      });\n      console.log(this.currentEffect.name + 'Effect started for', duration, 'ms');\n    } else if (duration === -1) {\n      console.log(this.currentEffect.name + 'Effect started');\n    } else {\n      console.log('You must use a positive value!');\n    }\n  }\n\n  /**\n   * Stops the currently played Effect.\n   *\n   * @method TDLib.Components.EffectComponent#stop\n   * @since 1.0.0\n   */\n  stop() {\n    if (this.currentEffect) {\n      if (this.timer) {\n        this.timer.remove();\n        this.timer = null;\n      }\n      this.previousEffects.push(this.currentEffect);\n      this.currentEffect.stop();\n      console.log(this.currentEffect.name + 'Effect stopped');\n      this.currentEffect = null;\n      console.log(this.previousEffects);\n    }\n  }\n}\n","import LightEffect from './LightEffect';\n\nexport default class Trembling extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.8);\n\n    if (!this.config.minTime) this.config.minTime = 10;\n    if (!this.config.maxTime) this.config.maxTime = 100;\n    if (!this.config.minPercentageIntensity) this.config.minPercentageIntensity = 0.8;\n    if (!this.config.maxPercentageIntensity) this.config.maxPercentageIntensity = 1;\n    if (!this.config.minPercentageRadius) this.config.minPercentageRadius = 0.8;\n    if (!this.config.maxPercentageRadius) this.config.maxPercentageRadius = 1;\n    if (!this.config.backToInitialIntensity) this.config.backToInitialIntensity = true;\n    if (!this.config.backToInitialRadius) this.config.backToInitialRadius = true;\n  }\n\n  play() {\n    super.play(() => {\n      let setTimer = () => {\n        this.gameObject.room.time.addEvent({\n          delay: Math.floor(Math.random() * (this.config.maxTime - this.config.minTime)) + this.config.minTime,\n          callback: () => {\n\n            if (!this.stopped) {\n              let newIntensityPercentage = Math.floor((this.config.minPercentageIntensity + Math.random() * (this.config.maxPercentageIntensity - this.config.minPercentageIntensity)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity * newIntensityPercentage);\n              this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity * newIntensityPercentage);\n              let newRadiusPercentage = Math.floor((this.config.minPercentageRadius + Math.random() * (this.config.maxPercentageRadius - this.config.minPercentageRadius)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setRadius(this.gameObject.config.graphicLight.radius * newRadiusPercentage);\n\n              setTimer();\n            }\n\n          },\n          callbackScope: this,\n          repeat: 0\n        });\n      };\n\n      setTimer();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      if (this.config.backToInitialIntensity) {\n        this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity);\n        this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity);\n      } else {\n        this.gameObject.config.graphicLight.intensity = this.gameObject.graphicLight.intensity;\n        this.gameObject.config.diffusedLight.intensity = this.gameObject.diffusedLight.intensity;\n      }\n      if (this.config.backToInitialRadius) {\n        this.gameObject.graphicLight.setRadius(this.gameObject.config.graphicLight.radius);\n      } else {\n        this.gameObject.config.graphicLight.radius = this.gameObject.graphicLight.radius;\n      }\n    });\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * Components are attachable to Sprites in order to extend their capabilities.\n * @namespace TDLib.Components\n */\n\nconst Components = {\n  Component: require('./Component'),\n  ActionComponent: require('./ActionComponent'),\n  BehaviourComponent: require('./BehaviourComponent'),\n  EffectComponent: require('./EffectComponent')\n};\n\nmodule.exports = Components;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Component from './Component';\nimport Behaviours from '../sprites/behaviours';\n\n/**\n * @classdesc\n * Class representing the BehaviourComponent.\n * BehaviourComponent is responsible to handle all the behaviours of a Sprite.\n * A Sprite can be INERT, OBSERVABLE, EXAMINABLE, INTERACTIVE, INVENTORY, TALKABLE.\n *\n * @class BehaviourComponent\n * @memberof TDLib.Components\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Sprites.Sprite} gameObject - The Sprite that owns the component.\n * @param {string} type - The type of behaviour of the gameObject.\n * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n */\nexport default class BehaviourComponent extends Component {\n  constructor(gameObject, type, pixelPerfect) {\n    super(gameObject);\n\n    /**\n     * A reference to the player in the current room.\n     * @type {TDLib.Sprites.Characters.Player}\n     * @name TDLib.Components.BehaviourComponent#player\n     * @since 1.0.0\n     */\n    this.player;\n    if (typeof this.gameObject.room.player === 'undefined') this.player = this.gameObject;\n    else this.player = this.gameObject.room.player;\n\n    /**\n     * The type of behaviour of the gameObject.\n     * @type {string}\n     * @name TDLib.Components.BehaviourComponent#type\n     * @since 1.0.0\n     */\n    this.type = type;\n\n    /**\n     * If not null enable the pixel perfect pointer hit for the Sprite.\n     * @type {string}\n     * @name TDLib.Components.BehaviourComponent#pixelPerfect\n     * @since 1.0.0\n     */\n    this.pixelPerfect = pixelPerfect;\n\n    this._addBehaviours();\n  }\n\n  /**\n   * Select the appropriate behaviour for the gameObject.\n   *\n   * @method TDLib.Components.BehaviourComponent#_addBehaviours\n   * @protected\n   * @since 1.0.0\n   */\n  _addBehaviours() {\n    // Se l'oggetto è osservabile (cioè esaminabile o interagibile) setto il cursore appropriato\n    if (this.type === Behaviours.EXAMINABLE || this.type === Behaviours.INTERACTIVE) {\n      this.observe = new Behaviours.Observable(this);\n      if (this.type === Behaviours.EXAMINABLE) this.examine = new Behaviours.Examinable(this);\n      else if (this.type === Behaviours.INTERACTIVE) this.interact = new Behaviours.Interactive(this);\n    }\n  }\n}\n","const Effects = {\n  Effect: require('./Effect'),\n  LightEffects: require('./light-effects')\n};\n\nmodule.exports = Effects;\n","import EffectComponent from '../../components/EffectComponent';\n\nexport default class Effect {\n  constructor(invoker, config = {}) {\n\n    this.invoker = invoker;\n\n    this.config = config;\n\n    this.gameObject = invoker.gameObject;\n\n    this.name = this.constructor.name;\n  }\n\n  play(callback = () => { }) {\n    if (this.invoker instanceof EffectComponent) {\n      callback();\n    } else console.log('Effects can only be played by the EffectComponent');\n  }\n\n  stop(callback = () => { }) {\n    if (this.invoker instanceof EffectComponent) {\n      callback();\n    } else console.log('Effects can only be stopped by the EffectComponent');\n  }\n}\n","import LightEffect from './LightEffect';\n\nexport default class HardFlickering extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.5);\n\n    if (!this.config.minTime) this.config.minTime = 10;\n    if (!this.config.maxTime) this.config.maxTime = 400;\n    if (!this.config.finalState) this.config.finalState = 'on';\n  }\n\n  play() {\n    super.play(() => {\n      let setTimer = () => {\n        this.gameObject.room.time.addEvent({\n          delay: Math.floor(Math.random() * (this.config.maxTime - this.config.minTime)) + this.config.minTime,\n          callback: () => {\n            if (!this.stopped) {\n              if (this.gameObject.initialConfig.graphicLight !== null) {\n                if (this.gameObject.graphicLight.intensity === 0) this.gameObject.graphicLight.setIntensity(this.gameObject.initialConfig.graphicLight.intensity);\n                else this.gameObject.graphicLight.setIntensity(0);\n              }\n\n              if (this.gameObject.initialConfig.diffusedLight !== null) {\n                if (this.gameObject.diffusedLight.intensity === 0) this.gameObject.diffusedLight.setIntensity(this.gameObject.initialConfig.diffusedLight.intensity);\n                else this.gameObject.diffusedLight.setIntensity(0);\n              }\n              setTimer();\n            }\n          },\n          callbackScope: this,\n          repeat: 0\n        });\n      };\n\n      setTimer();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      if (this.config.finalState === 'on') {\n        if (this.gameObject.initialConfig.graphicLight !== null) {\n          this.gameObject.graphicLight.setIntensity(this.gameObject.initialConfig.graphicLight.intensity);\n        }\n        if (this.gameObject.initialConfig.diffusedLight !== null) {\n          this.gameObject.diffusedLight.setIntensity(this.gameObject.initialConfig.diffusedLight.intensity);\n        }\n      } else if (this.config.finalState === 'off') {\n        this.gameObject.turnOff();\n      }\n    });\n  }\n}\n","import LightEffect from './LightEffect';\n\nexport default class SoftFlickering extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.8);\n\n    if (!this.config.minTime) this.config.minTime = 10;\n    if (!this.config.maxTime) this.config.maxTime = 100;\n    if (!this.config.minPercentageIntensity) this.config.minPercentageIntensity = 0.8;\n    if (!this.config.maxPercentageIntensity) this.config.maxPercentageIntensity = 1;\n    if (!this.config.backToInitialIntensity) this.config.backToInitialIntensity = true;\n  }\n\n  play() {\n    super.play(() => {\n      let setTimer = () => {\n        this.gameObject.room.time.addEvent({\n          delay: Math.floor(Math.random() * (this.config.maxTime - this.config.minTime)) + this.config.minTime,\n          callback: () => {\n            if (!this.stopped) {\n              let newIntensityPercentage = Math.floor((this.config.minPercentageIntensity + Math.random() * (this.config.maxPercentageIntensity - this.config.minPercentageIntensity)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity * newIntensityPercentage);\n              this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity * newIntensityPercentage);\n              setTimer();\n            }\n          },\n          callbackScope: this,\n          repeat: 0\n        });\n      };\n\n      setTimer();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      if (this.config.backToInitialIntensity) {\n        this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity);\n        this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity);\n      } else {\n        this.gameObject.config.graphicLight.intensity = this.gameObject.graphicLight.intensity;\n        this.gameObject.config.diffusedLight.intensity = this.gameObject.diffusedLight.intensity;\n      }\n    });\n  }\n}\n","import WorldItem from '../WorldItem';\nimport Behaviours from '../../behaviours';\nimport EffectComponent from '../../../components/EffectComponent';\n\nexport default class LightSource extends WorldItem {\n  /**\n   * constructor of the class\n   * @param {Room} room - Room in which will be created the LightSource.\n   * @param {number} x - X position of the sprite.\n   * @param {number} y - Y position of the sprite.\n   * @param {string} texture - Name of the sprite for the LightSource.\n   * @param {string} layer - Name of the Layer in which will be put the LightSource.\n   * @param {Object} graphicLightConfig - Configuration of the graphic light of the LightSource.\n   * @param {number} graphicLightConfig.intensity - Intensity of the graphic light.\n   * @param {number} graphicLightConfig.radius - Radius of the graphic light.\n   * @param {Object} diffusedLightConfig - Configuration of the diffused light of the LightSource.\n   * @param {number} diffusedLightConfig.intensity - Intensity of the diffused light.\n   * @param {number} diffusedLightConfig.radius - Radius of the diffused light.\n   * @param {Object} offset - Offset of the graphic light respect the center of the sprite.\n   * @param {number} offset.x - X offset.\n   * @param {number} offset.y - Y offset.\n   * @param {boolean} [isOn=true] - Light created as switched on or off.\n   */\n  constructor(room, x, y, texture, layer, graphicLightConfig, diffusedLightConfig, offset, isOn = true) {\n    super(room, x, y, texture, layer, true, Behaviours.EXAMINABLE);\n\n    this.setGravityY(0);\n\n    this.initialConfig = {\n      graphicLight: graphicLightConfig,\n      diffusedLight: diffusedLightConfig,\n      offset: offset\n    };\n\n    this.config = this.initialConfig;\n\n    this.isOn = false;\n    if (isOn) {\n      this.turnOn();\n    }\n\n    // Register this LightSource instance to the Room's LightManager\n    this.room.lightSources.add(this);\n    this.effects = new EffectComponent(this);\n  }\n\n  /**\n   * Turn on the lights of the LightSource by creating new ones.\n   */\n  turnOn() {\n    if (!this.isOn) {\n      if (this.initialConfig.diffusedLight !== null) {\n        this.diffusedLight = this.room.lights.addLight(this.x + this.initialConfig.offset.x, this.y + this.initialConfig.offset.y, this.initialConfig.diffusedLight.radius).setIntensity(this.initialConfig.diffusedLight.intensity);\n        this.room.lightSources.diffusedLights.push(this.diffusedLight);\n      }\n\n      if (this.initialConfig.graphicLight !== null) {\n        this.graphicLight = this.room.lights.addLight(this.x + this.initialConfig.offset.x, this.y + this.initialConfig.offset.y, this.initialConfig.graphicLight.radius).setIntensity(this.initialConfig.graphicLight.intensity);\n        this.room.lightSources.graphicLights.push(this.graphicLight);\n      }\n\n      this.isOn = true;\n    }\n  }\n\n  /**\n     * Turn off the lights of the LightSource by deleting the existing ones.\n     * @param {boolean} [stopBehaviours=true] - If true, turning off the light stops all the behaviours.\n     */\n  turnOff(stopBehaviours = true) {\n\n    // if (stopBehaviours) this.lightBehaviour.stopAllBehaviours();\n    if (this.isOn) {\n      let diffusedLightindex = this.room.lightSources.diffusedLights.indexOf(this.diffusedLight);\n\n      if (diffusedLightindex > -1) {\n        this.room.lightSources.diffusedLights.splice(diffusedLightindex, 1);\n        this.room.lights.removeLight(this.diffusedLight);\n      }\n\n      let graphicLightindex = this.room.lightSources.graphicLights.indexOf(this.graphicLight);\n\n      if (graphicLightindex > -1) {\n        this.room.lightSources.graphicLights.splice(graphicLightindex, 1);\n        this.room.lights.removeLight(this.graphicLight);\n      }\n\n      this.isOn = false;\n    }\n  }\n\n  /**\n   * If the light source is on, turn it off and vice versa.\n   */\n  switch() {\n    if (this.isOn) this.turnOff();\n    else this.turnOn();\n  }\n}\n","const Utils = {\n  getScreenProps: require('./Utils')\n};\n\nmodule.exports = Utils;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * A Manager is a controller working at a Room level.\n * It is unique in its own Room, but it isn't in the whole game.\n * From Phaser library a Manager is handled as a Phaser.Plugins.ScenePlugin.\n * It has to be added to the game into Game.js through the specified method.\n * @see TDLib.Game#_setPlugins\n * @namespace TDLib.Managers\n */\n\nconst Managers = {\n  LayerManager: require('./layers/LayerManager'),\n  LightSourceManager: require('./light-sources/LightSourceManager'),\n  Manager: require('./Manager'),\n  UpdateManager: require('./updates/UpdateManager')\n};\n\nmodule.exports = Managers;\n","const Systems = {\n  CursorSystem: require('./cursors/CursorSystem'),\n  RoomSystem: require('./rooms/RoomSystem')\n};\n\nmodule.exports = Systems;\n","import Sprite from '../Sprite';\nimport Behaviour from '../behaviours';\nimport Components from '../../components';\nimport CONST from '../../const';\n\n/**\n * The characters namespace.\n * @namespace TDLib.Sprites.Characters\n * @since 1.0.0\n */\n\n/**\n * Class representing a Character.\n * @extends TDLib.Sprites.Sprite\n * @memberof TDLib.Sprites.Characters\n * @since 1.0.0\n */\nexport default class Character extends Sprite {\n  /**\n   * Create a new Character.\n   * @param {Room} room - The room where the character is created.\n   * @param {number} x - The x coordinate of the character.\n   * @param {number} y - The y coordinate of the character.\n   * @param {string} texture - The character's graphic.\n   * @param {string} layer - The character's layer.\n   */\n  constructor(room, x, y, texture, layer) {\n    super(...arguments, true, Behaviour.INTERACTIVE, { alphaTolerance: 1 });\n\n    /**\n     * The ActionComponent for this character.\n     * @type {Components.ActionComponent}\n     * @since 1.0.0\n     */\n    this.actions = new Components.ActionComponent(this);\n\n    /**\n     * The facing of the character.\n     * @type {TDLCharacter.FACING}\n     * @since 1.0.0\n     */\n    this.facing = CONST.RIGHT;\n  }\n\n  create() {\n    super.create();\n    // this.setPipeline('Light2D');\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport CONST from './const';\nimport Phaser from 'phaser';\n\n/**\n * @namespace TDLib\n */\n\nvar TDLib = {\n  Components: require('./components'),\n  Game: require('./boot/Game'),\n  Managers: require('./managers'),\n  Rooms: require('./rooms'),\n  Settings: require('./boot/Settings'),\n  Sprites: require('./sprites'),\n  Systems: require('./systems'),\n  Utils: require('./utils')\n};\n\n// Merge the consts\nTDLib = Phaser.Utils.Objects.Extend(false, TDLib, CONST);\n\n// Export the module\nmodule.exports = TDLib;\nglobal.TDLib = TDLib;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Component from './Component';\nimport Actions from '../sprites/actions';\n\n/**\n * @classdesc\n * Class representing the ActionComponent.\n * ActionComponent is responsible to handle all the actions for a Sprite.\n *\n * @class ActionComponent\n * @memberof TDLib.Components\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Sprites.Sprite} gameObject - The performer of the action.\n */\nexport default class ActionComponent extends Component {\n  constructor(gameObject) {\n    super(gameObject);\n\n    /**\n     * The performer of the action.\n     * @type {TDLib.Sprites.Sprite}\n     * @name TDLib.Components.ActionComponent#gameObject\n     * @since 1.0.0\n     */\n    this.gameObject = gameObject;\n\n    /**\n     * The default action to be played, AIdle by default.\n     * @type {TDLib.Components.Actions.Action}\n     * @name TDLib.Components.ActionComponent#defaultAction\n     * @since 1.0.0\n     */\n    this.defaultAction = new Actions.Idle(this, this.gameObject);\n\n    /**\n     * The queue of actions.\n     * @type {Array}\n     * @name TDLib.Components.ActionComponent#_queue\n     * @protected\n     * @since 1.0.0\n     */\n    this._queue = [this.defaultAction];\n    this._queue[0]._start();\n  }\n\n  /**\n   * Using this mode the queue is emptied and the new action is immediately performed.\n   * @name TDLib.Components.ActionComponent#DEFAULT_MODE\n   * @since 1.0.0\n   */\n  static get DEFAULT_MODE() {\n    return 0;\n  }\n\n  /**\n   * Using this mode the new action is added to the queue.\n   * @name TDLib.Components.ActionComponent#QUEUE_MODE\n   * @since 1.0.0\n   */\n  static get QUEUE_MODE() {\n    return 1;\n  }\n\n  /**\n   * Using this mode the currently performed action is paused and the new action is immediately performed.\n   * Then the paused action is resumed.\n   * @name TDLib.Components.ActionComponent#PAUSE_MODE\n   * @since 1.0.0\n   */\n  static get PAUSE_MODE() {\n    return 2;\n  }\n\n  /**\n   * Starts a new action or add that to the queue.\n   *\n   * @method TDLib.Components.ActionComponent#add\n   * @param {TDLib.Components.Sprites.Actions.Action} action - The action to add or execute.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   * @param {number} [mode=ActionComponent.DEFAULT_MODE] - The operating mode of the component.\n   * @since 1.0.0\n   */\n  add(Action, config, mode = ActionComponent.DEFAULT_MODE) {\n\n    let newAction = new Action(this, this.gameObject, config);\n\n    switch (mode) {\n      case ActionComponent.DEFAULT_MODE: {\n        this._queue[0]._abort();\n        this._queue = [];\n        this._queue.push(newAction);\n        this._queue[0]._start();\n      };\n        break;\n\n      case ActionComponent.QUEUE_MODE: {\n        this._queue.push(newAction);\n      };\n        break;\n\n      case ActionComponent.PAUSE_MODE: {\n        this._queue[0]._pause();\n        this._queue.unshift(newAction);\n        this._queue[0]._start();\n      };\n        break;\n    }\n\n    return newAction;\n  }\n\n  /**\n   * Remove a completed action from the queue.\n   *\n   * @method TDLib.Components.ActionComponent#_remove\n   * @protected\n   * @since 1.0.0\n   */\n  _remove() {\n    this._queue.shift();\n    if (this._queue.length <= 0) this._queue.push(this.defaultAction);\n    if (this._queue[0].isPaused) this._queue[0]._resume();\n    else this._queue[0]._start();\n  }\n\n  /**\n   * Update the currently performed action.\n   *\n   * @method TDLib.Components.ActionComponent#_update\n   * @protected\n   * @since 1.0.0\n   */\n  _update() {\n    if (this._queue.length <= 0) this._queue.push(this.defaultAction);\n    else if (this._queue.length > 1 && this._queue[0].name === 'Idle') {\n      this._queue.shift();\n      if (this._queue[0].isPaused) this._queue[0]._resume();\n      else this._queue[0]._start();\n    }\n\n    this._queue[0]._update();\n  }\n}\n","import Action from '../Action';\nimport WalkTo from '../walk-to/WalkTo';\n\nexport default class Examine extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new WalkTo(this, this.actor, this.config),\n        this.target.behaviours.examine.getAction(this)\n      ]\n    );\n  }\n}\n","const Settings = {\n  MICRO_MOVEMENT_RADIUS: 6\n};\n\nmodule.exports = Settings;\n","const Settings = {\n  WALK_VELOCITY: 100,\n  MICRO_MOVEMENT_RADIUS: 20\n};\n\nmodule.exports = Settings;\n","import Action from '../Action';\nimport CONST from '../../../const';\n\n/**\n * Class representing the idle action.\n * @extends TDLib.Components.Actions.Action\n * @memberof TDLib.Components.Actions\n */\nexport default class Idle extends Action {\n  /**\n   * Start a new idle action.\n   * @param {Components.ActionComponent|Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @param {TDLSprite} actor - The actor who performs the action.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   */\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      new Action.BaseAction(\n        this,\n        () => {\n          this.actor.body.setVelocity(0);\n          switch (this.actor.facing) {\n\n            case CONST.LEFT: {\n              this.actor.anims.play('idle');\n              // this.actor.anims.play('idleLeft');\n            }\n              break;\n\n            case CONST.RIGHT: {\n              this.actor.anims.play('idle');\n              // this.actor.anims.play('idleRight');\n            }\n              break;\n\n            // possibili altri casi di facing (es girato di spalle o da davanti)\n          }\n        }\n      )\n    );\n  }\n}\n","import Action from '../Action';\nimport WalkTo from '../walk-to/WalkTo';\n\nexport default class Interact extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new WalkTo(this, this.actor, this.config),\n        this.target.behaviours.interact.getAction(this)\n      ]\n    );\n  }\n}\n","import Action from '../Action';\nimport FaceTo from '../face-to/FaceTo';\n\nexport default class Observe extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new FaceTo(this, this.actor, this.config),\n        this.target.behaviours.observe.getAction(this)\n      ]\n    );\n  }\n}\n","import Action from '../Action';\nimport FaceTo from '../face-to/FaceTo';\nimport Settings from './Settings';\n\n// da cambiare e mettere tutta dentro l'AWalkTo e fare un Move to che distingua che azioni chiamare?\nexport default class RunTo extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new FaceTo(this, this.actor, this.config),\n        new Action.BaseAction(\n          this,\n          () => {\n            if (Math.abs(this.actor.x - this.target.x) > Settings.MICRO_MOVEMENT_RADIUS) {\n              if (this.actor.x < this.target.x) {\n                this.actor.anims.play('run');\n                // this.actor.anims.play('runRight');\n                this.actor.body.setVelocity(Settings.RUN_VELOCITY);\n              } else if (this.actor.x > this.target.x) {\n                this.actor.anims.play('run');\n                // this.actor.anims.play('runLeft');\n                this.actor.body.setVelocity(-Settings.RUN_VELOCITY);\n              }\n              console.log('start to run to ', config.target.x);\n            } else {\n              this.finish();\n            }\n          },\n          () => {\n            this.actor.body.setVelocity(0);\n          },\n          () => {\n            if ((this.actor.x - this.target.x) * this.actor.body.velocity.x > 0) this.finish();\n          }\n        )\n      ]\n    );\n  }\n}\n","const Settings = {\n  RUN_VELOCITY: 240,\n  MICRO_MOVEMENT_RADIUS: 20\n};\n\nmodule.exports = Settings;\n","const CONST = {\n  EXAMINABLE: 'EXAMINABLE',\n  INERT: 'INERT',\n  INTERACTIVE: 'INTERACTIVE',\n  TALKABLE: 'TALKABLE',\n  INVENTORY: 'INVENTORY',\n\n  DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE: 0.05,\n  DEFAULT_OBSERVE_TEXT: 'Observe default text',\n  DEFAULT_NO_LIGHT_OBSERVE_TEXT: 'NoLightObserve default text',\n  DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT: 0.04,\n  DEFAULT_EXAMINE_OR_INTERACT_TEXT: 'ExamineOrInteract default text',\n  DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT: 'NoLightExamineOrInteract default text'\n};\n\nmodule.exports = CONST;\n","import Behaviour from '../Behaviour';\nimport Action from '../../actions/Action';\n\nexport default class Examinable extends Behaviour {\n  constructor(component) {\n    super(component);\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Action.BaseAction(\n      invoker,\n      () => {\n        // Fare i controlli su quanta luce c'è nella stanza!\n        if (this.checkLight(this.gameObject.minLightLevelToExamineOrInteract)) console.log(this.gameObject.examineOrInteractText);\n        else console.log(this.gameObject.noLightExamineOrInteractText);\n        invoker.finish();\n      }\n    );\n  }\n}\n","import Behaviour from '../Behaviour';\nimport Action from '../../actions/Action';\n\nexport default class Interactive extends Behaviour {\n  constructor(component) {\n    super(component);\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Action.BaseAction(\n      invoker,\n      () => {\n        // Fare i controlli su quanta luce c'è nella stanza!\n        if (this.checkLight(this.gameObject.minLightLevelToExamineOrInteract)) console.log(this.gameObject.examineOrInteractText);\n        else console.log(this.gameObject.noLightExamineOrInteractText);\n        invoker.finish();\n      }\n    );\n  }\n}\n","import Behaviour from '../Behaviour';\nimport Actions from '../../actions';\nimport Settings from './Settings';\n\nexport default class Observable extends Behaviour {\n  constructor(component) {\n    super(component);\n\n    this._timer;\n  }\n\n  add() {\n    super.add();\n\n    this.gameObject.on('pointerover', function (pointer) {\n      this.cursors.setCursor(this.gameObject);\n\n      this._timer = this.gameObject.room.time.addEvent({\n        delay: Settings.DEFAULT_MIN_TIME_TO_OBSERVE,\n        callback: () => {\n          if (this.gameObject !== this.room.player && !this.room.player.isBlocked) this.room.player.actions.add(Actions.Observe, { target: this.gameObject });\n        },\n        callbackScope: this\n      });\n    }.bind(this));\n\n    this.gameObject.on('pointerout', function (pointer) {\n      this._timer.remove(false);\n      this.cursors.setCursor();\n    }.bind(this));\n  }\n\n  /**\n   * Delete the timer which starts the AObserve action.\n   */\n  abort() {\n    this._timer.remove(false);\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Actions.Action.BaseAction(\n      invoker,\n      () => {\n        // Fare i controlli su quanta luce c'è nella stanza!\n        if (this.checkLight(this.gameObject.minLightLevelToObserve)) console.log(this.gameObject.observeText);\n        else console.log(this.gameObject.noLightObserveText);\n        invoker.finish();\n      }\n    );\n  }\n}\n","const Settings = {\n  DEFAULT_MIN_TIME_TO_OBSERVE: 1200\n};\n\nmodule.exports = Settings;\n","export default class Inventory {\n  constructor() {\n\n  }\n}\n","const LightEffects = {\n  HardFlickering: require('./HardFlickering'),\n  HardFlickeringAndTrembling: require('./HardFlickeringAndTrembling'),\n  LightEffect: require('./LightEffect'),\n  RadiusFlickering: require('./RadiusFlickering'),\n  SoftFlickering: require('./SoftFlickering'),\n  SoftFlickeringAndTrembling: require('./SoftFlickeringAndTrembling'),\n  Trembling: require('./Trembling')\n};\n\nmodule.exports = LightEffects;\n","import LightEffect from './LightEffect';\nimport HardFlickering from './HardFlickering';\nimport Trembling from './Trembling';\n\nexport default class HardFlickeringAndTrembling extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.5);\n\n    this.hardFlickering = new HardFlickering(this.invoker, this.config);\n    this.trembling = new Trembling(this.invoker, this.config);\n  }\n\n  play() {\n    super.play(() => {\n      this.hardFlickering.play();\n      this.trembling.play();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      this.hardFlickering.stop();\n      this.trembling.stop();\n    });\n  }\n}\n","import LightEffect from './LightEffect';\n\nexport default class RadiusFlickering extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.9);\n\n    if (!this.config.minTime) this.config.minTime = 10;\n    if (!this.config.maxTime) this.config.maxTime = 100;\n    if (!this.config.minPercentageIntensity) this.config.minPercentageIntensity = 0.8;\n    if (!this.config.maxPercentageIntensity) this.config.maxPercentageIntensity = 1;\n    if (!this.config.minPercentageRadius) this.config.minPercentageRadius = 0.8;\n    if (!this.config.maxPercentageRadius) this.config.maxPercentageRadius = 1;\n    if (!this.config.backToInitialIntensity) this.config.backToInitialIntensity = true;\n    if (!this.config.backToInitialRadius) this.config.backToInitialRadius = true;\n  }\n\n  play() {\n    super.play(() => {\n      var setTimer = () => {\n        this.gameObject.room.time.addEvent({\n          delay: Math.floor(Math.random() * (this.config.maxTime - this.config.minTime)) + this.config.minTime,\n          callback: () => {\n            if (!this.stopped) {\n              let newIntensityPercentage = Math.floor((this.config.minPercentageIntensity + Math.random() * (this.config.maxPercentageIntensity - this.config.minPercentageIntensity)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity * newIntensityPercentage);\n              this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity * newIntensityPercentage);\n              let newRadiusPercentage = Math.floor((this.config.minPercentageRadius + Math.random() * (this.config.maxPercentageRadius - this.config.minPercentageRadius)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setRadius(this.gameObject.config.graphicLight.radius * newRadiusPercentage);\n\n              setTimer();\n            }\n\n          },\n          callbackScope: this,\n          repeat: 0\n        });\n      };\n\n      setTimer();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      if (this.config.backToInitialIntensity) {\n        this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity);\n        this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity);\n      } else {\n        this.gameObject.config.graphicLight.intensity = this.gameObject.graphicLight.intensity;\n        this.gameObject.config.diffusedLight.intensity = this.gameObject.diffusedLight.intensity;\n      }\n      if (this.config.backToInitialRadius) {\n        this.gameObject.graphicLight.setRadius(this.gameObject.config.graphicLight.radius);\n      } else {\n        this.gameObject.config.graphicLight.radius = this.gameObject.graphicLight.radius;\n      }\n    });\n  }\n}\n","import LightEffect from './LightEffect';\nimport SoftFlickering from './SoftFlickering';\nimport Trembling from './Trembling';\n\nexport default class SoftDefaultFlickeringAndtrembling extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.5);\n\n    this.softFlickering = new SoftFlickering(this.invoker, this.config);\n    this.trembling = new Trembling(this.invoker, this.config);\n  }\n\n  play() {\n    super.play(() => {\n      this.softFlickering.play();\n      this.trembling.play();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      this.softFlickering.stop();\n      this.trembling.stop();\n    });\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Settings from './Settings';\nimport DebugHeader from './DebugHeader';\nimport Utils from '../utils';\nimport Managers from '../managers';\nimport Systems from '../systems';\nimport Boot from './Boot';\nimport Phaser from 'phaser';\nimport filterObj from 'filter-obj';\n\n/**\n * @classdesc\n * The TDLib.Game instance is the main controller for the entire game. It create an instace\n * of Phaser.Game with a default configuration of various parameters.\n *\n * @class Game\n * @memberof TDLib\n * @constructor\n * @since 1.0.0\n *\n * @param {Object} [config] - The configuration object for your TDLib Game instance.\n * @param {Object} [config.title] - The title of your game.\n * @param {Object} [config.url] - The url of your online game or website.\n * @param {Object} [config.version] - The version of your game.\n */\nexport default class Game {\n  constructor(config) {\n    /**\n     * The parsed Game Configuration object.\n     *\n     * The values stored within this object are read-only and should not be changed at run-time.\n     *\n     * @name TDLib.Game#config\n     * @type {Object}\n     * @readonly\n     * @since 1.0.0\n     */\n    this.config = config;\n    this._setScreenConfig();\n    this._setPhysicsConfig();\n    this._setPlugins();\n    this._setBoot();\n    this._setHeaderProps();\n    this._finalizeConfig();\n\n    /** ************ TODO: Aggiungere il device e la funzione per determinarlo **************/\n    Settings.STARTING_ROOM = this.config.startingRoom;\n    Settings.GAME_SPRITES = this._setGameSprites(Phaser.Utils.Objects.Clone(this.config.sprites));\n    console.log(this.config.sprites, Settings.GAME_SPRITES);\n    Settings.GAME = new Phaser.Game(this.config);\n\n    DebugHeader(Settings.GAME);\n    return Settings.GAME;\n  }\n\n  /**\n   * This method is called automatically and configure the screen proportions and settings for the Game.\n   *\n   * @method TDLib.Game#_setScreenConfig\n   * @protected\n   * @since 1.0.0\n   */\n  _setScreenConfig() {\n    Settings.SCREEN_PROPS = Utils.getScreenProps();\n\n    this.config.width = Settings.SCREEN_PROPS.calculatedWidth;\n    this.config.height = Settings.SCREEN_PROPS.calculatedHeight;\n    this.config.zoom = Settings.SCREEN_PROPS.calculatedZoom;\n\n    this.config.autoResize = false;\n    this.config.backgroundColor = '#000000';\n    this.config.pixelArt = true;\n  }\n\n  /**\n   * This method is called automatically and configure physics for the Game using the Arcade engine of Phaser.\n   *\n   * @method TDLib.Game#_setPhysicsConfig\n   * @protected\n   * @since 1.0.0\n   */\n  _setPhysicsConfig() {\n    this.config.physics = {\n      default: 'arcade',\n      arcade: {\n        debug: false,\n        gravity: { y: 0, x: 0 }\n      }\n    };\n  }\n\n  /**\n   * This method is called automatically and configure the plugins for the Game.\n   * Global plugins are called Systems.\n   * Scene plugins are called Managers.\n   *\n   * @method TDLib.Game#_setPlugins\n   * @protected\n   * @since 1.0.0\n   */\n  _setPlugins() {\n    this.config.plugins = {\n      // Systems\n      global: [\n        { key: 'RoomSystem', plugin: Systems.RoomSystem, start: false, mapping: 'rooms' },\n        { key: 'CursorSystem', plugin: Systems.CursorSystem, start: false, mapping: 'cursors' }\n      ],\n      // Managers\n      scene: [\n        { key: 'UpdateManager', plugin: Managers.UpdateManager, mapping: 'updates' },\n        { key: 'LightSourceManager', plugin: Managers.LightSourceManager, mapping: 'lightSources' },\n        { key: 'LayerManager', plugin: Managers.LayerManager, mapping: 'layers' }\n      ]\n    };\n  }\n\n  /**\n   * This method is called automatically and configure the Phaser.Scene Boot to start the Systems.\n   *\n   * @method TDLib.Game#_setBoot\n   * @protected\n   * @since 1.0.0\n   */\n  _setBoot() {\n    this.config.scene = [Boot];\n  }\n\n  /**\n   * This method is called automatically and turn off the default Phaser header/banner.\n   *\n   * @method TDLib.Game#_setHeaderProps\n   * @protected\n   * @since 1.0.0\n   */\n  _setHeaderProps() {\n    this.config.banner = false;\n  }\n\n  _setGameSprites(obj) {\n    function haveChildObject(father) {\n      let flag = false;\n\n      if (Object.keys(filterObj(obj, (key, value) => (\n        // eslint-disable-next-line eqeqeq\n        typeof value == 'object' &&\n        // eslint-disable-next-line eqeqeq\n        typeof value.default != 'function' &&\n        Object.keys(value).length > 0))).length > 0) flag = true;\n      return flag;\n    }\n\n    function getChildrenFromFather(father) {\n      let output = [];\n\n      for (let key in father) {\n        output.push(father[key]);\n      }\n\n      return output;\n    }\n\n    if (haveChildObject(obj)) {\n      // eslint-disable-next-line eqeqeq\n      let objectsObj = filterObj(obj, (key, value) => (typeof value == 'object' && typeof value.default != 'function'));\n\n      let temp = getChildrenFromFather(objectsObj);\n\n      temp.forEach(element => {\n        obj = Phaser.Utils.Objects.Extend(false, obj, element);\n      });\n\n      for (let key in objectsObj) delete obj[key];\n\n      return this._setGameSprites(obj);\n    }\n    return obj;\n\n  }\n\n  /**\n   * This method is called automatically and finalize the config passed to Phaser.Game.\n   *\n   * @method TDLib.Game#_finalizeConfig\n   * @protected\n   * @since 1.0.0\n   */\n  _finalizeConfig() {\n    this.config.type = Phaser.WEBGL;\n    this.config.maxLights = 20;\n    this.config.parent = 'game';\n    this.config.disableContextMenu = true;\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nvar CONST = require('../const');\nvar Settings = require('./Settings');\n\n/**\n * Called automatically by Phaser.Game and responsible for creating the console.log debug header.\n *\n * You can customize or disable the header via the Game Config object.\n *\n * @function TDLib.Boot.DebugHeader\n * @since 1.0.0\n *\n * @param {TDLib.Game} game - The TDLib.Game instance which will output this debug header.\n */\nvar DebugHeader = function (game) {\n  let config = game.config;\n\n  config.bannerBackgroundColor = '#0002e6';\n  config.bannerTextColor = '#ffffff';\n  config.hidePhaser = false;\n\n  let renderType = 'WebGL';\n\n  if (config.renderType !== 2) {\n    renderType = 'NULL';\n  }\n\n  let audioConfig = config.audio;\n\n  let deviceAudio = game.device.audio;\n\n  let audioType;\n\n  if (deviceAudio.webAudio && !(audioConfig && audioConfig.disableWebAudio)) {\n    audioType = 'Web Audio';\n  } else if ((audioConfig && audioConfig.noAudio) || (!deviceAudio.webAudio && !deviceAudio.audioData)) {\n    audioType = 'No Audio';\n  } else {\n    audioType = 'HTML5 Audio';\n  }\n\n  if (!game.device.browser.ie) {\n    let c = '';\n\n    let args = [c];\n\n    if (Array.isArray(config.bannerBackgroundColor)) {\n      let lastColor;\n\n      config.bannerBackgroundColor.forEach(function (color) {\n        c = c.concat('%c ');\n\n        args.push('background: ' + color);\n\n        lastColor = color;\n\n      });\n\n      //  inject the text color\n      args[args.length - 1] = 'color: ' + config.bannerTextColor + '; background: ' + lastColor;\n    } else {\n      c = c.concat('%c ');\n\n      args.push('color: ' + config.bannerTextColor + '; background: ' + config.bannerBackgroundColor);\n    }\n\n    //  URL link background color (always white)\n    args.push('background: #fff');\n\n    if (config.gameTitle) {\n      c = c.concat(config.gameTitle);\n\n      if (config.gameVersion) {\n        c = c.concat(' v' + config.gameVersion);\n      }\n\n      if (!config.hidePhaser) {\n        c = c.concat(' / ');\n      }\n    }\n\n    if (!config.hidePhaser) {\n      c = c.concat('TDLib v' + CONST.VERSION + ' / Phaser v' + CONST.PHASER_VERSION);\n      c = c.concat(' (' + renderType + ' | ' + audioType + ' | ' + Settings.DEVICE + ')');\n    }\n\n    c = c.concat(' %c ' + config.gameURL);\n\n    //  Inject the new string back into the args array\n    args[0] = c;\n\n    console.log.apply(console, args);\n  }\n};\n\nmodule.exports = DebugHeader;\n","import Settings from '../boot/Settings';\n\nconst getScreenProps = () => {\n  var returnValue = {};\n\n  // cz : ah = 1 : mh\n  if (Settings.DEVICE === 'MOBILE') {\n    returnValue.availHeight = window.innerHeight;\n    returnValue.availWidth = window.innerWidth;\n    returnValue.calculatedZoom = Math.floor(returnValue.availHeight / ((Settings.ROOM_HEIGHT_IN_TILE + Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE + Settings.ROOM_FRAME_IN_TILES_MOBILE * 2) * Settings.TILE_SIZE) * 100) / 100;\n  } else {\n    returnValue.availHeight = screen.height;\n    returnValue.availWidth = screen.width;\n    returnValue.calculatedZoom = Math.floor(returnValue.availHeight / ((Settings.ROOM_HEIGHT_IN_TILE + Settings.INVENTORY_HEIGHT_IN_TILES_DESKTOP + Settings.ROOM_FRAME_IN_TILES_DESKTOP * 2) * Settings.TILE_SIZE) * 100) / 100;\n  }\n\n  console.log('ZOOM: ' + returnValue.calculatedZoom);\n\n  // Sono le dimensioni riaggiustate rispetto allo zoom scelto\n  // ch : ah = 1 : cz\n  returnValue.calculatedHeight = Math.ceil(returnValue.availHeight / returnValue.calculatedZoom);\n  returnValue.calculatedWidth = Math.ceil(returnValue.availWidth / returnValue.calculatedZoom);\n\n  console.log('AVAIL-H: ' + returnValue.availHeight + '\\nCALC-H: ' + returnValue.calculatedHeight);\n  console.log('AVAIL-W: ' + returnValue.availWidth + '\\nCALC-W: ' + returnValue.calculatedWidth);\n\n  return returnValue;\n};\n\nmodule.exports = getScreenProps;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Manager from '../Manager';\nimport Settings from './Settings';\n\n/**\n * @classdesc\n * Class representing a LayerManager, responsible to manage\n * the layers order, in order to have all the elements rendered correctly.\n * Layers are Phaser.GameObjects.Group.\n *\n * @class LayerManager\n * @extends TDLib.Managers.Manager\n * @memberof TDLib.Managers\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Rooms.Room|Phaser.Scene} room - The room running the Manager.\n * @param {Phaser.Plugins.PluginManager} - A reference to Phaser PluginManager.\n */\nexport default class LayerManager extends Manager {\n  constructor(room, pluginManager) {\n    super(room, pluginManager);\n    /**\n     * The size in cells of each Layer.\n     * @type {number}\n     * @name TDLib.Managers.LayerManager#layerSize\n     * @since 1.0.0\n     */\n    this.layerSize = Settings.layerSize;\n\n    /**\n     * The starting depth of Layers.\n     * @type {number}\n     * @name TDLib.Managers.LayerManager#startingDepth\n     * @since 1.0.0\n     */\n    this.strartingDepth = Settings.startingDepth;\n  }\n\n  /**\n   * @lends TDLib.Managers.Manager.boot\n   */\n  boot() {\n    super.boot();\n    /**\n     * The Layer containing the background wall.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#backgroundLayer\n     * @since 1.0.0\n     */\n    this.backgroundLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the rear doors.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#rearDoorsLayer\n     * @since 1.0.0\n     */\n    this.rearDoorsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the objects fixed to the background wall.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#wallFurnitureLayer\n     * @since 1.0.0\n     */\n    this.wallFurnitureLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the objects in the room.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#roomFurnitureLayer\n     * @since 1.0.0\n     */\n    this.roomFurnitureLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the side doors.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#sideDoorsLayer\n     * @since 1.0.0\n     */\n    this.sideDoorsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the NPCs.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#playerLayer\n     * @since 1.0.0\n     */\n    this.npcLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the Player.\n     * @type {Phaser.GameObjects.Group}\n     * @since 1.0.0\n     */\n    this.playerLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the cieling objects from the roof.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#cielingObjectsLayer\n     * @since 1.0.0\n     */\n    this.cielingObjectsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the front doors.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#frontDoorsLayer\n     * @since 1.0.0\n     */\n    this.frontDoorsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the lateral walls.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#wallsLayer\n     * @since 1.0.0\n     */\n    this.wallsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the lateral walls black mask.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#wallsMaskLayer\n     * @since 1.0.0\n     */\n    this.wallsMaskLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the overall darkness mask.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#overallDarknessLayer\n     * @since 1.0.0\n     */\n    this.overallDarknessLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the border black masks.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#borderMasksLayer\n     * @since 1.0.0\n     */\n    this.borderMasksLayer = this.room.add.group();\n  }\n\n  /**\n   * Set the correct depth for each Layer in the right order.\n   * @method TDLib.Managers.LayerManager#setLayersDepth\n   * @since 1.0.0\n   */\n  setLayersDepth() {\n    let i = this.strartingDepth;\n\n    this.backgroundLayer.setDepth(this.layerSize * i);\n    i++;\n    this.rearDoorsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.wallFurnitureLayer.setDepth(this.layerSize * i);\n    i++;\n    this.roomFurnitureLayer.setDepth(this.layerSize * i);\n    i++;\n    this.sideDoorsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.npcLayer.setDepth(this.layerSize * i);\n    i++;\n    this.playerLayer.setDepth(this.layerSize * i);\n    i++;\n    this.cielingObjectsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.frontDoorsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.wallsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.wallsMaskLayer.setDepth(this.layerSize * i);\n    i++;\n    this.overallDarknessLayer.setDepth(this.layerSize * i);\n    i++;\n    this.borderMasksLayer.setDepth(this.layerSize * i);\n    i++;\n  }\n}\n","const Settings = {\n  layerSize: 10,\n  startingDepth: 0\n};\n\nmodule.exports = Settings;\n","import Manager from '../Manager';\nimport GlobalSettings from '../../boot/Settings';\n\nexport default class LightSourceManager extends Manager {\n  constructor(room, pluginManager) {\n    super(room, pluginManager);\n\n    this.graphicLights = [];\n    this.diffusedLights = [];\n  }\n\n  boot() {\n    super.boot();\n    this.lightSources = this.room.add.group();\n  }\n\n  add(source) {\n    this.lightSources.add(source, true);\n    this.lightSources.getChildren().forEach(lightSource => {\n      lightSource.setPipeline('Light2D');\n    });\n\n    return source;\n  }\n\n  // Le luci che flickerano o con comportamenti strani vanno contate?\n  calculateLightsContribuitePoint(target) {\n    let singleLightContributeAccumulator = 0;\n\n    this.lightSources.getChildren().forEach(light => {\n      if (light.isOn) {\n        let singleLightContribute = light.config.diffusedLight.intensity / (Math.abs(light.x + light.config.offset.x - target.x) ^ 2);\n\n        // COSE\n        if (light.effects.currentEffect) {\n          singleLightContribute *= light.effects.currentEffect.contributeFactor;\n        }\n\n        singleLightContributeAccumulator += singleLightContribute;\n      }\n    });\n\n    return Math.floor(singleLightContributeAccumulator * 10000) / 1000;\n  }\n\n  calculateAverageLightsContribute() {\n    let singleLightIntensityAccumulator = 0;\n\n    this.diffusedLights.forEach(light => {\n      singleLightIntensityAccumulator += light.intensity;\n    });\n    let averageLightsContribute = 0;\n\n    if (singleLightIntensityAccumulator !== 0) averageLightsContribute = Math.floor((singleLightIntensityAccumulator * 10000 / this.room.layers.wallsLayer.width / GlobalSettings.TILE_SIZE) * 100) / 100 + 0.3;\n    return averageLightsContribute;\n  }\n}\n","import Manager from '../Manager';\r\n\r\n/**\r\n * Class representing the update plugin.\r\n * @extends TDLib.Plugins.TDLRoomPlugin\r\n * @memberof TDLib.Plugins.RoomPlugins\r\n * @since 1.0.0\r\n */\r\nexport default class UpdateManager extends Manager {\r\n  /**\r\n   * Create a new UpdatePlugin.\r\n   * @param {TDLib.Rooms.Room} room - The room in which the layer manager operates.\r\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the plugin manager.\r\n   */\r\n  constructor(room, pluginManager) {\r\n    super(room, pluginManager);\r\n  }\r\n\r\n  /**\r\n   * Boot the plugin.\r\n   * @since 1.0.0\r\n   */\r\n  boot() {\r\n    super.boot();\r\n    const events = this.systems.events;\r\n\r\n    this.gameObjects = new Phaser.Structs.Set();\r\n\r\n    events.on('update', this._sceneUpdate, this);\r\n    events.on('shutdown', this._sceneShutdown, this);\r\n    events.once('destroy', this._sceneDestroy, this);\r\n  }\r\n\r\n  /**\r\n   * Update every game object.\r\n   * @param {*} time\r\n   * @param {*} delta\r\n   * @private\r\n   * @since 1.0.0\r\n   */\r\n  _sceneUpdate(time, delta) {\r\n    this.gameObjects.iterateLocal('update', time, delta);\r\n  }\r\n\r\n  /**\r\n   * Called at the shutdown of the scene.\r\n   * @private\r\n   * @since 1.0.0\r\n   */\r\n  _sceneShutdown() {\r\n    this.gameObjects.clear();\r\n  }\r\n\r\n  /**\r\n   * Called when the scene is destroyed.\r\n   * @private\r\n   * @since 1.0.0\r\n   */\r\n  _sceneDestroy() {\r\n    const events = this.systems.events;\r\n\r\n    events.off('update', this._scenePostUpdate, this);\r\n    events.off('shutdown', this._sceneShutdown, this);\r\n    events.off('destroy', this._sceneDestroy, this);\r\n\r\n    this.gameObjects = null;\r\n    this.scene = null;\r\n    this.systems = null;\r\n  }\r\n\r\n  /**\r\n   * Add an object to the global update loop of the game.\r\n   * @param {TDLib.Sprites.TDLSprite} obj - The object to add to the update loop.\r\n   * @since 1.0.0\r\n   */\r\n  add(obj) {\r\n    obj.once('destroy', this.remove, this);\r\n    this.gameObjects.set(obj);\r\n  }\r\n\r\n  /**\r\n   * Add multiple objects to the global update loop of the game.\r\n   * @param {TDLib.Sprites.TDLSprite[]} obj - The objects to add to the update loop.\r\n   * @since 1.0.0\r\n   */\r\n  addMultiple(objs) {\r\n    objs.forEach(this.add, this);\r\n  }\r\n\r\n  /**\r\n   * Remove an object from the global update loop of the game.\r\n   * @param {TDLib.Sprites.TDLSprite} obj - The object to remove from the update loop.\r\n   * @since 1.0.0\r\n   */\r\n  remove(obj) {\r\n    obj.off('destroy', this.remove, this);\r\n    this.gameObjects.delete(obj);\r\n  }\r\n}\r\n","import Actions from '../../sprites/actions';\nimport Behaviours from '../../sprites/behaviours';\nimport Phaser from 'phaser';\n\n/**\n * Class representing the CursorSystem, able to select the correct graphic for the cursor and to handle pointer events.\n * @extends Phaser.Plugins.BasePlugin\n * @memberof TDLib.Plugins.GlobalPlugins\n * @since 1.0.0\n */\nexport default class CursorSystem extends Phaser.Plugins.BasePlugin {\n  /**\n   * Create a new CursorSystem.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the plugin manager.\n   */\n  constructor(pluginManager) {\n    super(pluginManager);\n\n    /**\n     * The scene containing the cursor.\n     * @type {CursorSystem.CURSOR_SCENE}\n     * @since 1.0.0\n     */\n    this.cursorScene;\n\n    /**\n     * The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n     * @type {Phaser.Scenes.SceneManager}\n     * @since 1.0.0\n     */\n    this.sceneManager;\n\n    /**\n     * Save the last sprite who called the function setCursor().\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.lastTarget;\n  }\n\n  /**\n   * It's a Phaser.Scene representing the scene containing the cursor which will be put on the rooms level.\n   * @typedef {TDLib.Plugins.GlobalPlugins.CursorSystem.CursorScene}\n   * @extends {Phaser.Scenes.Scene}\n   * @since 1.0.0\n   */\n  static get CursorScene() {\n    return class CursorScene extends Phaser.Scene {\n      constructor() {\n        super(CursorSystem.CURSOR_SCENE_KEY);\n\n        this.cursor;\n      }\n\n      preload() {\n        this.load.image(CursorSystem.EXAMINABLE_CURSOR, 'assets/Cursors/CursorExamine.png');\n        this.load.image(CursorSystem.HOLD_CURSOR, 'assets/Cursors/CursorHold.png');\n        this.load.image(CursorSystem.INTERACTIVE_CURSOR, 'assets/Cursors/CursorInteract.png');\n        this.load.image(CursorSystem.DEFAULT_CURSOR, 'assets/Cursors/CursorMove.png');\n        this.load.image(CursorSystem.TALKABLE_CURSOR, 'assets/Cursors/CursorTalk.png');\n        this.load.image(CursorSystem.CHOICE_CURSOR, 'assets/Cursors/CursorChoice.png');\n        this.load.image(CursorSystem.CHOICE_PRESSED_CURSOR, 'assets/Cursors/CursorChoicePressed.png');\n      }\n\n      create() {\n        this.input.setDefaultCursor('none');\n        this.cursor = this.add.image(0, 0, CursorSystem.DEFAULT_CURSOR).setOrigin(0.4, 0.33).setDepth(100000);\n      }\n\n      update() {\n        this.cursor.setPosition(this.input.activePointer.x, this.input.activePointer.y);\n      }\n    };\n  }\n\n  /**\n   * The key of the scene containing the cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get CURSOR_SCENE_KEY() {\n    return 'CursorScene';\n  }\n\n  /**\n   * The key of the inert cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get DEFAULT_CURSOR() {\n    return 'cursorMove';\n  }\n\n  /**\n   * The key of the examine cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get EXAMINABLE_CURSOR() {\n    return 'cursorExamine';\n  }\n\n  /**\n   * The key of the interact cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get INTERACTIVE_CURSOR() {\n    return 'cursorInteract';\n  }\n\n  /**\n   * The key of the hold cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get HOLD_CURSOR() {\n    return 'cursorHold';\n  }\n\n  /**\n   * The key of the talk cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get TALKABLE_CURSOR() {\n    return 'cursorTalk';\n  }\n\n  /**\n   * The key of the choice cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get CHOICE_CURSOR() {\n    return 'cursorChoice';\n  }\n\n  /**\n   * The key of the choice pressed cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get CHOICE_PRESSED_CURSOR() {\n    return 'cursorChoicePressed';\n  }\n\n  /**\n   * Configure the cursor manager.\n   * @param {Phaser.Scenes.SceneManager} sceneManager - The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n   * @since 1.0.0\n   */\n  configure(sceneManager) {\n    this.sceneManager = sceneManager;\n    this.cursorScene = this.sceneManager.add(CursorSystem.CURSOR_SCENE_KEY, CursorSystem.CursorScene, true);\n  }\n\n  /**\n   * Handle the pointer down event.\n   * @param {TDLib.Sprites.Characters.TDLCharacter} player - The current player.\n   * @since 1.0.0\n   */\n  pointerDown(player, pointer = null) {\n    if (!player.isBlocked) {\n      switch (this.cursorScene.cursor.texture.key) {\n        case CursorSystem.DEFAULT_CURSOR: {\n          if (typeof player.room.input.activePointer.camera !== 'undefined') player.actions.add(Actions.WalkTo, { target: { x: player.room.input.activePointer.worldX } });\n        }\n          break;\n\n        case CursorSystem.EXAMINABLE_CURSOR: {\n          this.lastTarget.behaviours.observe.abort();\n          player.actions.add(Actions.Examine, { target: this.lastTarget });\n        }\n          break;\n\n        case CursorSystem.INTERACTIVE_CURSOR: {\n          this.lastTarget.behaviours.observe.abort();\n          player.actions.add(Actions.Interact, { target: this.lastTarget });\n        }\n          break;\n\n        case CursorSystem.TALKABLE_CURSOR: {\n          player.actions.add(Actions.TalkTo, { target: this.lastTarget });\n        }\n          break;\n      }\n    }\n  }\n\n  /**\n   * Set the correct cursor for the target selected.\n   * @param {Object} target - The target of the pointer.sceneManager\n   * @param {TDLib.Components.ActionComponent} target.behaviours - The SpriteBehaviourComponent of the target.\n   * @param {string} [target.behaviours.type=TDLib.Sprites.Behaviours.INERT] - The type of the sprite behaviour for this target.\n   * @since 1.0.0\n   */\n  setCursor(target = { behaviours: { type: Behaviours.INERT }, room: {} }) {\n    if ('room' in target && target !== target.room.player) {\n      switch (target.behaviours.type) {\n        case Behaviours.INERT: {\n          this.cursorScene.cursor.setTexture(CursorSystem.DEFAULT_CURSOR).setOrigin(0.4, 0.33);\n        }\n          break;\n\n        case Behaviours.EXAMINABLE: {\n          this.cursorScene.cursor.setTexture(CursorSystem.EXAMINABLE_CURSOR).setOrigin(0.33, 0.29);\n        }\n          break;\n\n        case Behaviours.INTERACTIVE: {\n          this.cursorScene.cursor.setTexture(CursorSystem.INTERACTIVE_CURSOR).setOrigin(0.4, 0.33);\n        }\n          break;\n\n        case Behaviours.TALKABLE: {\n          this.cursorScene.cursor.setTexture(CursorSystem.TALKABLE_CURSOR);\n        }\n          break;\n      }\n\n      this.lastTarget = target;\n    }\n  }\n\n  /**\n   * Show the cursor.\n   * @since 1.0.0\n   */\n  showCursor() {\n    this.cursorScene.cursor.setVisible(true);\n  }\n\n  /**\n   * Hide the cursor.\n   * @since 1.0.0\n   */\n  hideCursor() {\n    this.cursorScene.cursor.setVisible(false);\n  }\n}\n","import Phaser from 'phaser';\n\n/**\n * Class representing the manager of the rooms\n * @extends Phaser.Plugins.BasePlugin\n * @memberof TDLib.Plugins.GlobalPlugins\n */\nexport default class RoomSystem extends Phaser.Plugins.BasePlugin {\n  /**\n   * Create a new RoomSystem.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the plugin manager.\n   */\n  constructor(pluginManager) {\n    super(pluginManager);\n\n    /**\n     * The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n     * @type {Phaser.Scenes.SceneManager}\n     */\n    this.sceneManager = {};\n  }\n\n  /**\n   * Add (and start) a new room to the RoomSystem.\n   * @param {TDLib.Rooms.Room} room - The class of the new room to add.\n   * @param {boolean} [autoStart=true] - Specify if the room has to start.\n   */\n  add(room, autoStart = true) {\n    console.log('Added room:', room.name);\n    this.sceneManager.add(room.name, room, autoStart);\n  }\n\n  /**\n   * Configure the RoomSystem.\n   * @param {Phaser.Scenes.SceneManager} sceneManager - The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n   */\n  configure(sceneManager) {\n    this.sceneManager = sceneManager;\n  }\n}\n","import Phaser from 'phaser';\nimport Settings from './Settings';\n\nexport default class Boot extends Phaser.Scene {\n  constructor() {\n    super('Boot');\n  }\n\n  preload() {\n\n  }\n\n  create() {\n    this.cursors.configure(Settings.GAME.scene);\n    this.rooms.configure(Settings.GAME.scene);\n    this.rooms.add(Settings.STARTING_ROOM); // TEMP NAME\n  }\n}\n","'use strict';\nmodule.exports = function (obj, predicate) {\n\tvar ret = {};\n\tvar keys = Object.keys(obj);\n\tvar isArr = Array.isArray(predicate);\n\n\tfor (var i = 0; i < keys.length; i++) {\n\t\tvar key = keys[i];\n\t\tvar val = obj[key];\n\n\t\tif (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {\n\t\t\tret[key] = val;\n\t\t}\n\t}\n\n\treturn ret;\n};\n","const Rooms = {\n  Room: require('./Room')\n};\n\nmodule.exports = Rooms;\n","import Settings from '../boot/Settings';\nimport Utils from './Utils';\nimport Phaser from 'phaser';\n\n/**\n * The rooms namespace.\n * @namespace TDLib.Rooms\n * @since 1.0.0\n */\n\n/**\n * Class representing a TDLRoom.\n * @extends Phaser.Scene\n * @memberof TDLib.Rooms\n * @since 1.0.0\n */\nexport default class Room extends Phaser.Scene {\n  /**\n   * Create a new TDLRoom.\n   * @param {string} sceneKey - The unique key to identify the room.\n   * @param {Object} rawAssets - The raw object of assets needed by the room. (Ripensarlo ?)\n   */\n  constructor(sceneKey, rawAssets) {\n    super(sceneKey);\n\n    /**\n       * This object contains an array with all the assets needed by the room.\n       * @type {Object}\n       * @since 1.0.0\n       */\n    this.assets = { raw: rawAssets, array: [] };\n\n    /**\n       * The average contribute of light sources to the room.\n       * @type {number}\n       * @since 1.0.0\n       */\n    this.averageLightsContribute;\n\n    /**\n       * The Settings cursor manager.\n       * @type {TDLib.Plugins.SettingsPlugins.CursorManager}\n       * @since 1.0.0\n       */\n    this.cursors;\n\n    /**\n       * The layer manager of the room.\n       * @type {TDLib.Plugins.RoomPlugins.LayerManager}\n       * @since 1.0.0\n       */\n    this.layers;\n\n    /**\n       * The tilemap of the room.\n       * @type {Phaser.Tilemaps.Tilemap}\n       * @since 1.0.0\n       */\n    this.map;\n\n    /**\n       * The name of the room.\n       * @type {string}\n       * @since 1.0.0\n       */\n    this.name = this.constructor.name;\n\n    /**\n       * The instance of the TDLCharacter designated as player for the room.\n       * @type {TDLib.Sprites.Characters.TDLCharacter}\n       * @since 1.0.0\n       */\n    this.player;\n\n    /**\n       * The Settings room manager.\n       * @type {TDLib.Plugins.SettingsPlugins.RoomManager}\n       * @since 1.0.0\n       */\n    this.rooms;\n  }\n\n  /**\n   * The preload function is executed once and load all the assets needed by the room.\n   * @since 1.0.0\n   */\n  preload() {\n    this._scrapeAssets();\n    this.assets.array.forEach(obj => {\n      if ('nPath' in obj) {\n        this.load[obj.type](obj.key, [obj.path, obj.nPath]);\n      } else if ('bPath' in obj) {\n        this.load[obj.type](obj.key, obj.path);\n        this.load[obj.type](obj.key + '_b', obj.bPath);\n      } else {\n        this.load[obj.type](obj.key, obj.path);\n      }\n    });\n\n    // Loading Border Camera Masks\n    this.load.image('top-border-mask-camera', 'assets/Masks/topMaskCamera.png');\n    this.load.image('bottom-border-mask-camera', 'assets/Masks/bottomMaskCamera.png');\n    this.load.image('left-border-mask-camera', 'assets/Masks/leftMaskCamera.png');\n    this.load.image('right-border-mask-camera', 'assets/Masks/rightMaskCamera.png');\n  }\n\n  /**\n   * Scrape the object of raw assets.\n   * @private\n   * @since 1.0.0\n   */\n  _scrapeAssets() {\n    for (let type in this.assets.raw) {\n      Utils.scrapeComplexObjKey(\n        this.assets.raw[type],\n        { type: type },\n        'path',\n        (obj, params) => {\n          obj['type'] = params.type;\n          obj['key'] = Utils.findFileNameFromPath(obj.path);\n          this.assets.array.push(obj);\n        }\n      );\n    }\n  }\n\n  /**\n   * The create function is executed once, when the room is initialized.\n   * @param {TDLib.Sprites.Characters.TDLCharacter} player - The instance of the player for the room.\n   * @since 1.0.0\n   */\n  create(player) {\n    this.player = player.setName('player');\n    this.lights.enable(); // Boot Phaser's LightManager\n    // this.scene.bringToTop(CursorManager.CURSOR_SCENE_KEY); // Add the cursor to the Room\n    this.scene.bringToTop('CursorScene');\n\n    this._setCameraViewport();\n    this._createRoom();\n    this._createSprites();\n    this._applyBorderMasks();\n    this.layers.setLayersDepth();\n\n    // Camera bounds, anche il wallsLayer\n    this.cameras.main.setBounds(0, 0, this.layers.wallsLayer.width, this.layers.wallsLayer.height);\n    this.cameras.main.startFollow(this.player);\n    this.cameras.main.setRoundPixels(true);\n    // Physics Bounds, sarà solo lo spazio di gioco (togliamo il wall layer tutto attorno!!)\n    this.physics.world.setBounds(\n      Settings.TILE_SIZE, Settings.TILE_SIZE, this.layers.wallsLayer.width - 2 * Settings.TILE_SIZE,\n      this.layers.wallsLayer.height - 2 * Settings.TILE_SIZE\n    );\n  }\n\n  /**\n   * Set the correct camera viewport.\n   * @private\n   * @since 1.0.0\n   */\n  _setCameraViewport() {\n    if (Settings.DEVICE === 'MOBILE') {\n      this.cameras.main.setPosition(\n        (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_WIDTH_IN_TILES_MOBILE) * Settings.TILE_SIZE,\n        (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE) * Settings.TILE_SIZE\n      );\n      this.cameras.main.setSize(\n        Settings.SCREEN_PROPS.calculatedWidth - 2 * (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_WIDTH_IN_TILES_MOBILE) * Settings.TILE_SIZE,\n        Settings.ROOM_HEIGHT_IN_TILE * Settings.TILE_SIZE\n      );\n    } else {\n      this.cameras.main.setPosition(\n        Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE,\n        Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE\n      );\n      this.cameras.main.setSize(\n        Settings.SCREEN_PROPS.calculatedWidth - 2 * Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE,\n        Settings.ROOM_HEIGHT_IN_TILE * Settings.TILE_SIZE\n      );\n    }\n  }\n\n  /**\n   * Create room tilemap and layers.\n   * @private\n   * @since 1.0.0\n   */\n  _createRoom() {\n    this.map = this.make.tilemap({\n      key: Utils.findFileNameFromPath(this.assets.raw.tilemapTiledJSON.path),\n      tileWidth: Settings.TILE_SIZE,\n      tileHeight: Settings.TILE_SIZE\n    });\n\n    this.layers.backgroundLayer = this.map.createDynamicLayer(\n      'backgroundLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.background.path)),\n      0, 0\n    );// .setPipeline('Light2D');\n    this.layers.wallsLayer = this.map.createDynamicLayer(\n      'wallsLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.walls.path)),\n      0, 0\n    );\n    this.layers.wallsMaskLayer = this.map.createDynamicLayer(\n      'wallsMaskLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.walls.bPath)),\n      0, 0\n    );\n  }\n\n  /**\n   * Create all the objects present in Tiled JSON map.\n   * @private\n   * @since 1.0.0\n   */\n  _createSprites() {\n    let _this = this;\n\n    this.map.objects.forEach(layer => {\n      layer.objects.forEach(element => {\n        _this;\n        // eslint-disable-next-line new-cap\n        this[element.name] = new Settings.GAME_SPRITES[element.type].default(_this, element.x + element.width / 2, element.y - element.height / 2);\n        this[element.name].setName(element.name);\n      });\n    });\n  }\n\n  /**\n   * Apply the four border masks to the camera.\n   * @private\n   * @since 1.0.0\n   */\n  _applyBorderMasks() {\n    this.layers.borderMasksLayer.create(0,\n      0,\n      'top-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(0,\n      0,\n      'left-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(\n      this.cameras.main.width - Settings.TILE_SIZE,\n      0,\n      'right-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(\n      0,\n      this.cameras.main.height - Settings.TILE_SIZE,\n      'bottom-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n  }\n\n  /**\n   * The update function is executed at every cycle of the game loop.\n   * @since 1.0.0\n   */\n  update() {\n    this._updateMasksByLightDiffusion();\n\n    // Updates all Actions in  every ActionComponent (if present)\n    this.children.list.forEach(element => {\n      if ('actions' in element) {\n        element.actions._update();\n      }\n    });\n  }\n\n  /**\n   * Update the border masks alpha according to the average diffused light in the room.\n   * @private\n   * @since 1.0.0\n   */\n  _updateMasksByLightDiffusion() {\n    this.averageLightsContribute = this.lightSources.calculateAverageLightsContribute();\n    this.layers.wallsMaskLayer.setAlpha(1 - this.averageLightsContribute);\n  }\n}\n\n","const Utils = {\n  scrapeComplexObjKey: (obj, params, searchKey, callback) => {\n    if (Array.isArray(obj)) {\n      for (let i = 0; i < obj.length; i++) {\n        Utils.scrapeComplexObjKey(obj[i], params, searchKey, callback);\n      }\n    } else if (obj !== null && typeof obj === 'object') {\n      if (searchKey in obj) {\n        callback(obj, params);\n      } else {\n        for (let prop in obj) {\n          Utils.scrapeComplexObjKey(obj[prop], params, searchKey, callback);\n        }\n      }\n    }\n  },\n  findFileNameFromPath: (path) => {\n    let nameFirstCharachterPosition = path.lastIndexOf('/') + 1;\n\n    let nameLastCharachterPosition = path.lastIndexOf('.');\n\n    if (nameFirstCharachterPosition === -1) nameFirstCharachterPosition = 0;\n    if (nameLastCharachterPosition === -1) return -1;\n    let filename = path.slice(nameFirstCharachterPosition, nameLastCharachterPosition);\n\n    return filename;\n  }\n};\n\nmodule.exports = Utils;\n","const Sprites = {\n  Actions: require('./actions'),\n  Behaviours: require('./behaviours'),\n  Characters: require('./characters'),\n  Effects: require('./effects'),\n  InventoryItems: require('./inventory-items'),\n  WorldItems: require('./world-items'),\n  Sprite: require('./Sprite')\n};\n\nmodule.exports = Sprites;\n","const Characters = {\n  NPCharacter: require('./npc-characters/NPCharacter'),\n  Player: require('./players/Player')\n};\n\nmodule.exports = Characters;\n","import Character from '../Character';\n\nexport default class NPCharacter extends Character {\n  constructor(room, x, y, texture, layer) {\n    super(room, x, y, texture, layer);\n  }\n}\n","import Character from '../Character';\n\nexport default class Player extends Character {\n  constructor(room, x, y, texture) {\n    super(room, x, y, texture, 'playerLayer');\n\n    this.isBlocked = false;\n  }\n\n  create() {\n    super.create();\n\n    this.room.input.on('pointerdown', function (pointer) {\n      this.room.cursors.pointerDown(this);\n    }, this);\n  }\n}\n","const InventoryItems = {\n  InventoryItem: require('./InventoryItem')\n};\n\nmodule.exports = InventoryItems;\n","import Sprite from '../Sprite';\n\n/**\n * The inventory items namespace.\n * @namespace TDLib.Sprites.InventoryItems\n * @since 1.0.0\n */\n\n/**\n * Class representing an InentoryItem.\n * @extends TDLib.Sprites.Sprite\n * @memberof TDLib.Sprites.InventoryItems\n * @since 1.0.0\n */\n\nexport default class InentoryItem extends Sprite {\n  /**\n   * Create a new InvetoryItem.\n   * @param {Room} room - The room where the item is created.\n   * @param {number} x - The x coordinate of the item.\n   * @param {number} y - The y coordinate of the item.\n   * @param {string} texture - The item's graphic.\n   * @param {string} layer - The item's layer.\n   */\n  constructor(room, x, y, texture, layer) {\n    super(...arguments, false);\n  }\n\n  create() {\n    super.create();\n  }\n}\n","const WorldItems = {\n  WorldItem: require('./WorldItem'),\n  LightSources: require('./light-sources'),\n  RoomFurnitures: require('./room-furnitures'),\n  WallFurnitures: require('./wall-furnitures')\n};\n\nmodule.exports = WorldItems;\n","const LightSources = {\n  LightSource: require('./LightSource')\n};\n\nmodule.exports = LightSources;\n","const RoomFurnitures = {\n  RoomFurniture: require('./RoomFurniture')\n};\n\nmodule.exports = RoomFurnitures;\n","import WorldItem from '../WorldItem';\n\n/**\n * The room furnitures namespace.\n * @namespace TDLib.Sprites.Objects.WorldObjects.RoomFurnitures\n * @since 1.0.0\n */\n\n/**\n * Class representing a RoomFurniture.\n * @extends TDLib.Sprites.Objects.WorldObjects.WorldObject\n * @memberof TDLib.Sprites.Objects.WorldObjects.RoomFurnitures\n * @since 1.0.0\n */\nexport default class RoomFurniture extends WorldItem {\n  /**\n   * Create a RoomFurniture.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   */\n  constructor(room, x, y, texture, behaviourType, pixelPerfect, observeText, examineOrInteractText, blockExamineText, noLightObserveText, noLightExamineOrInteractText, examineOrInteractOffsetX, examineOrInteractThresholdRadius, minLightLevelToExamineOrInteract, minLightLevelToObserve) {\n    super(\n      room,\n      x, y,\n      texture,\n      'roomFurnitureLayer',\n      true,\n      behaviourType,\n      pixelPerfect,\n      observeText,\n      examineOrInteractText,\n      blockExamineText,\n      noLightObserveText,\n      noLightExamineOrInteractText,\n      examineOrInteractOffsetX,\n      examineOrInteractThresholdRadius,\n      minLightLevelToExamineOrInteract,\n      minLightLevelToObserve\n    );\n  }\n}\n","const WallFurnitures = {\n  WallFurniture: require('./WallFurniture')\n};\n\nmodule.exports = WallFurnitures;\n","import WorldItem from '../WorldItem';\n\n/**\n * The wall furnitures namespace.\n * @namespace TDLib.Sprites.Objects.WorldObjects.WallFurnitures\n * @since 1.0.0\n */\n\n/**\n * Class representing a WallFurniture.\n * @extends TDLib.Sprites.Objects.WorldObjects.WorldObject\n * @memberof TDLib.Sprites.Objects.WorldObjects.WallFurnitures\n * @since 1.0.0\n */\nexport default class WallFurniture extends WorldItem {\n  /**\n   * Create a WallFurniture.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   */\n  constructor(room, x, y, texture, behaviourType, pixelPerfect, observeText, examineOrInteractText, blockExamineText, noLightObserveText, noLightExamineOrInteractText, examineOrInteractOffsetX, examineOrInteractThresholdRadius, minLightLevelToExamineOrInteract, minLightLevelToObserve) {\n    super(\n      room,\n      x, y,\n      texture,\n      'wallFurnitureLayer',\n      true,\n      behaviourType,\n      pixelPerfect,\n      observeText,\n      examineOrInteractText,\n      blockExamineText,\n      noLightObserveText,\n      noLightExamineOrInteractText,\n      examineOrInteractOffsetX,\n      examineOrInteractThresholdRadius,\n      minLightLevelToExamineOrInteract,\n      minLightLevelToObserve\n    );\n\n    this.setGravityY(0);\n  }\n}\n"],"sourceRoot":""}