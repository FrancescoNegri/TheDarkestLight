{"version":3,"sources":["webpack://TDLib/webpack/universalModuleDefinition","webpack://TDLib/webpack/bootstrap","webpack://TDLib/./src/sprites/actions/Action.js","webpack://TDLib/external \"phaser\"","webpack://TDLib/./src/sprites/effects/light-effects/LightEffect.js","webpack://TDLib/./src/boot/Settings.js","webpack://TDLib/./src/sprites/behaviours/index.js","webpack://TDLib/./src/const.js","webpack://TDLib/./src/components/Component.js","webpack://TDLib/./src/sprites/actions/index.js","webpack://TDLib/./src/sprites/actions/face-to/FaceTo.js","webpack://TDLib/./src/sprites/behaviours/Behaviour.js","webpack://TDLib/./src/sprites/world-items/WorldItem.js","webpack://TDLib/./src/sprites/Sprite.js","webpack://TDLib/./src/managers/Manager.js","webpack://TDLib/./src/sprites/actions/walk-to/WalkTo.js","webpack://TDLib/./src/components/EffectComponent.js","webpack://TDLib/./src/sprites/effects/light-effects/Trembling.js","webpack://TDLib/./src/components/index.js","webpack://TDLib/./src/components/BehaviourComponent.js","webpack://TDLib/./src/sprites/effects/index.js","webpack://TDLib/./src/sprites/effects/Effect.js","webpack://TDLib/./src/sprites/effects/light-effects/HardFlickering.js","webpack://TDLib/./src/sprites/effects/light-effects/SoftFlickering.js","webpack://TDLib/./src/sprites/world-items/light-sources/LightSource.js","webpack://TDLib/./src/utils/index.js","webpack://TDLib/./src/managers/index.js","webpack://TDLib/./src/systems/index.js","webpack://TDLib/./src/sprites/characters/Character.js","webpack://TDLib/./src/TDLib.js","webpack://TDLib/(webpack)/buildin/global.js","webpack://TDLib/./src/components/ActionComponent.js","webpack://TDLib/./src/sprites/actions/examine/Examine.js","webpack://TDLib/./src/sprites/actions/face-to/Settings.js","webpack://TDLib/./src/sprites/actions/walk-to/Settings.js","webpack://TDLib/./src/sprites/actions/idle/Idle.js","webpack://TDLib/./src/sprites/actions/interact/Interact.js","webpack://TDLib/./src/sprites/actions/observe/Observe.js","webpack://TDLib/./src/sprites/actions/run-to/RunTo.js","webpack://TDLib/./src/sprites/actions/run-to/Settings.js","webpack://TDLib/./src/sprites/behaviours/const.js","webpack://TDLib/./src/sprites/behaviours/examinable/Examinable.js","webpack://TDLib/./src/sprites/behaviours/interactive/Interactive.js","webpack://TDLib/./src/sprites/behaviours/observable/Observable.js","webpack://TDLib/./src/sprites/behaviours/observable/Settings.js","webpack://TDLib/./src/sprites/behaviours/inventory/Inventory.js","webpack://TDLib/./src/sprites/effects/light-effects/index.js","webpack://TDLib/./src/sprites/effects/light-effects/HardFlickeringAndTrembling.js","webpack://TDLib/./src/sprites/effects/light-effects/RadiusFlickering.js","webpack://TDLib/./src/sprites/effects/light-effects/SoftFlickeringAndTrembling.js","webpack://TDLib/./src/boot/Game.js","webpack://TDLib/./src/boot/DebugHeader.js","webpack://TDLib/./src/utils/Utils.js","webpack://TDLib/./src/managers/layers/LayerManager.js","webpack://TDLib/./src/managers/layers/Settings.js","webpack://TDLib/./src/managers/light-sources/LightSourceManager.js","webpack://TDLib/./src/managers/updates/UpdateManager.js","webpack://TDLib/./src/systems/cursors/CursorSystem.js","webpack://TDLib/./src/systems/rooms/RoomSystem.js","webpack://TDLib/./src/boot/Boot.js","webpack://TDLib/./node_modules/filter-obj/index.js","webpack://TDLib/./src/rooms/index.js","webpack://TDLib/./src/rooms/Room.js","webpack://TDLib/./src/rooms/Utils.js","webpack://TDLib/./src/sprites/index.js","webpack://TDLib/./src/sprites/characters/index.js","webpack://TDLib/./src/sprites/characters/npc-characters/NPCharacter.js","webpack://TDLib/./src/sprites/characters/players/Player.js","webpack://TDLib/./src/sprites/inventory-items/index.js","webpack://TDLib/./src/sprites/inventory-items/InventoryItem.js","webpack://TDLib/./src/sprites/world-items/index.js","webpack://TDLib/./src/sprites/world-items/light-sources/index.js","webpack://TDLib/./src/sprites/world-items/room-furnitures/index.js","webpack://TDLib/./src/sprites/world-items/room-furnitures/RoomFurniture.js","webpack://TDLib/./src/sprites/world-items/wall-furnitures/index.js","webpack://TDLib/./src/sprites/world-items/wall-furnitures/WallFurniture.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Action","invoker","actor","config","this","constructor","target","_queue","isPaused","actions","Array","isArray","forEach","action","push","length","_abort","_start","finish","shift","_remove","_pause","_resume","_update","startCallback","finishCallback","updateCallback","resumeCallback","pauseCallback","LightEffect","contributeFactor","callback","stopped","GAME","TILE_SIZE","ROOM_HEIGHT_IN_TILE","INVENTORY_WIDTH_IN_TILES_MOBILE","INVENTORY_WIDTH_IN_TILES_DESKTOP","INVENTORY_HEIGHT_IN_TILES_MOBILE","INVENTORY_HEIGHT_IN_TILES_DESKTOP","ROOM_FRAME_IN_TILES_DESKTOP","ROOM_FRAME_IN_TILES_MOBILE","SCREEN_PROPS","DEVICE","STARTING_ROOM","GAME_SPRITES","Behaviours","Behaviour","Examinable","Interactive","Observable","Talkable","Inventory","Phaser","Utils","Objects","Extend","CONST","VERSION","version","PHASER_VERSION","LEFT","RIGHT","gameObject","Actions","Examine","FaceTo","Idle","Interact","Observe","RunTo","WalkTo","arguments","addActions","BaseAction","Math","abs","x","MICRO_MOVEMENT_RADIUS","facing","setFlipX","component","cursors","room","add","pixelPerfect","setInteractive","alphaTolerance","draggable","console","log","lightSources","calculateLightsContribuitePoint","WorldItem","y","texture","layer","hasBody","behaviourType","observeText","examineOrInteractText","blockExamineText","noLightObserveText","noLightExamineOrInteractText","examineOrInteractOffsetX","examineOrInteractThresholdRadius","minLightLevelToExamineOrInteract","minLightLevelToObserve","Sprite","INERT","DEFAULT_OBSERVE_TEXT","DEFAULT_EXAMINE_OR_INTERACT_TEXT","DEFAULT_NO_LIGHT_OBSERVE_TEXT","DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT","DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT","DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE","floor","random","type","behaviours","existing","updates","physics","setCollideWorldBounds","setGravityY","layers","setLayersDepth","warn","setPipeline","width","height","offsetX","offsetY","input","hitArea","setSize","setPosition","Physics","Arcade","Manager","pluginManager","Plugins","ScenePlugin","anims","play","body","setVelocity","WALK_VELOCITY","velocity","EffectComponent","previousEffects","currentEffect","duration","stop","LightEffects","timer","time","addEvent","delay","callbackScope","repeat","remove","Trembling","minTime","maxTime","minPercentageIntensity","maxPercentageIntensity","minPercentageRadius","maxPercentageRadius","backToInitialIntensity","backToInitialRadius","setTimer","newIntensityPercentage","graphicLight","setIntensity","intensity","diffusedLight","newRadiusPercentage","setRadius","radius","Components","Component","ActionComponent","BehaviourComponent","player","_addBehaviours","EXAMINABLE","INTERACTIVE","observe","examine","interact","Effects","Effect","HardFlickering","finalState","initialConfig","turnOff","SoftFlickering","LightSource","graphicLightConfig","diffusedLightConfig","offset","isOn","turnOn","effects","lights","addLight","diffusedLights","graphicLights","diffusedLightindex","indexOf","splice","removeLight","graphicLightindex","getScreenProps","Managers","LayerManager","LightSourceManager","UpdateManager","Systems","CursorSystem","RoomSystem","Character","TDLib","Game","Rooms","Settings","Sprites","global","g","Function","e","defaultAction","DEFAULT_MODE","newAction","QUEUE_MODE","PAUSE_MODE","unshift","getAction","RUN_VELOCITY","TALKABLE","INVENTORY","checkLight","_timer","on","pointer","setCursor","DEFAULT_MIN_TIME_TO_OBSERVE","isBlocked","HardFlickeringAndTrembling","RadiusFlickering","SoftFlickeringAndTrembling","hardFlickering","trembling","SoftDefaultFlickeringAndtrembling","softFlickering","_setScreenConfig","_setPhysicsConfig","_setPlugins","_setBoot","_setHeaderProps","_finalizeConfig","startingRoom","_setGameSprites","Clone","sprites","calculatedWidth","calculatedHeight","zoom","calculatedZoom","autoResize","backgroundColor","pixelArt","default","arcade","debug","gravity","plugins","plugin","start","mapping","scene","banner","obj","flag","keys","objectsObj","temp","father","output","getChildrenFromFather","element","WEBGL","maxLights","parent","disableContextMenu","game","bannerBackgroundColor","bannerTextColor","hidePhaser","renderType","audioType","audioConfig","audio","deviceAudio","device","webAudio","disableWebAudio","noAudio","audioData","browser","ie","lastColor","args","color","concat","gameTitle","gameVersion","gameURL","apply","returnValue","availHeight","innerHeight","availWidth","innerWidth","screen","ceil","layerSize","strartingDepth","startingDepth","backgroundLayer","group","rearDoorsLayer","wallFurnitureLayer","roomFurnitureLayer","sideDoorsLayer","npcLayer","playerLayer","cielingObjectsLayer","frontDoorsLayer","wallsLayer","wallsMaskLayer","overallDarknessLayer","borderMasksLayer","setDepth","source","getChildren","lightSource","singleLightContributeAccumulator","light","singleLightContribute","singleLightIntensityAccumulator","averageLightsContribute","events","systems","gameObjects","Structs","Set","_sceneUpdate","_sceneShutdown","once","_sceneDestroy","delta","iterateLocal","clear","off","_scenePostUpdate","set","objs","delete","cursorScene","sceneManager","lastTarget","CURSOR_SCENE_KEY","CursorScene","cursor","DEFAULT_CURSOR","activePointer","camera","worldX","EXAMINABLE_CURSOR","abort","INTERACTIVE_CURSOR","TALKABLE_CURSOR","TalkTo","setTexture","setOrigin","setVisible","load","image","HOLD_CURSOR","CHOICE_CURSOR","CHOICE_PRESSED_CURSOR","setDefaultCursor","Scene","BasePlugin","currentRoom","autoStart","Boot","configure","rooms","predicate","ret","isArr","val","Room","sceneKey","rawAssets","assets","raw","array","map","_scrapeAssets","path","nPath","bPath","scrapeComplexObjKey","params","findFileNameFromPath","setName","enable","bringToTop","_setCameraViewport","_createRoom","_createSprites","_applyBorderMasks","cameras","main","setBounds","startFollow","setRoundPixels","world","make","tilemap","tilemapTiledJSON","tileWidth","tileHeight","createDynamicLayer","addTilesetImage","tiles","background","walls","_this","objects","setScrollFactor","_updateMasksByLightDiffusion","children","list","calculateAverageLightsContribute","setAlpha","searchKey","prop","nameFirstCharachterPosition","lastIndexOf","nameLastCharachterPosition","slice","Characters","InventoryItems","WorldItems","NPCharacter","Player","pointerDown","InventoryItem","InentoryItem","resetPipeline","LightSources","RoomFurnitures","WallFurnitures","RoomFurniture","WallFurniture"],"mappings":"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","file":"the-darkest-lib.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"phaser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"TDLib\", [\"phaser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TDLib\"] = factory(require(\"phaser\"));\n\telse\n\t\troot[\"TDLib\"] = factory(root[\"phaser\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","/**\n * Class representing a TDLAction.\n * @memberof TDLib.Components.Actions\n * @since 1.0.0\n */\nexport default class Action {\n  /**\n   * Start a new TDLAction.\n   * @param {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @param {TDLSprite} actor - The actor who performs the action.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   */\n  constructor(invoker, actor, config = {}) {\n    /**\n     * The invoker of the action.\n     * @type {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction}\n     * @since 1.0.0\n     */\n    this.invoker = invoker;\n\n    /**\n     * The name of the action.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.name = this.constructor.name;\n\n    /**\n     * The actor who performs the action.\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.actor = actor;\n\n    /**\n     * The target of the action.\n     * @type {Object|TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.target = config.target;\n\n    /**\n     * The config object for the action.\n     * @type {Object}\n     * @since 1.0.0\n     */\n    this.config = config;\n\n    /**\n     * The queue of actions.\n     * @type {Array}\n     * @private\n     * @since 1.0.0\n     */\n    this._queue = [];\n\n    /**\n     * Tells if the action has been paused.\n     * @type {boolean}\n     * @since 1.0.0\n     */\n    this.isPaused = false;\n  }\n\n  /**\n   * Add one or more new actions to the queue.\n   * @param {TDLib.Components.Actions.TDLAction|TDLib.Components.Actions.TDLAction[]|TDLib.Components.Actions.TDLAction.BaseAction|TDLib.Components.Actions.TDLAction.BaseAction[]} actions - The new actions to add.\n   * @since 1.0.0\n   */\n  addActions(actions) {\n    if (Array.isArray(actions)) {\n      actions.forEach(action => {\n        this._queue.push(action);\n      });\n    } else this._queue.push(actions);\n  }\n\n  /**\n   * The blank action to create new composed and complex actions.\n   * @typedef {TDLib.Components.Actions.TDLAction.BaseAction}\n   *\n   * @property {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @property {Function} startCallback - The callback to execute at the beginning of the action.\n   * @property {Function} [finishCallback] - The callback to execute at the end of the action.\n   * @property {Function} [updateCallback]  - The callback to execute at every update loop.\n   * @property {Function} [resumeCallback=startCallback] - The callback to execute when the action is paused.\n   * @property {Function} [pauseCallback=finishCallback]  - The callback to execute when the action is resumed.\n   * @since 1.0.0\n   */\n  static get BaseAction() {\n    return class BaseAction {\n      constructor(invoker, startCallback, finishCallback = () => { }, updateCallback = () => { }, resumeCallback = startCallback, pauseCallback = finishCallback) {\n        this.invoker = invoker;\n\n        this.startCallback = startCallback;\n        this.finishCallback = finishCallback;\n        this.updateCallback = updateCallback;\n        this.resumeCallback = resumeCallback;\n        this.pauseCallback = pauseCallback;\n\n        this.isPaused = false;\n      }\n\n      _start() {\n        this.startCallback();\n      }\n\n      finish() {\n        this.finishCallback();\n        this.invoker._remove();\n      }\n\n      _abort() {\n        this.finishCallback();\n      }\n\n      _resume() {\n        this.isPaused = false;\n        this.resumeCallback();\n      }\n\n      _pause() {\n        this.pauseCallback();\n        this.isPaused = true;\n      }\n\n      _update() {\n        this.updateCallback();\n      }\n    };\n  }\n\n  /**\n   * Abort an uncompleted action.\n   * @private\n   * @since 1.0.0\n   */\n  _abort() {\n    if (this._queue.length > 0) this._queue[0]._abort();\n  }\n\n  /**\n   * Start an action.\n   * @private\n   * @since 1.0.0\n   */\n  _start() {\n    if (this._queue.length > 0) this._queue[0]._start();\n  }\n\n  /**\n   * Finish a completed action.\n   * @private\n   * @since 1.0.0\n   */\n  finish() {\n    if (this._queue.length > 0) this._queue[0].finish();\n  }\n\n  /**\n   * Remove a completed action from the queue.\n   * @private\n   * @since 1.0.0\n   */\n  _remove() {\n    if (this._queue.length > 0) this._queue.shift();\n\n    if (this._queue.length <= 0) this.invoker._remove();\n    else this._queue[0]._start();\n  }\n\n  /**\n   * Pause an action.\n   * @private\n   * @since 1.0.0\n   */\n  _pause() {\n    if (this._queue.length > 0) {\n      this._queue[0]._pause();\n      this.isPaused = true;\n    }\n  }\n\n  /**\n   * Resume a paused action.\n   * @private\n   * @since 1.0.0\n   */\n  _resume() {\n    if (this._queue.length > 0) {\n      this.isPaused = false;\n      this._queue[0]._resume();\n    }\n  }\n\n  /**\n   * Update the currently performed action.\n   * @private\n   * @since 1.0.0\n   */\n  _update() {\n    if (this._queue.length > 0) this._queue[0]._update();\n  }\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import Effect from '../Effect';\n\nexport default class LightEffect extends Effect {\n  constructor(invoker, config, contributeFactor = 1) {\n    super(invoker, config);\n\n    this.contributeFactor = contributeFactor;\n  }\n\n  play(callback) {\n    super.play(() => {\n      this.stopped = false;\n      callback();\n    });\n  }\n\n  stop(callback) {\n    super.stop(() => {\n      this.stopped = true;\n      callback();\n    });\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * The default Game settings.\n * @namespace TDLib.Settings\n */\nvar Settings = {\n  /**\n   * The instance of the Game.\n   *\n   * @name TDLib.Settings.GAME\n   * @const\n   * @type {TDLib.Game}\n   * @since 1.0.0\n   */\n  GAME: '',\n  /**\n   * The size of the tiles.\n   *\n   * @name TDLib.Settings.TILE_SIZE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  TILE_SIZE: 48,\n  /**\n   * The height of a standard room in tiles.\n   *\n   * @name TDLib.Settings.ROOM_HEIGHT_IN_TILE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  ROOM_HEIGHT_IN_TILE: 6,\n  /**\n   * The inventory width in tiles in mobile devices.\n   *\n   * @name TDLib.Settings.INVENTORY_WIDTH_IN_TILES_MOBILE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  INVENTORY_WIDTH_IN_TILES_MOBILE: 1.25,\n  /**\n   * The inventory width in tiles in desktop devices.\n   *\n   * @name TDLib.Settings.INVENTORY_WIDTH_IN_TILES_DESKTOP\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  INVENTORY_WIDTH_IN_TILES_DESKTOP: 0,\n  /**\n   * The inventory height in tiles in mobile devices.\n   *\n   * @name TDLib.Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  INVENTORY_HEIGHT_IN_TILES_MOBILE: 0,\n  /**\n   * The inventory height in tiles in desktop devices.\n   *\n   * @name TDLib.Settings.INVENTORY_HEIGHT_IN_TILES_DESKTOP\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  INVENTORY_HEIGHT_IN_TILES_DESKTOP: 1,\n  /**\n   * The room frame in tiles in desktop devices.\n   *\n   * @name TDLib.Settings.ROOM_FRAME_IN_TILES_DESKTOP\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  ROOM_FRAME_IN_TILES_DESKTOP: 0.5,\n  /**\n   * The room frame in tiles in mobile devices.\n   *\n   * @name TDLib.Settings.ROOM_FRAME_IN_TILES_MOBILE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  ROOM_FRAME_IN_TILES_MOBILE: 0.25,\n  /**\n   * The proportions of the used screen.\n   *\n   * @name TDLib.Settings.SCREEN_PROPS\n   * @type {Object}\n   * @since 1.0.0\n   */\n  SCREEN_PROPS: {},\n  /**\n   * The used device.\n   *\n   * @name TDLib.Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE\n   * @type {String}\n   * @since 1.0.0\n   */\n  DEVICE: 'Desktop',\n  STARTING_ROOM: null,\n  GAME_SPRITES: null\n};\n\nmodule.exports = Settings;\n","import CONST from './const';\n\nvar Behaviours = {\n  Behaviour: require('./Behaviour'),\n  Examinable: require('./examinable/Examinable'),\n  Interactive: require('./interactive/Interactive'),\n  Observable: require('./observable/Observable'),\n  Talkable: require('./talkable/Talkable'),\n  Inventory: require('./inventory/Inventory')\n};\n\nBehaviours = Phaser.Utils.Objects.Extend(false, Behaviours, CONST);\nmodule.exports = Behaviours;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * Global consts.\n *\n * @ignore\n */\n\nimport Phaser from 'phaser';\n\nconst CONST = {\n  /**\n   * TheDarkestLib Release Version.\n   *\n   * @name TDLib.VERSION\n   * @const\n   * @type {string}\n   * @since 1.0.0\n   */\n  VERSION: require('../package.json').version,\n  /**\n   * Phaser Release Version.\n   *\n   * @name TDLib.PHASER_VERSION\n   * @const\n   * @type {string}\n   * @since 1.0.0\n   */\n  PHASER_VERSION: Phaser.VERSION,\n  /**\n   * Left direction constant.\n   *\n   * @name TDLib.LEFT\n   * @const\n   * @type {string}\n   * @since 1.0.0\n   */\n  LEFT: '_left',\n  /**\n   * Right direction constant.\n   *\n   * @name TDLib.RIGHT\n   * @const\n   * @type {string}\n   * @since 1.0.0\n   */\n  RIGHT: '_right'\n};\n\nmodule.exports = CONST;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * @classdesc\n * Class representing a generic Component.\n * A Component is bound to a Sprite and extends the members and methods of it.\n * To access the component you have to use a specific key.\n *\n * @class Component\n * @memberof TDLib.Components\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Sprites.Sprite} gameObject - The Sprite using the Component.\n */\nexport default class Component {\n  constructor(gameObject) {\n\n    /**\n     * The name of the Component.\n     * @type {string}\n     * @name TDLib.Components.Component#name\n     * @since 1.0.0\n     */\n    this.name = this.constructor.name;\n\n    /**\n     * The Sprite using the Component.\n     * @type {TDLib.Sprites.Sprite}\n     * @name TDLib.Components.Component#gameObject\n     * @since 1.0.0\n     */\n    this.gameObject = gameObject;\n  }\n}\n","const Actions = {\n  Action: require('./Action'),\n  Examine: require('./examine/Examine'),\n  FaceTo: require('./face-to/FaceTo'),\n  Idle: require('./idle/Idle'),\n  Interact: require('./interact/Interact'),\n  Observe: require('./observe/Observe'),\n  RunTo: require('./run-to/RunTo'),\n  WalkTo: require('./walk-to/WalkTo')\n};\n\nmodule.exports = Actions;\n","import Action from '../Action';\nimport CONST from '../../../const';\nimport Settings from './Settings';\n\nexport default class FaceTo extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      new Action.BaseAction(\n        this,\n        () => {\n          if (Math.abs(this.actor.x - this.target.x) > Settings.MICRO_MOVEMENT_RADIUS) {\n            if (this.actor.facing === CONST.RIGHT) {\n              if (this.actor.x > this.target.x) {\n                this.actor.facing = CONST.LEFT;\n                this.actor.setFlipX(true);\n                // this.actor.anims.play('idleLeft');\n              }\n            } else if (this.actor.facing === CONST.LEFT) {\n              if (this.actor.x < this.target.x) {\n                this.actor.facing = CONST.RIGHT;\n                this.actor.setFlipX(false);\n                // this.actor.anims.play('idleRight');\n              }\n            }\n          }\n          this.finish();\n        }\n      )\n    );\n  }\n}\n","import Action from '../actions/Action';\n\n/**\n * Class representing the behaviour of a sprite.\n * @memberof TDLib.Components.SpriteBehaviours\n * @since 1.0.0\n */\nexport default class Behaviour {\n  /**\n   * Create a SpriteBehaviour.\n   * @param {TDLib.Components.SpriteBehaviourComponent} component - The component which has invoked the behaviour.\n   */\n  constructor(component) {\n    /**\n     * The component which has invoked the behaviour.\n     * @type {TDLib.Components.SpriteBehaviourComponent}\n     * @since 1.0.0\n     */\n    this.component = component;\n\n    /**\n     * The global cursor manager.\n     * @type {TDLib.Plugins.GlobalPlugins.CursorManager}\n     * @since 1.0.0\n     */\n    this.cursors = this.component.gameObject.room.cursors;\n\n    /**\n     * The sprite which has invoked the behaviour.\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.gameObject = this.component.gameObject;\n\n    /**\n     * The room where the gameObject lives.\n     * @type {TDLib.Rooms.TDLRoom}\n     * @since 1.0.0\n     */\n    this.room = this.component.gameObject.room;\n\n    this.add();\n  }\n\n  /**\n   * Set the gameObject as interactive.\n   * @since 1.0.0\n   */\n  add() {\n    if (this.component.pixelPerfect === null) this.component.gameObject.setInteractive();\n    else {\n      this.component.gameObject.setInteractive(\n        {\n          pixelPerfect: true,\n          alphaTolerance: this.component.pixelPerfect.alphaTolerance,\n          draggable: false\n        }\n      );\n    }\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Action.BaseAction(\n      invoker,\n      () => {\n        console.log('Sono una generica action dei behaviour');\n        invoker.finish();\n      }\n    );\n  }\n\n  checkLight(value) {\n    if (this.room.lightSources.calculateLightsContribuitePoint(this.gameObject) >= value) return true;\n    return false;\n  }\n}\n","import Sprite from '../Sprite';\n\n/**\n * The world items namespace.\n * @namespace TDLib.Sprites.WorldItems\n * @since 1.0.0\n */\n\n/**\n * Class representing a WorldItem.\n * @extends TDLib.Sprites.Sprite\n * @memberof TDLib.Sprites.WorldItems\n * @since 1.0.0\n */\nexport default class WorldItem extends Sprite {\n  /**\n   * Create a WorldObject.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [layer=null] - The key of the layer which will contain the sprite.\n   * @param {boolean} [hasBody=true] - Specify if the sprite has physics.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   */\n  constructor(room, x, y, texture, layer, hasBody, behaviourType, pixelPerfect, observeText, examineOrInteractText, blockExamineText, noLightObserveText, noLightExamineOrInteractText, examineOrInteractOffsetX, examineOrInteractThresholdRadius, minLightLevelToExamineOrInteract, minLightLevelToObserve) {\n    super(\n      room,\n      x, y,\n      texture,\n      layer,\n      hasBody,\n      behaviourType,\n      pixelPerfect,\n      observeText,\n      examineOrInteractText,\n      blockExamineText,\n      noLightObserveText,\n      noLightExamineOrInteractText,\n      examineOrInteractOffsetX,\n      examineOrInteractThresholdRadius,\n      minLightLevelToExamineOrInteract,\n      minLightLevelToObserve\n    );\n  }\n\n  create() {\n    super.create();\n  }\n}\n","import Behaviours from '../sprites/behaviours';\nimport BehaviourComponent from '../components/BehaviourComponent';\nimport Phaser from 'phaser';\n\n/**\n * The Darkest Lib.\n * @namespace TDLib\n * @since 1.0.0\n */\n\n/**\n * The actions namespace.\n * @namespace TDLib.Sprites\n * @since 1.0.0\n */\n\n/**\n * Class representing a TDLSprite.\n * @extends Phaser.Physics.Arcade.Sprite\n * @memberof TDLib.Sprites\n * @since 1.0.0\n */\nexport default class Sprite extends Phaser.Physics.Arcade.Sprite {\n  /**\n   * Create a TDLSprite.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [layer=null] - The key of the layer which will contain the sprite.\n   * @param {boolean} [hasBody=true] - Specify if the sprite has physics.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   * @param {boolean} [precisePosition=false] - Specify if to examine or interact with the sprite it's required to be precisely at the examineOrInteractPoint. (Probably not needed)\n   */\n  constructor(\n    room,\n    x, y,\n    texture,\n    layer = null,\n    hasBody = true,\n    behaviourType = Behaviours.INERT,\n    pixelPerfect = null,\n    observeText = Behaviours.DEFAULT_OBSERVE_TEXT,\n    examineOrInteractText = Behaviours.DEFAULT_EXAMINE_OR_INTERACT_TEXT,\n    blockExamineText = null,\n    noLightObserveText = Behaviours.DEFAULT_NO_LIGHT_OBSERVE_TEXT,\n    noLightExamineOrInteractText = Behaviours.DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT,\n    examineOrInteractOffsetX = 0,\n    examineOrInteractThresholdRadius = 0,\n    minLightLevelToExamineOrInteract = Behaviours.DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT,\n    minLightLevelToObserve = Behaviours.DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE\n\n  ) {\n    super(room, x, y, texture);\n\n    /**\n     * The room where the sprite is created.\n     * @type {TDLib.Rooms.TDLRoom}\n     * @since 1.0.0\n     */\n    this.room = room;\n\n    /**\n     * The name of the sprite, to map it in the room. Usually it's obtained by Tiled.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.name;\n\n    /**\n     * The unique key of the sprite, composed by the sprite type and a 4 digits random integer number.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.key = this.constructor.name + (Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000);\n\n    /**\n     * The type of the sprite.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.type = this.constructor.name;\n\n    /**\n     * The sprite behaviour component instance.\n     * @type {TDLib.Components.SpriteBehaviourComponent}\n     * @since 1.0.0\n     */\n    this.behaviours = new BehaviourComponent(this, behaviourType, pixelPerfect);\n\n    /**\n     * The text which appears when observing the sprite.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.observeText = observeText;\n\n    /**\n * The text which appears when examine or interact with the sprite.\n     * @type {string}\n     * @since 1.0.0\n */\n    this.examineOrInteractText = examineOrInteractText;\n\n    /**\n     * If not null it's the blocking text which appears the first time the sprite is examined.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.blockExamineText = blockExamineText;\n\n    /**\n     * The text which appears when observing the sprite when the diffused light is not sufficient.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.noLightObserveText = noLightObserveText;\n\n    /**\n * The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.noLightExamineOrInteractText = noLightExamineOrInteractText;\n\n    /**\n     * The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n     */\n    this.examineOrInteractOffsetX = examineOrInteractOffsetX;\n\n    /**\n     * The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n         */\n    this.examineOrInteractThresholdRadius = examineOrInteractThresholdRadius;\n\n    /**\n     * The minimum value of diffused light to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n         */\n    this.minLightLevelToExamineOrInteract = minLightLevelToExamineOrInteract;\n\n    /**\n * The minimum value of diffused light to observe the sprite.\n     * @type {number}\n     * @since 1.0.0\n     */\n    this.minLightLevelToObserve = minLightLevelToObserve;\n\n    this.room.add.existing(this);\n    this.room.updates.add(this);\n    if (hasBody) {\n      this.room.physics.add.existing(this);\n      this.setCollideWorldBounds(true);\n      this.setGravityY(10000);\n    }\n\n    if (layer != null) {\n      if (layer in this.room.layers) {\n        this.room.layers[layer].add(this);\n        this.room.layers.setLayersDepth();\n      } else console.warn('ALERT: layer not found for object', this);\n    }\n\n    this.create();\n  }\n\n  /**\n   * The create function is executed once, immediately after the initialization of the sprite.\n   * @since 1.0.0\n   */\n  create() {\n    console.log('Created:', this.key, '- Type:', this.type, '- Behaviour:', this.behaviours.type);\n    this.setPipeline('Light2D');\n  }\n\n  /**\n   * The update is executed at every cycle of the game loop.\n   * @since 1.0.0\n   */\n  update() {\n\n  }\n\n  /**\n   * Set the name property of a sprite.\n   * @param {string} value - The name which is used to map a sprite in the room.\n   * @return {TDLib.Sprites.TDLSprite}\n   * @since 1.0.0\n   */\n  setName(value) {\n    this.name = value;\n    return this;\n  }\n\n  // Poichè è stata aggiunta la pixel perfect collision, valutare l'utilità di questa funzione!\n  setHitAreaSize(width = this.width, height = this.height, offsetX = 0, offsetY = 0) {\n    this.input.hitArea.setSize(width, height);\n    this.input.hitArea.setPosition(((this.width - width) / 2) + offsetX, ((this.height - height) / 2) + offsetY);\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Phaser from 'phaser';\n\n/**\n * @classdesc\n * Class representing a generic Manager.\n * A Manager is a controller working at a Room level.\n * It is unique in its own Room, but it isn't in the whole game.\n * From Phaser library a Manager is handled as a Phaser.Plugins.ScenePlugin.\n * It has to be added to the game into Game.js through the specified method..\n *\n * @class Manager\n * @extends Phaser.Plugins.ScenePlugin\n * @memberof TDLib.Managers\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Rooms.Room|Phaser.Scene} room - The room running the Manager.\n * @param {Phaser.Plugins.PluginManager} - A reference to Phaser PluginManager.\n */\nexport default class Manager extends Phaser.Plugins.ScenePlugin {\n  constructor(room, pluginManager) {\n    super(room, pluginManager);\n\n    /**\n     * The room running the Manager.\n     * @type {TDLib.Rooms.Room|Phaser.Scene}\n     * @since 1.0.0\n     */\n    this.room = room;\n  }\n\n  /**\n   * Default function called by Phaser when booting the plugins.\n   * @method TDLib.Managers.Manager#boot\n   * @protected\n   * @since 1.0.0\n   */\n  boot() {\n\n  }\n}\n","import Action from '../Action';\nimport FaceTo from '../face-to/FaceTo';\nimport Settings from './Settings';\n\nexport default class WalkTo extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new FaceTo(this, this.actor, this.config),\n        new Action.BaseAction(\n          this,\n          () => {\n            if (Math.abs(this.actor.x - this.target.x) > Settings.MICRO_MOVEMENT_RADIUS) {\n              if (this.actor.x < this.target.x) {\n                this.actor.anims.play('walk');\n                // this.actor.anims.play('walkRight');\n                this.actor.body.setVelocity(Settings.WALK_VELOCITY);\n              } else if (this.actor.x > this.target.x) {\n                this.actor.anims.play('walk');\n                // this.actor.anims.play('walkLeft');\n                this.actor.body.setVelocity(-Settings.WALK_VELOCITY);\n              }\n            } else {\n              this.finish();\n            }\n          },\n          () => {\n            this.actor.body.setVelocity(0);\n          },\n          () => {\n            if ((this.actor.x - this.target.x) * this.actor.body.velocity.x > 0) this.finish();\n          }\n        )\n      ]\n    );\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Component from './Component';\nimport Effects from '../sprites/effects';\nimport LightSource from '../sprites/world-items/light-sources/LightSource';\n\n/**\n * @classdesc\n * Class representing the EffectComponent.\n * EffectComponent is responsible to handle all the effects of a Sprite.\n *\n * @class EffectComponent\n * @memberof TDLib.Components\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Sprites.Sprite} gameObject - The Sprite that owns the component.\n */\nexport default class EffectComponent extends Component {\n  constructor(gameObject) {\n    super(gameObject);\n\n    /**\n     * An array containing all the already played Effects.\n     * @type {Array}\n     * @name TDLib.Components.EffectComponent#previousEffects\n     * @since 1.0.0\n     */\n    this.previousEffects = [];\n\n    /**\n     * The currently played Effect.\n     * @type {TDLib.Sprites.Effects.Effect}\n     * @name TDLib.Components.EffectComponent#currentEffect\n     * @since 1.0.0\n     */\n    this.currentEffect = null;\n  }\n\n  /**\n   * Starts a new Effect. If there's an already running Effect it is stopped.\n   *\n   * @method TDLib.Components.EffectComponent#play\n   * @param {string} key - A key identifying an Effect.\n   * @param {Object} [duration=-1] - If specified it represents the duration of the Effect.\n   * @param {Object} [config] - The configuration object for the Effect.\n   * @since 1.0.0\n   */\n  play(key, duration = -1, config) {\n    if (this.currentEffect) this.stop();\n\n    if (key in Effects) this.currentEffect = new Effects[key](this, config);\n    else if (key in Effects.LightEffects) {\n      if (this.gameObject instanceof LightSource) this.currentEffect = new Effects.LightEffects[key](this, config);\n      else console.log(key + ' can only be run by a LightSource');\n    } else {\n      console.log('No effect with key: ', key);\n    }\n\n    if (this.currentEffect) this.currentEffect.play();\n\n    if (duration > 0) {\n      this.timer = this.gameObject.room.time.addEvent({\n        delay: duration,\n        callback: () => {\n          this.stop();\n        },\n        callbackScope: this,\n        repeat: 0\n      });\n      console.log(this.currentEffect.name + 'Effect started for', duration, 'ms');\n    } else if (duration === -1) {\n      console.log(this.currentEffect.name + 'Effect started');\n    } else {\n      console.log('You must use a positive value!');\n    }\n  }\n\n  /**\n   * Stops the currently played Effect.\n   *\n   * @method TDLib.Components.EffectComponent#stop\n   * @since 1.0.0\n   */\n  stop() {\n    if (this.currentEffect) {\n      if (this.timer) {\n        this.timer.remove();\n        this.timer = null;\n      }\n      this.previousEffects.push(this.currentEffect);\n      this.currentEffect.stop();\n      console.log(this.currentEffect.name + 'Effect stopped');\n      this.currentEffect = null;\n      console.log(this.previousEffects);\n    }\n  }\n}\n","import LightEffect from './LightEffect';\n\nexport default class Trembling extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.8);\n\n    if (!this.config.minTime) this.config.minTime = 10;\n    if (!this.config.maxTime) this.config.maxTime = 100;\n    if (!this.config.minPercentageIntensity) this.config.minPercentageIntensity = 0.8;\n    if (!this.config.maxPercentageIntensity) this.config.maxPercentageIntensity = 1;\n    if (!this.config.minPercentageRadius) this.config.minPercentageRadius = 0.8;\n    if (!this.config.maxPercentageRadius) this.config.maxPercentageRadius = 1;\n    if (!this.config.backToInitialIntensity) this.config.backToInitialIntensity = true;\n    if (!this.config.backToInitialRadius) this.config.backToInitialRadius = true;\n  }\n\n  play() {\n    super.play(() => {\n      let setTimer = () => {\n        this.gameObject.room.time.addEvent({\n          delay: Math.floor(Math.random() * (this.config.maxTime - this.config.minTime)) + this.config.minTime,\n          callback: () => {\n\n            if (!this.stopped) {\n              let newIntensityPercentage = Math.floor((this.config.minPercentageIntensity + Math.random() * (this.config.maxPercentageIntensity - this.config.minPercentageIntensity)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity * newIntensityPercentage);\n              this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity * newIntensityPercentage);\n              let newRadiusPercentage = Math.floor((this.config.minPercentageRadius + Math.random() * (this.config.maxPercentageRadius - this.config.minPercentageRadius)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setRadius(this.gameObject.config.graphicLight.radius * newRadiusPercentage);\n\n              setTimer();\n            }\n\n          },\n          callbackScope: this,\n          repeat: 0\n        });\n      };\n\n      setTimer();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      if (this.config.backToInitialIntensity) {\n        this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity);\n        this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity);\n      } else {\n        this.gameObject.config.graphicLight.intensity = this.gameObject.graphicLight.intensity;\n        this.gameObject.config.diffusedLight.intensity = this.gameObject.diffusedLight.intensity;\n      }\n      if (this.config.backToInitialRadius) {\n        this.gameObject.graphicLight.setRadius(this.gameObject.config.graphicLight.radius);\n      } else {\n        this.gameObject.config.graphicLight.radius = this.gameObject.graphicLight.radius;\n      }\n    });\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * Components are attachable to Sprites in order to extend their capabilities.\n * @namespace TDLib.Components\n */\n\nconst Components = {\n  Component: require('./Component'),\n  ActionComponent: require('./ActionComponent'),\n  BehaviourComponent: require('./BehaviourComponent'),\n  EffectComponent: require('./EffectComponent')\n};\n\nmodule.exports = Components;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Component from './Component';\nimport Behaviours from '../sprites/behaviours';\n\n/**\n * @classdesc\n * Class representing the BehaviourComponent.\n * BehaviourComponent is responsible to handle all the behaviours of a Sprite.\n * A Sprite can be INERT, OBSERVABLE, EXAMINABLE, INTERACTIVE, INVENTORY, TALKABLE.\n *\n * @class BehaviourComponent\n * @memberof TDLib.Components\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Sprites.Sprite} gameObject - The Sprite that owns the component.\n * @param {string} type - The type of behaviour of the gameObject.\n * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n */\nexport default class BehaviourComponent extends Component {\n  constructor(gameObject, type, pixelPerfect) {\n    super(gameObject);\n\n    /**\n     * A reference to the player in the current room.\n     * @type {TDLib.Sprites.Characters.Player}\n     * @name TDLib.Components.BehaviourComponent#player\n     * @since 1.0.0\n     */\n    this.player;\n    if (typeof this.gameObject.room.player === 'undefined') this.player = this.gameObject;\n    else this.player = this.gameObject.room.player;\n\n    /**\n     * The type of behaviour of the gameObject.\n     * @type {string}\n     * @name TDLib.Components.BehaviourComponent#type\n     * @since 1.0.0\n     */\n    this.type = type;\n\n    /**\n     * If not null enable the pixel perfect pointer hit for the Sprite.\n     * @type {string}\n     * @name TDLib.Components.BehaviourComponent#pixelPerfect\n     * @since 1.0.0\n     */\n    this.pixelPerfect = pixelPerfect;\n\n    this._addBehaviours();\n  }\n\n  /**\n   * Select the appropriate behaviour for the gameObject.\n   *\n   * @method TDLib.Components.BehaviourComponent#_addBehaviours\n   * @protected\n   * @since 1.0.0\n   */\n  _addBehaviours() {\n    // Se l'oggetto è osservabile (cioè esaminabile o interagibile) setto il cursore appropriato\n    if (this.type === Behaviours.EXAMINABLE || this.type === Behaviours.INTERACTIVE) {\n      this.observe = new Behaviours.Observable(this);\n      if (this.type === Behaviours.EXAMINABLE) this.examine = new Behaviours.Examinable(this);\n      else if (this.type === Behaviours.INTERACTIVE) this.interact = new Behaviours.Interactive(this);\n    }\n  }\n}\n","const Effects = {\n  Effect: require('./Effect'),\n  LightEffects: require('./light-effects')\n};\n\nmodule.exports = Effects;\n","import EffectComponent from '../../components/EffectComponent';\n\nexport default class Effect {\n  constructor(invoker, config = {}) {\n\n    this.invoker = invoker;\n\n    this.config = config;\n\n    this.gameObject = invoker.gameObject;\n\n    this.name = this.constructor.name;\n  }\n\n  play(callback = () => { }) {\n    if (this.invoker instanceof EffectComponent) {\n      callback();\n    } else console.log('Effects can only be played by the EffectComponent');\n  }\n\n  stop(callback = () => { }) {\n    if (this.invoker instanceof EffectComponent) {\n      callback();\n    } else console.log('Effects can only be stopped by the EffectComponent');\n  }\n}\n","import LightEffect from './LightEffect';\n\nexport default class HardFlickering extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.5);\n\n    if (!this.config.minTime) this.config.minTime = 10;\n    if (!this.config.maxTime) this.config.maxTime = 400;\n    if (!this.config.finalState) this.config.finalState = 'on';\n  }\n\n  play() {\n    super.play(() => {\n      let setTimer = () => {\n        this.gameObject.room.time.addEvent({\n          delay: Math.floor(Math.random() * (this.config.maxTime - this.config.minTime)) + this.config.minTime,\n          callback: () => {\n            if (!this.stopped) {\n              if (this.gameObject.initialConfig.graphicLight !== null) {\n                if (this.gameObject.graphicLight.intensity === 0) this.gameObject.graphicLight.setIntensity(this.gameObject.initialConfig.graphicLight.intensity);\n                else this.gameObject.graphicLight.setIntensity(0);\n              }\n\n              if (this.gameObject.initialConfig.diffusedLight !== null) {\n                if (this.gameObject.diffusedLight.intensity === 0) this.gameObject.diffusedLight.setIntensity(this.gameObject.initialConfig.diffusedLight.intensity);\n                else this.gameObject.diffusedLight.setIntensity(0);\n              }\n              setTimer();\n            }\n          },\n          callbackScope: this,\n          repeat: 0\n        });\n      };\n\n      setTimer();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      if (this.config.finalState === 'on') {\n        if (this.gameObject.initialConfig.graphicLight !== null) {\n          this.gameObject.graphicLight.setIntensity(this.gameObject.initialConfig.graphicLight.intensity);\n        }\n        if (this.gameObject.initialConfig.diffusedLight !== null) {\n          this.gameObject.diffusedLight.setIntensity(this.gameObject.initialConfig.diffusedLight.intensity);\n        }\n      } else if (this.config.finalState === 'off') {\n        this.gameObject.turnOff();\n      }\n    });\n  }\n}\n","import LightEffect from './LightEffect';\n\nexport default class SoftFlickering extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.8);\n\n    if (!this.config.minTime) this.config.minTime = 10;\n    if (!this.config.maxTime) this.config.maxTime = 100;\n    if (!this.config.minPercentageIntensity) this.config.minPercentageIntensity = 0.8;\n    if (!this.config.maxPercentageIntensity) this.config.maxPercentageIntensity = 1;\n    if (!this.config.backToInitialIntensity) this.config.backToInitialIntensity = true;\n  }\n\n  play() {\n    super.play(() => {\n      let setTimer = () => {\n        this.gameObject.room.time.addEvent({\n          delay: Math.floor(Math.random() * (this.config.maxTime - this.config.minTime)) + this.config.minTime,\n          callback: () => {\n            if (!this.stopped) {\n              let newIntensityPercentage = Math.floor((this.config.minPercentageIntensity + Math.random() * (this.config.maxPercentageIntensity - this.config.minPercentageIntensity)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity * newIntensityPercentage);\n              this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity * newIntensityPercentage);\n              setTimer();\n            }\n          },\n          callbackScope: this,\n          repeat: 0\n        });\n      };\n\n      setTimer();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      if (this.config.backToInitialIntensity) {\n        this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity);\n        this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity);\n      } else {\n        this.gameObject.config.graphicLight.intensity = this.gameObject.graphicLight.intensity;\n        this.gameObject.config.diffusedLight.intensity = this.gameObject.diffusedLight.intensity;\n      }\n    });\n  }\n}\n","import WorldItem from '../WorldItem';\nimport Behaviours from '../../behaviours';\nimport EffectComponent from '../../../components/EffectComponent';\n\nexport default class LightSource extends WorldItem {\n  /**\n   * constructor of the class\n   * @param {Room} room - Room in which will be created the LightSource.\n   * @param {number} x - X position of the sprite.\n   * @param {number} y - Y position of the sprite.\n   * @param {string} texture - Name of the sprite for the LightSource.\n   * @param {string} layer - Name of the Layer in which will be put the LightSource.\n   * @param {Object} graphicLightConfig - Configuration of the graphic light of the LightSource.\n   * @param {number} graphicLightConfig.intensity - Intensity of the graphic light.\n   * @param {number} graphicLightConfig.radius - Radius of the graphic light.\n   * @param {Object} diffusedLightConfig - Configuration of the diffused light of the LightSource.\n   * @param {number} diffusedLightConfig.intensity - Intensity of the diffused light.\n   * @param {number} diffusedLightConfig.radius - Radius of the diffused light.\n   * @param {Object} offset - Offset of the graphic light respect the center of the sprite.\n   * @param {number} offset.x - X offset.\n   * @param {number} offset.y - Y offset.\n   * @param {boolean} [isOn=true] - Light created as switched on or off.\n   */\n  constructor(room, x, y, texture, layer, graphicLightConfig, diffusedLightConfig, offset, isOn = true) {\n    super(room, x, y, texture, layer, true, Behaviours.EXAMINABLE);\n\n    this.setGravityY(0);\n\n    this.initialConfig = {\n      graphicLight: graphicLightConfig,\n      diffusedLight: diffusedLightConfig,\n      offset: offset\n    };\n\n    this.config = this.initialConfig;\n\n    this.isOn = false;\n    if (isOn) {\n      this.turnOn();\n    }\n\n    // Register this LightSource instance to the Room's LightManager\n    this.room.lightSources.add(this);\n    this.effects = new EffectComponent(this);\n  }\n\n  /**\n   * Turn on the lights of the LightSource by creating new ones.\n   */\n  turnOn() {\n    if (!this.isOn) {\n      if (this.initialConfig.diffusedLight !== null) {\n        this.diffusedLight = this.room.lights.addLight(this.x + this.initialConfig.offset.x, this.y + this.initialConfig.offset.y, this.initialConfig.diffusedLight.radius).setIntensity(this.initialConfig.diffusedLight.intensity);\n        this.room.lightSources.diffusedLights.push(this.diffusedLight);\n      }\n\n      if (this.initialConfig.graphicLight !== null) {\n        this.graphicLight = this.room.lights.addLight(this.x + this.initialConfig.offset.x, this.y + this.initialConfig.offset.y, this.initialConfig.graphicLight.radius).setIntensity(this.initialConfig.graphicLight.intensity);\n        this.room.lightSources.graphicLights.push(this.graphicLight);\n      }\n\n      this.isOn = true;\n    }\n  }\n\n  /**\n     * Turn off the lights of the LightSource by deleting the existing ones.\n     * @param {boolean} [stopBehaviours=true] - If true, turning off the light stops all the behaviours.\n     */\n  turnOff(stopBehaviours = true) {\n\n    // if (stopBehaviours) this.lightBehaviour.stopAllBehaviours();\n    if (this.isOn) {\n      let diffusedLightindex = this.room.lightSources.diffusedLights.indexOf(this.diffusedLight);\n\n      if (diffusedLightindex > -1) {\n        this.room.lightSources.diffusedLights.splice(diffusedLightindex, 1);\n        this.room.lights.removeLight(this.diffusedLight);\n      }\n\n      let graphicLightindex = this.room.lightSources.graphicLights.indexOf(this.graphicLight);\n\n      if (graphicLightindex > -1) {\n        this.room.lightSources.graphicLights.splice(graphicLightindex, 1);\n        this.room.lights.removeLight(this.graphicLight);\n      }\n\n      this.isOn = false;\n    }\n  }\n\n  /**\n   * If the light source is on, turn it off and vice versa.\n   */\n  switch() {\n    if (this.isOn) this.turnOff();\n    else this.turnOn();\n  }\n}\n","const Utils = {\n  getScreenProps: require('./Utils')\n};\n\nmodule.exports = Utils;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * A Manager is a controller working at a Room level.\n * It is unique in its own Room, but it isn't in the whole game.\n * From Phaser library a Manager is handled as a Phaser.Plugins.ScenePlugin.\n * It has to be added to the game into Game.js through the specified method.\n * @see TDLib.Game#_setPlugins\n * @namespace TDLib.Managers\n */\n\nconst Managers = {\n  LayerManager: require('./layers/LayerManager'),\n  LightSourceManager: require('./light-sources/LightSourceManager'),\n  Manager: require('./Manager'),\n  UpdateManager: require('./updates/UpdateManager')\n};\n\nmodule.exports = Managers;\n","const Systems = {\n  CursorSystem: require('./cursors/CursorSystem'),\n  RoomSystem: require('./rooms/RoomSystem')\n};\n\nmodule.exports = Systems;\n","import Sprite from '../Sprite';\nimport Behaviour from '../behaviours';\nimport Components from '../../components';\nimport CONST from '../../const';\n\n/**\n * The characters namespace.\n * @namespace TDLib.Sprites.Characters\n * @since 1.0.0\n */\n\n/**\n * Class representing a Character.\n * @extends TDLib.Sprites.Sprite\n * @memberof TDLib.Sprites.Characters\n * @since 1.0.0\n */\nexport default class Character extends Sprite {\n  /**\n   * Create a new Character.\n   * @param {Room} room - The room where the character is created.\n   * @param {number} x - The x coordinate of the character.\n   * @param {number} y - The y coordinate of the character.\n   * @param {string} texture - The character's graphic.\n   * @param {string} layer - The character's layer.\n   */\n  constructor(room, x, y, texture, layer) {\n    super(...arguments, true, Behaviour.INTERACTIVE, { alphaTolerance: 1 });\n\n    /**\n     * The ActionComponent for this character.\n     * @type {Components.ActionComponent}\n     * @since 1.0.0\n     */\n    this.actions = new Components.ActionComponent(this);\n\n    /**\n     * The facing of the character.\n     * @type {TDLCharacter.FACING}\n     * @since 1.0.0\n     */\n    this.facing = CONST.RIGHT;\n  }\n\n  create() {\n    super.create();\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport CONST from './const';\nimport Phaser from 'phaser';\n\n/**\n * @namespace TDLib\n */\n\nvar TDLib = {\n  Components: require('./components'),\n  Game: require('./boot/Game'),\n  Managers: require('./managers'),\n  Rooms: require('./rooms'),\n  Settings: require('./boot/Settings'),\n  Sprites: require('./sprites'),\n  Systems: require('./systems'),\n  Utils: require('./utils')\n};\n\n// Merge the consts\nTDLib = Phaser.Utils.Objects.Extend(false, TDLib, CONST);\n\n// Export the module\nmodule.exports = TDLib;\nglobal.TDLib = TDLib;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Component from './Component';\nimport Actions from '../sprites/actions';\n\n/**\n * @classdesc\n * Class representing the ActionComponent.\n * ActionComponent is responsible to handle all the actions for a Sprite.\n *\n * @class ActionComponent\n * @memberof TDLib.Components\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Sprites.Sprite} gameObject - The performer of the action.\n */\nexport default class ActionComponent extends Component {\n  constructor(gameObject) {\n    super(gameObject);\n\n    /**\n     * The performer of the action.\n     * @type {TDLib.Sprites.Sprite}\n     * @name TDLib.Components.ActionComponent#gameObject\n     * @since 1.0.0\n     */\n    this.gameObject = gameObject;\n\n    /**\n     * The default action to be played, AIdle by default.\n     * @type {TDLib.Components.Actions.Action}\n     * @name TDLib.Components.ActionComponent#defaultAction\n     * @since 1.0.0\n     */\n    this.defaultAction = new Actions.Idle(this, this.gameObject);\n\n    /**\n     * The queue of actions.\n     * @type {Array}\n     * @name TDLib.Components.ActionComponent#_queue\n     * @protected\n     * @since 1.0.0\n     */\n    this._queue = [this.defaultAction];\n    this._queue[0]._start();\n  }\n\n  /**\n   * Using this mode the queue is emptied and the new action is immediately performed.\n   * @name TDLib.Components.ActionComponent#DEFAULT_MODE\n   * @since 1.0.0\n   */\n  static get DEFAULT_MODE() {\n    return 0;\n  }\n\n  /**\n   * Using this mode the new action is added to the queue.\n   * @name TDLib.Components.ActionComponent#QUEUE_MODE\n   * @since 1.0.0\n   */\n  static get QUEUE_MODE() {\n    return 1;\n  }\n\n  /**\n   * Using this mode the currently performed action is paused and the new action is immediately performed.\n   * Then the paused action is resumed.\n   * @name TDLib.Components.ActionComponent#PAUSE_MODE\n   * @since 1.0.0\n   */\n  static get PAUSE_MODE() {\n    return 2;\n  }\n\n  /**\n   * Starts a new action or add that to the queue.\n   *\n   * @method TDLib.Components.ActionComponent#add\n   * @param {TDLib.Components.Sprites.Actions.Action} action - The action to add or execute.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   * @param {number} [mode=ActionComponent.DEFAULT_MODE] - The operating mode of the component.\n   * @since 1.0.0\n   */\n  add(Action, config, mode = ActionComponent.DEFAULT_MODE) {\n\n    let newAction = new Action(this, this.gameObject, config);\n\n    switch (mode) {\n      case ActionComponent.DEFAULT_MODE: {\n        this._queue[0]._abort();\n        this._queue = [];\n        this._queue.push(newAction);\n        this._queue[0]._start();\n      };\n        break;\n\n      case ActionComponent.QUEUE_MODE: {\n        this._queue.push(newAction);\n      };\n        break;\n\n      case ActionComponent.PAUSE_MODE: {\n        this._queue[0]._pause();\n        this._queue.unshift(newAction);\n        this._queue[0]._start();\n      };\n        break;\n    }\n\n    return newAction;\n  }\n\n  /**\n   * Remove a completed action from the queue.\n   *\n   * @method TDLib.Components.ActionComponent#_remove\n   * @protected\n   * @since 1.0.0\n   */\n  _remove() {\n    this._queue.shift();\n    if (this._queue.length <= 0) this._queue.push(this.defaultAction);\n    if (this._queue[0].isPaused) this._queue[0]._resume();\n    else this._queue[0]._start();\n  }\n\n  /**\n   * Update the currently performed action.\n   *\n   * @method TDLib.Components.ActionComponent#_update\n   * @protected\n   * @since 1.0.0\n   */\n  _update() {\n    if (this._queue.length <= 0) this._queue.push(this.defaultAction);\n    else if (this._queue.length > 1 && this._queue[0].name === 'Idle') {\n      this._queue.shift();\n      if (this._queue[0].isPaused) this._queue[0]._resume();\n      else this._queue[0]._start();\n    }\n\n    this._queue[0]._update();\n  }\n}\n","import Action from '../Action';\nimport WalkTo from '../walk-to/WalkTo';\n\nexport default class Examine extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new WalkTo(this, this.actor, this.config),\n        this.target.behaviours.examine.getAction(this)\n      ]\n    );\n  }\n}\n","const Settings = {\n  MICRO_MOVEMENT_RADIUS: 6\n};\n\nmodule.exports = Settings;\n","const Settings = {\n  WALK_VELOCITY: 100,\n  MICRO_MOVEMENT_RADIUS: 20\n};\n\nmodule.exports = Settings;\n","import Action from '../Action';\nimport CONST from '../../../const';\n\n/**\n * Class representing the idle action.\n * @extends TDLib.Components.Actions.Action\n * @memberof TDLib.Components.Actions\n */\nexport default class Idle extends Action {\n  /**\n   * Start a new idle action.\n   * @param {Components.ActionComponent|Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @param {TDLSprite} actor - The actor who performs the action.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   */\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      new Action.BaseAction(\n        this,\n        () => {\n          this.actor.body.setVelocity(0);\n          switch (this.actor.facing) {\n\n            case CONST.LEFT: {\n              this.actor.anims.play('idle');\n              // this.actor.anims.play('idleLeft');\n            }\n              break;\n\n            case CONST.RIGHT: {\n              this.actor.anims.play('idle');\n              // this.actor.anims.play('idleRight');\n            }\n              break;\n\n            // possibili altri casi di facing (es girato di spalle o da davanti)\n          }\n        }\n      )\n    );\n  }\n}\n","import Action from '../Action';\nimport WalkTo from '../walk-to/WalkTo';\n\nexport default class Interact extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new WalkTo(this, this.actor, this.config),\n        this.target.behaviours.interact.getAction(this)\n      ]\n    );\n  }\n}\n","import Action from '../Action';\nimport FaceTo from '../face-to/FaceTo';\n\nexport default class Observe extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new FaceTo(this, this.actor, this.config),\n        this.target.behaviours.observe.getAction(this)\n      ]\n    );\n  }\n}\n","import Action from '../Action';\nimport FaceTo from '../face-to/FaceTo';\nimport Settings from './Settings';\n\n// da cambiare e mettere tutta dentro l'AWalkTo e fare un Move to che distingua che azioni chiamare?\nexport default class RunTo extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new FaceTo(this, this.actor, this.config),\n        new Action.BaseAction(\n          this,\n          () => {\n            if (Math.abs(this.actor.x - this.target.x) > Settings.MICRO_MOVEMENT_RADIUS) {\n              if (this.actor.x < this.target.x) {\n                this.actor.anims.play('run');\n                // this.actor.anims.play('runRight');\n                this.actor.body.setVelocity(Settings.RUN_VELOCITY);\n              } else if (this.actor.x > this.target.x) {\n                this.actor.anims.play('run');\n                // this.actor.anims.play('runLeft');\n                this.actor.body.setVelocity(-Settings.RUN_VELOCITY);\n              }\n              console.log('start to run to ', config.target.x);\n            } else {\n              this.finish();\n            }\n          },\n          () => {\n            this.actor.body.setVelocity(0);\n          },\n          () => {\n            if ((this.actor.x - this.target.x) * this.actor.body.velocity.x > 0) this.finish();\n          }\n        )\n      ]\n    );\n  }\n}\n","const Settings = {\n  RUN_VELOCITY: 240,\n  MICRO_MOVEMENT_RADIUS: 20\n};\n\nmodule.exports = Settings;\n","const CONST = {\n  EXAMINABLE: 'EXAMINABLE',\n  INERT: 'INERT',\n  INTERACTIVE: 'INTERACTIVE',\n  TALKABLE: 'TALKABLE',\n  INVENTORY: 'INVENTORY',\n\n  DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE: 0.05,\n  DEFAULT_OBSERVE_TEXT: 'Observe default text',\n  DEFAULT_NO_LIGHT_OBSERVE_TEXT: 'NoLightObserve default text',\n  DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT: 0.04,\n  DEFAULT_EXAMINE_OR_INTERACT_TEXT: 'ExamineOrInteract default text',\n  DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT: 'NoLightExamineOrInteract default text'\n};\n\nmodule.exports = CONST;\n","import Behaviour from '../Behaviour';\nimport Action from '../../actions/Action';\n\nexport default class Examinable extends Behaviour {\n  constructor(component) {\n    super(component);\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Action.BaseAction(\n      invoker,\n      () => {\n        // Fare i controlli su quanta luce c'è nella stanza!\n        if (this.checkLight(this.gameObject.minLightLevelToExamineOrInteract)) console.log(this.gameObject.examineOrInteractText);\n        else console.log(this.gameObject.noLightExamineOrInteractText);\n        invoker.finish();\n      }\n    );\n  }\n}\n","import Behaviour from '../Behaviour';\nimport Action from '../../actions/Action';\n\nexport default class Interactive extends Behaviour {\n  constructor(component) {\n    super(component);\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Action.BaseAction(\n      invoker,\n      () => {\n        // Fare i controlli su quanta luce c'è nella stanza!\n        if (this.checkLight(this.gameObject.minLightLevelToExamineOrInteract)) console.log(this.gameObject.examineOrInteractText);\n        else console.log(this.gameObject.noLightExamineOrInteractText);\n        invoker.finish();\n      }\n    );\n  }\n}\n","import Behaviour from '../Behaviour';\nimport Actions from '../../actions';\nimport Settings from './Settings';\n\nexport default class Observable extends Behaviour {\n  constructor(component) {\n    super(component);\n\n    this._timer;\n  }\n\n  add() {\n    super.add();\n\n    this.gameObject.on('pointerover', function (pointer) {\n      this.cursors.setCursor(this.gameObject);\n\n      this._timer = this.gameObject.room.time.addEvent({\n        delay: Settings.DEFAULT_MIN_TIME_TO_OBSERVE,\n        callback: () => {\n          if (this.gameObject !== this.room.player && !this.room.player.isBlocked) this.room.player.actions.add(Actions.Observe, { target: this.gameObject });\n        },\n        callbackScope: this\n      });\n    }.bind(this));\n\n    this.gameObject.on('pointerout', function (pointer) {\n      this._timer.remove(false);\n      this.cursors.setCursor();\n    }.bind(this));\n  }\n\n  /**\n   * Delete the timer which starts the AObserve action.\n   */\n  abort() {\n    this._timer.remove(false);\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Actions.Action.BaseAction(\n      invoker,\n      () => {\n        // Fare i controlli su quanta luce c'è nella stanza!\n        if (this.checkLight(this.gameObject.minLightLevelToObserve)) console.log(this.gameObject.observeText);\n        else console.log(this.gameObject.noLightObserveText);\n        invoker.finish();\n      }\n    );\n  }\n}\n","const Settings = {\n  DEFAULT_MIN_TIME_TO_OBSERVE: 1200\n};\n\nmodule.exports = Settings;\n","export default class Inventory {\n  constructor() {\n\n  }\n}\n","const LightEffects = {\n  HardFlickering: require('./HardFlickering'),\n  HardFlickeringAndTrembling: require('./HardFlickeringAndTrembling'),\n  LightEffect: require('./LightEffect'),\n  RadiusFlickering: require('./RadiusFlickering'),\n  SoftFlickering: require('./SoftFlickering'),\n  SoftFlickeringAndTrembling: require('./SoftFlickeringAndTrembling'),\n  Trembling: require('./Trembling')\n};\n\nmodule.exports = LightEffects;\n","import LightEffect from './LightEffect';\nimport HardFlickering from './HardFlickering';\nimport Trembling from './Trembling';\n\nexport default class HardFlickeringAndTrembling extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.5);\n\n    this.hardFlickering = new HardFlickering(this.invoker, this.config);\n    this.trembling = new Trembling(this.invoker, this.config);\n  }\n\n  play() {\n    super.play(() => {\n      this.hardFlickering.play();\n      this.trembling.play();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      this.hardFlickering.stop();\n      this.trembling.stop();\n    });\n  }\n}\n","import LightEffect from './LightEffect';\n\nexport default class RadiusFlickering extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.9);\n\n    if (!this.config.minTime) this.config.minTime = 10;\n    if (!this.config.maxTime) this.config.maxTime = 100;\n    if (!this.config.minPercentageIntensity) this.config.minPercentageIntensity = 0.8;\n    if (!this.config.maxPercentageIntensity) this.config.maxPercentageIntensity = 1;\n    if (!this.config.minPercentageRadius) this.config.minPercentageRadius = 0.8;\n    if (!this.config.maxPercentageRadius) this.config.maxPercentageRadius = 1;\n    if (!this.config.backToInitialIntensity) this.config.backToInitialIntensity = true;\n    if (!this.config.backToInitialRadius) this.config.backToInitialRadius = true;\n  }\n\n  play() {\n    super.play(() => {\n      var setTimer = () => {\n        this.gameObject.room.time.addEvent({\n          delay: Math.floor(Math.random() * (this.config.maxTime - this.config.minTime)) + this.config.minTime,\n          callback: () => {\n            if (!this.stopped) {\n              let newIntensityPercentage = Math.floor((this.config.minPercentageIntensity + Math.random() * (this.config.maxPercentageIntensity - this.config.minPercentageIntensity)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity * newIntensityPercentage);\n              this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity * newIntensityPercentage);\n              let newRadiusPercentage = Math.floor((this.config.minPercentageRadius + Math.random() * (this.config.maxPercentageRadius - this.config.minPercentageRadius)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setRadius(this.gameObject.config.graphicLight.radius * newRadiusPercentage);\n\n              setTimer();\n            }\n\n          },\n          callbackScope: this,\n          repeat: 0\n        });\n      };\n\n      setTimer();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      if (this.config.backToInitialIntensity) {\n        this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity);\n        this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity);\n      } else {\n        this.gameObject.config.graphicLight.intensity = this.gameObject.graphicLight.intensity;\n        this.gameObject.config.diffusedLight.intensity = this.gameObject.diffusedLight.intensity;\n      }\n      if (this.config.backToInitialRadius) {\n        this.gameObject.graphicLight.setRadius(this.gameObject.config.graphicLight.radius);\n      } else {\n        this.gameObject.config.graphicLight.radius = this.gameObject.graphicLight.radius;\n      }\n    });\n  }\n}\n","import LightEffect from './LightEffect';\nimport SoftFlickering from './SoftFlickering';\nimport Trembling from './Trembling';\n\nexport default class SoftDefaultFlickeringAndtrembling extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.5);\n\n    this.softFlickering = new SoftFlickering(this.invoker, this.config);\n    this.trembling = new Trembling(this.invoker, this.config);\n  }\n\n  play() {\n    super.play(() => {\n      this.softFlickering.play();\n      this.trembling.play();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      this.softFlickering.stop();\n      this.trembling.stop();\n    });\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Settings from './Settings';\nimport DebugHeader from './DebugHeader';\nimport Utils from '../utils';\nimport Managers from '../managers';\nimport Systems from '../systems';\nimport Boot from './Boot';\nimport Phaser from 'phaser';\nimport filterObj from 'filter-obj';\n\n/**\n * @classdesc\n * The TDLib.Game instance is the main controller for the entire game. It create an instace\n * of Phaser.Game with a default configuration of various parameters.\n *\n * @class Game\n * @memberof TDLib\n * @constructor\n * @since 1.0.0\n *\n * @param {Object} [config] - The configuration object for your TDLib Game instance.\n * @param {Object} [config.title] - The title of your game.\n * @param {Object} [config.url] - The url of your online game or website.\n * @param {Object} [config.version] - The version of your game.\n */\nexport default class Game {\n  constructor(config) {\n    /**\n     * The parsed Game Configuration object.\n     *\n     * The values stored within this object are read-only and should not be changed at run-time.\n     *\n     * @name TDLib.Game#config\n     * @type {Object}\n     * @readonly\n     * @since 1.0.0\n     */\n    this.config = config;\n    this._setScreenConfig();\n    this._setPhysicsConfig();\n    this._setPlugins();\n    this._setBoot();\n    this._setHeaderProps();\n    this._finalizeConfig();\n\n    /** ************ TODO: Aggiungere il device e la funzione per determinarlo **************/\n    Settings.STARTING_ROOM = this.config.startingRoom;\n    Settings.GAME_SPRITES = this._setGameSprites(Phaser.Utils.Objects.Clone(this.config.sprites));\n    Settings.GAME = new Phaser.Game(this.config);\n\n    DebugHeader(Settings.GAME);\n    return Settings.GAME;\n  }\n\n  /**\n   * This method is called automatically and configure the screen proportions and settings for the Game.\n   *\n   * @method TDLib.Game#_setScreenConfig\n   * @protected\n   * @since 1.0.0\n   */\n  _setScreenConfig() {\n    Settings.SCREEN_PROPS = Utils.getScreenProps();\n\n    this.config.width = Settings.SCREEN_PROPS.calculatedWidth;\n    this.config.height = Settings.SCREEN_PROPS.calculatedHeight;\n    this.config.zoom = Settings.SCREEN_PROPS.calculatedZoom;\n\n    this.config.autoResize = false;\n    this.config.backgroundColor = '#000000';\n    this.config.pixelArt = true;\n  }\n\n  /**\n   * This method is called automatically and configure physics for the Game using the Arcade engine of Phaser.\n   *\n   * @method TDLib.Game#_setPhysicsConfig\n   * @protected\n   * @since 1.0.0\n   */\n  _setPhysicsConfig() {\n    this.config.physics = {\n      default: 'arcade',\n      arcade: {\n        debug: false,\n        gravity: { y: 0, x: 0 }\n      }\n    };\n  }\n\n  /**\n   * This method is called automatically and configure the plugins for the Game.\n   * Global plugins are called Systems.\n   * Scene plugins are called Managers.\n   *\n   * @method TDLib.Game#_setPlugins\n   * @protected\n   * @since 1.0.0\n   */\n  _setPlugins() {\n    this.config.plugins = {\n      // Systems\n      global: [\n        { key: 'RoomSystem', plugin: Systems.RoomSystem, start: false, mapping: 'rooms' },\n        { key: 'CursorSystem', plugin: Systems.CursorSystem, start: false, mapping: 'cursors' }\n      ],\n      // Managers\n      scene: [\n        { key: 'UpdateManager', plugin: Managers.UpdateManager, mapping: 'updates' },\n        { key: 'LightSourceManager', plugin: Managers.LightSourceManager, mapping: 'lightSources' },\n        { key: 'LayerManager', plugin: Managers.LayerManager, mapping: 'layers' }\n      ]\n    };\n  }\n\n  /**\n   * This method is called automatically and configure the Phaser.Scene Boot to start the Systems.\n   *\n   * @method TDLib.Game#_setBoot\n   * @protected\n   * @since 1.0.0\n   */\n  _setBoot() {\n    this.config.scene = [Boot];\n  }\n\n  /**\n   * This method is called automatically and turn off the default Phaser header/banner.\n   *\n   * @method TDLib.Game#_setHeaderProps\n   * @protected\n   * @since 1.0.0\n   */\n  _setHeaderProps() {\n    this.config.banner = false;\n  }\n\n  _setGameSprites(obj) {\n    function haveChildObject(father) {\n      let flag = false;\n\n      if (Object.keys(filterObj(obj, (key, value) => (\n        // eslint-disable-next-line eqeqeq\n        typeof value == 'object' &&\n        // eslint-disable-next-line eqeqeq\n        typeof value.default != 'function' &&\n        Object.keys(value).length > 0))).length > 0) flag = true;\n      return flag;\n    }\n\n    function getChildrenFromFather(father) {\n      let output = [];\n\n      for (let key in father) {\n        output.push(father[key]);\n      }\n\n      return output;\n    }\n\n    if (haveChildObject(obj)) {\n      // eslint-disable-next-line eqeqeq\n      let objectsObj = filterObj(obj, (key, value) => (typeof value == 'object' && typeof value.default != 'function'));\n\n      let temp = getChildrenFromFather(objectsObj);\n\n      temp.forEach(element => {\n        obj = Phaser.Utils.Objects.Extend(false, obj, element);\n      });\n\n      for (let key in objectsObj) delete obj[key];\n\n      return this._setGameSprites(obj);\n    }\n    return obj;\n\n  }\n\n  /**\n   * This method is called automatically and finalize the config passed to Phaser.Game.\n   *\n   * @method TDLib.Game#_finalizeConfig\n   * @protected\n   * @since 1.0.0\n   */\n  _finalizeConfig() {\n    this.config.type = Phaser.WEBGL;\n    this.config.maxLights = 20;\n    this.config.parent = 'game';\n    this.config.disableContextMenu = true;\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nvar CONST = require('../const');\nvar Settings = require('./Settings');\n\n/**\n * Called automatically by Phaser.Game and responsible for creating the console.log debug header.\n *\n * You can customize or disable the header via the Game Config object.\n *\n * @function TDLib.Boot.DebugHeader\n * @since 1.0.0\n *\n * @param {TDLib.Game} game - The TDLib.Game instance which will output this debug header.\n */\nvar DebugHeader = function (game) {\n  let config = game.config;\n\n  config.bannerBackgroundColor = '#0002e6';\n  config.bannerTextColor = '#ffffff';\n  config.hidePhaser = false;\n\n  let renderType = 'WebGL';\n\n  if (config.renderType !== 2) {\n    renderType = 'NULL';\n  }\n\n  let audioConfig = config.audio;\n\n  let deviceAudio = game.device.audio;\n\n  let audioType;\n\n  if (deviceAudio.webAudio && !(audioConfig && audioConfig.disableWebAudio)) {\n    audioType = 'Web Audio';\n  } else if ((audioConfig && audioConfig.noAudio) || (!deviceAudio.webAudio && !deviceAudio.audioData)) {\n    audioType = 'No Audio';\n  } else {\n    audioType = 'HTML5 Audio';\n  }\n\n  if (!game.device.browser.ie) {\n    let c = '';\n\n    let args = [c];\n\n    if (Array.isArray(config.bannerBackgroundColor)) {\n      let lastColor;\n\n      config.bannerBackgroundColor.forEach(function (color) {\n        c = c.concat('%c ');\n\n        args.push('background: ' + color);\n\n        lastColor = color;\n\n      });\n\n      //  inject the text color\n      args[args.length - 1] = 'color: ' + config.bannerTextColor + '; background: ' + lastColor;\n    } else {\n      c = c.concat('%c ');\n\n      args.push('color: ' + config.bannerTextColor + '; background: ' + config.bannerBackgroundColor);\n    }\n\n    //  URL link background color (always white)\n    args.push('background: #fff');\n\n    if (config.gameTitle) {\n      c = c.concat(config.gameTitle);\n\n      if (config.gameVersion) {\n        c = c.concat(' v' + config.gameVersion);\n      }\n\n      if (!config.hidePhaser) {\n        c = c.concat(' / ');\n      }\n    }\n\n    if (!config.hidePhaser) {\n      c = c.concat('TDLib v' + CONST.VERSION + ' / Phaser v' + CONST.PHASER_VERSION);\n      c = c.concat(' (' + renderType + ' | ' + audioType + ' | ' + Settings.DEVICE + ')');\n    }\n\n    c = c.concat(' %c ' + config.gameURL);\n\n    //  Inject the new string back into the args array\n    args[0] = c;\n\n    console.log.apply(console, args);\n  }\n};\n\nmodule.exports = DebugHeader;\n","import Settings from '../boot/Settings';\n\nconst getScreenProps = () => {\n  var returnValue = {};\n\n  // cz : ah = 1 : mh\n  if (Settings.DEVICE === 'MOBILE') {\n    returnValue.availHeight = window.innerHeight;\n    returnValue.availWidth = window.innerWidth;\n    returnValue.calculatedZoom = Math.floor(returnValue.availHeight / ((Settings.ROOM_HEIGHT_IN_TILE + Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE + Settings.ROOM_FRAME_IN_TILES_MOBILE * 2) * Settings.TILE_SIZE) * 100) / 100;\n  } else {\n    returnValue.availHeight = screen.height;\n    returnValue.availWidth = screen.width;\n    returnValue.calculatedZoom = Math.floor(returnValue.availHeight / ((Settings.ROOM_HEIGHT_IN_TILE + Settings.INVENTORY_HEIGHT_IN_TILES_DESKTOP + Settings.ROOM_FRAME_IN_TILES_DESKTOP * 2) * Settings.TILE_SIZE) * 100) / 100;\n  }\n\n  console.log('ZOOM: ' + returnValue.calculatedZoom);\n\n  // Sono le dimensioni riaggiustate rispetto allo zoom scelto\n  // ch : ah = 1 : cz\n  returnValue.calculatedHeight = Math.ceil(returnValue.availHeight / returnValue.calculatedZoom);\n  returnValue.calculatedWidth = Math.ceil(returnValue.availWidth / returnValue.calculatedZoom);\n\n  console.log('AVAIL-H: ' + returnValue.availHeight + '\\nCALC-H: ' + returnValue.calculatedHeight);\n  console.log('AVAIL-W: ' + returnValue.availWidth + '\\nCALC-W: ' + returnValue.calculatedWidth);\n\n  return returnValue;\n};\n\nmodule.exports = getScreenProps;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Manager from '../Manager';\nimport Settings from './Settings';\n\n/**\n * @classdesc\n * Class representing a LayerManager, responsible to manage\n * the layers order, in order to have all the elements rendered correctly.\n * Layers are Phaser.GameObjects.Group.\n *\n * @class LayerManager\n * @extends TDLib.Managers.Manager\n * @memberof TDLib.Managers\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Rooms.Room|Phaser.Scene} room - The room running the Manager.\n * @param {Phaser.Plugins.PluginManager} - A reference to Phaser PluginManager.\n */\nexport default class LayerManager extends Manager {\n  constructor(room, pluginManager) {\n    super(room, pluginManager);\n    /**\n     * The size in cells of each Layer.\n     * @type {number}\n     * @name TDLib.Managers.LayerManager#layerSize\n     * @since 1.0.0\n     */\n    this.layerSize = Settings.layerSize;\n\n    /**\n     * The starting depth of Layers.\n     * @type {number}\n     * @name TDLib.Managers.LayerManager#startingDepth\n     * @since 1.0.0\n     */\n    this.strartingDepth = Settings.startingDepth;\n  }\n\n  /**\n   * @lends TDLib.Managers.Manager.boot\n   */\n  boot() {\n    super.boot();\n    /**\n     * The Layer containing the background wall.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#backgroundLayer\n     * @since 1.0.0\n     */\n    this.backgroundLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the rear doors.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#rearDoorsLayer\n     * @since 1.0.0\n     */\n    this.rearDoorsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the objects fixed to the background wall.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#wallFurnitureLayer\n     * @since 1.0.0\n     */\n    this.wallFurnitureLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the objects in the room.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#roomFurnitureLayer\n     * @since 1.0.0\n     */\n    this.roomFurnitureLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the side doors.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#sideDoorsLayer\n     * @since 1.0.0\n     */\n    this.sideDoorsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the NPCs.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#playerLayer\n     * @since 1.0.0\n     */\n    this.npcLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the Player.\n     * @type {Phaser.GameObjects.Group}\n     * @since 1.0.0\n     */\n    this.playerLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the cieling objects from the roof.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#cielingObjectsLayer\n     * @since 1.0.0\n     */\n    this.cielingObjectsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the front doors.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#frontDoorsLayer\n     * @since 1.0.0\n     */\n    this.frontDoorsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the lateral walls.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#wallsLayer\n     * @since 1.0.0\n     */\n    this.wallsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the lateral walls black mask.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#wallsMaskLayer\n     * @since 1.0.0\n     */\n    this.wallsMaskLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the overall darkness mask.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#overallDarknessLayer\n     * @since 1.0.0\n     */\n    this.overallDarknessLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the border black masks.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#borderMasksLayer\n     * @since 1.0.0\n     */\n    this.borderMasksLayer = this.room.add.group();\n  }\n\n  /**\n   * Set the correct depth for each Layer in the right order.\n   * @method TDLib.Managers.LayerManager#setLayersDepth\n   * @since 1.0.0\n   */\n  setLayersDepth() {\n    let i = this.strartingDepth;\n\n    this.backgroundLayer.setDepth(this.layerSize * i);\n    i++;\n    this.rearDoorsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.wallFurnitureLayer.setDepth(this.layerSize * i);\n    i++;\n    this.roomFurnitureLayer.setDepth(this.layerSize * i);\n    i++;\n    this.sideDoorsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.npcLayer.setDepth(this.layerSize * i);\n    i++;\n    this.playerLayer.setDepth(this.layerSize * i);\n    i++;\n    this.cielingObjectsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.frontDoorsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.wallsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.wallsMaskLayer.setDepth(this.layerSize * i);\n    i++;\n    this.overallDarknessLayer.setDepth(this.layerSize * i);\n    i++;\n    this.borderMasksLayer.setDepth(this.layerSize * i);\n    i++;\n  }\n}\n","const Settings = {\n  layerSize: 10,\n  startingDepth: 0\n};\n\nmodule.exports = Settings;\n","import Manager from '../Manager';\nimport GlobalSettings from '../../boot/Settings';\n\nexport default class LightSourceManager extends Manager {\n  constructor(room, pluginManager) {\n    super(room, pluginManager);\n\n    this.graphicLights = [];\n    this.diffusedLights = [];\n  }\n\n  boot() {\n    super.boot();\n    this.lightSources = this.room.add.group();\n  }\n\n  add(source) {\n    this.lightSources.add(source, true);\n    this.lightSources.getChildren().forEach(lightSource => {\n      lightSource.setPipeline('Light2D');\n    });\n\n    return source;\n  }\n\n  // Le luci che flickerano o con comportamenti strani vanno contate?\n  calculateLightsContribuitePoint(target) {\n    let singleLightContributeAccumulator = 0;\n\n    this.lightSources.getChildren().forEach(light => {\n      if (light.isOn) {\n        let singleLightContribute = light.config.diffusedLight.intensity / (Math.abs(light.x + light.config.offset.x - target.x) ^ 2);\n\n        // COSE\n        if (light.effects.currentEffect) {\n          singleLightContribute *= light.effects.currentEffect.contributeFactor;\n        }\n\n        singleLightContributeAccumulator += singleLightContribute;\n      }\n    });\n\n    return Math.floor(singleLightContributeAccumulator * 10000) / 1000;\n  }\n\n  calculateAverageLightsContribute() {\n    let singleLightIntensityAccumulator = 0;\n\n    this.diffusedLights.forEach(light => {\n      singleLightIntensityAccumulator += light.intensity;\n    });\n    let averageLightsContribute = 0;\n\n    if (singleLightIntensityAccumulator !== 0) averageLightsContribute = Math.floor((singleLightIntensityAccumulator * 10000 / this.room.layers.wallsLayer.width / GlobalSettings.TILE_SIZE) * 100) / 100 + 0.3;\n    return averageLightsContribute;\n  }\n}\n","import Manager from '../Manager';\r\n\r\n/**\r\n * Class representing the update plugin.\r\n * @extends TDLib.Plugins.TDLRoomPlugin\r\n * @memberof TDLib.Plugins.RoomPlugins\r\n * @since 1.0.0\r\n */\r\nexport default class UpdateManager extends Manager {\r\n  /**\r\n   * Create a new UpdatePlugin.\r\n   * @param {TDLib.Rooms.Room} room - The room in which the layer manager operates.\r\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the plugin manager.\r\n   */\r\n  constructor(room, pluginManager) {\r\n    super(room, pluginManager);\r\n  }\r\n\r\n  /**\r\n   * Boot the plugin.\r\n   * @since 1.0.0\r\n   */\r\n  boot() {\r\n    super.boot();\r\n    const events = this.systems.events;\r\n\r\n    this.gameObjects = new Phaser.Structs.Set();\r\n\r\n    events.on('update', this._sceneUpdate, this);\r\n    events.on('shutdown', this._sceneShutdown, this);\r\n    events.once('destroy', this._sceneDestroy, this);\r\n  }\r\n\r\n  /**\r\n   * Update every game object.\r\n   * @param {*} time\r\n   * @param {*} delta\r\n   * @private\r\n   * @since 1.0.0\r\n   */\r\n  _sceneUpdate(time, delta) {\r\n    this.gameObjects.iterateLocal('update', time, delta);\r\n  }\r\n\r\n  /**\r\n   * Called at the shutdown of the scene.\r\n   * @private\r\n   * @since 1.0.0\r\n   */\r\n  _sceneShutdown() {\r\n    this.gameObjects.clear();\r\n  }\r\n\r\n  /**\r\n   * Called when the scene is destroyed.\r\n   * @private\r\n   * @since 1.0.0\r\n   */\r\n  _sceneDestroy() {\r\n    const events = this.systems.events;\r\n\r\n    events.off('update', this._scenePostUpdate, this);\r\n    events.off('shutdown', this._sceneShutdown, this);\r\n    events.off('destroy', this._sceneDestroy, this);\r\n\r\n    this.gameObjects = null;\r\n    this.scene = null;\r\n    this.systems = null;\r\n  }\r\n\r\n  /**\r\n   * Add an object to the global update loop of the game.\r\n   * @param {TDLib.Sprites.TDLSprite} obj - The object to add to the update loop.\r\n   * @since 1.0.0\r\n   */\r\n  add(obj) {\r\n    obj.once('destroy', this.remove, this);\r\n    this.gameObjects.set(obj);\r\n  }\r\n\r\n  /**\r\n   * Add multiple objects to the global update loop of the game.\r\n   * @param {TDLib.Sprites.TDLSprite[]} obj - The objects to add to the update loop.\r\n   * @since 1.0.0\r\n   */\r\n  addMultiple(objs) {\r\n    objs.forEach(this.add, this);\r\n  }\r\n\r\n  /**\r\n   * Remove an object from the global update loop of the game.\r\n   * @param {TDLib.Sprites.TDLSprite} obj - The object to remove from the update loop.\r\n   * @since 1.0.0\r\n   */\r\n  remove(obj) {\r\n    obj.off('destroy', this.remove, this);\r\n    this.gameObjects.delete(obj);\r\n  }\r\n}\r\n","import Actions from '../../sprites/actions';\nimport Behaviours from '../../sprites/behaviours';\nimport Phaser from 'phaser';\n\n/**\n * Class representing the CursorSystem, able to select the correct graphic for the cursor and to handle pointer events.\n * @extends Phaser.Plugins.BasePlugin\n * @memberof TDLib.Plugins.GlobalPlugins\n * @since 1.0.0\n */\nexport default class CursorSystem extends Phaser.Plugins.BasePlugin {\n  /**\n   * Create a new CursorSystem.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the plugin manager.\n   */\n  constructor(pluginManager) {\n    super(pluginManager);\n\n    /**\n     * The scene containing the cursor.\n     * @type {CursorSystem.CURSOR_SCENE}\n     * @since 1.0.0\n     */\n    this.cursorScene;\n\n    /**\n     * The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n     * @type {Phaser.Scenes.SceneManager}\n     * @since 1.0.0\n     */\n    this.sceneManager;\n\n    /**\n     * Save the last sprite who called the function setCursor().\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.lastTarget;\n  }\n\n  /**\n   * It's a Phaser.Scene representing the scene containing the cursor which will be put on the rooms level.\n   * @typedef {TDLib.Plugins.GlobalPlugins.CursorSystem.CursorScene}\n   * @extends {Phaser.Scenes.Scene}\n   * @since 1.0.0\n   */\n  static get CursorScene() {\n    return class CursorScene extends Phaser.Scene {\n      constructor() {\n        super(CursorSystem.CURSOR_SCENE_KEY);\n\n        this.cursor;\n      }\n\n      preload() {\n        this.load.image(CursorSystem.EXAMINABLE_CURSOR, 'assets/Cursors/CursorExamine.png');\n        this.load.image(CursorSystem.HOLD_CURSOR, 'assets/Cursors/CursorHold.png');\n        this.load.image(CursorSystem.INTERACTIVE_CURSOR, 'assets/Cursors/CursorInteract.png');\n        this.load.image(CursorSystem.DEFAULT_CURSOR, 'assets/Cursors/CursorMove.png');\n        this.load.image(CursorSystem.TALKABLE_CURSOR, 'assets/Cursors/CursorTalk.png');\n        this.load.image(CursorSystem.CHOICE_CURSOR, 'assets/Cursors/CursorChoice.png');\n        this.load.image(CursorSystem.CHOICE_PRESSED_CURSOR, 'assets/Cursors/CursorChoicePressed.png');\n      }\n\n      create() {\n        this.input.setDefaultCursor('none');\n        this.cursor = this.add.image(0, 0, CursorSystem.DEFAULT_CURSOR).setOrigin(0.4, 0.33).setDepth(100000);\n      }\n\n      update() {\n        this.cursor.setPosition(this.input.activePointer.x, this.input.activePointer.y);\n      }\n    };\n  }\n\n  /**\n   * The key of the scene containing the cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get CURSOR_SCENE_KEY() {\n    return 'CursorScene';\n  }\n\n  /**\n   * The key of the inert cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get DEFAULT_CURSOR() {\n    return 'cursorMove';\n  }\n\n  /**\n   * The key of the examine cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get EXAMINABLE_CURSOR() {\n    return 'cursorExamine';\n  }\n\n  /**\n   * The key of the interact cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get INTERACTIVE_CURSOR() {\n    return 'cursorInteract';\n  }\n\n  /**\n   * The key of the hold cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get HOLD_CURSOR() {\n    return 'cursorHold';\n  }\n\n  /**\n   * The key of the talk cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get TALKABLE_CURSOR() {\n    return 'cursorTalk';\n  }\n\n  /**\n   * The key of the choice cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get CHOICE_CURSOR() {\n    return 'cursorChoice';\n  }\n\n  /**\n   * The key of the choice pressed cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get CHOICE_PRESSED_CURSOR() {\n    return 'cursorChoicePressed';\n  }\n\n  /**\n   * Configure the cursor manager.\n   * @param {Phaser.Scenes.SceneManager} sceneManager - The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n   * @since 1.0.0\n   */\n  configure(sceneManager) {\n    this.sceneManager = sceneManager;\n    this.cursorScene = this.sceneManager.add(CursorSystem.CURSOR_SCENE_KEY, CursorSystem.CursorScene, true);\n  }\n\n  /**\n   * Handle the pointer down event.\n   * @param {TDLib.Sprites.Characters.TDLCharacter} player - The current player.\n   * @since 1.0.0\n   */\n  pointerDown(player, pointer = null) {\n    if (!player.isBlocked) {\n      switch (this.cursorScene.cursor.texture.key) {\n        case CursorSystem.DEFAULT_CURSOR: {\n          if (typeof player.room.input.activePointer.camera !== 'undefined') player.actions.add(Actions.WalkTo, { target: { x: player.room.input.activePointer.worldX } });\n        }\n          break;\n\n        case CursorSystem.EXAMINABLE_CURSOR: {\n          this.lastTarget.behaviours.observe.abort();\n          player.actions.add(Actions.Examine, { target: this.lastTarget });\n        }\n          break;\n\n        case CursorSystem.INTERACTIVE_CURSOR: {\n          this.lastTarget.behaviours.observe.abort();\n          player.actions.add(Actions.Interact, { target: this.lastTarget });\n        }\n          break;\n\n        case CursorSystem.TALKABLE_CURSOR: {\n          player.actions.add(Actions.TalkTo, { target: this.lastTarget });\n        }\n          break;\n      }\n    }\n  }\n\n  /**\n   * Set the correct cursor for the target selected.\n   * @param {Object} target - The target of the pointer.sceneManager\n   * @param {TDLib.Components.ActionComponent} target.behaviours - The SpriteBehaviourComponent of the target.\n   * @param {string} [target.behaviours.type=TDLib.Sprites.Behaviours.INERT] - The type of the sprite behaviour for this target.\n   * @since 1.0.0\n   */\n  setCursor(target = { behaviours: { type: Behaviours.INERT }, room: {} }) {\n    if ('room' in target && target !== target.room.player) {\n      switch (target.behaviours.type) {\n        case Behaviours.INERT: {\n          this.cursorScene.cursor.setTexture(CursorSystem.DEFAULT_CURSOR).setOrigin(0.4, 0.33);\n        }\n          break;\n\n        case Behaviours.EXAMINABLE: {\n          this.cursorScene.cursor.setTexture(CursorSystem.EXAMINABLE_CURSOR).setOrigin(0.33, 0.29);\n        }\n          break;\n\n        case Behaviours.INTERACTIVE: {\n          this.cursorScene.cursor.setTexture(CursorSystem.INTERACTIVE_CURSOR).setOrigin(0.4, 0.33);\n        }\n          break;\n\n        case Behaviours.TALKABLE: {\n          this.cursorScene.cursor.setTexture(CursorSystem.TALKABLE_CURSOR);\n        }\n          break;\n      }\n\n      this.lastTarget = target;\n    }\n  }\n\n  /**\n   * Show the cursor.\n   * @since 1.0.0\n   */\n  showCursor() {\n    this.cursorScene.cursor.setVisible(true);\n  }\n\n  /**\n   * Hide the cursor.\n   * @since 1.0.0\n   */\n  hideCursor() {\n    this.cursorScene.cursor.setVisible(false);\n  }\n}\n","import Phaser from 'phaser';\n\n/**\n * Class representing the manager of the rooms\n * @extends Phaser.Plugins.BasePlugin\n * @memberof TDLib.Plugins.GlobalPlugins\n */\nexport default class RoomSystem extends Phaser.Plugins.BasePlugin {\n  /**\n   * Create a new RoomSystem.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the plugin manager.\n   */\n  constructor(pluginManager) {\n    super(pluginManager);\n\n    /**\n     * The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n     * @type {Phaser.Scenes.SceneManager}\n     */\n    this.sceneManager = {};\n\n    this.currentRoom = null;\n  }\n\n  /**\n   * Add (and start) a new room to the RoomSystem.\n   * @param {TDLib.Rooms.Room} room - The class of the new room to add.\n   * @param {boolean} [autoStart=true] - Specify if the room has to start.\n   */\n  start(room, autoStart = true) {\n    if (room) {\n      console.log('Starting room:', room.name);\n      if (this.currentRoom) this.sceneManager.remove(this.currentRoom.name);\n      if (room.name in this.sceneManager.keys) {\n        this.sceneManager.start(room.name);\n      } else {\n        this.sceneManager.add(room.name, room, autoStart);\n\n      }\n      this.currentRoom = room;\n    }\n  }\n\n  /**\n   * Configure the RoomSystem.\n   * @param {Phaser.Scenes.SceneManager} sceneManager - The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n   */\n  configure(sceneManager) {\n    this.sceneManager = sceneManager;\n  }\n}\n","import Phaser from 'phaser';\nimport Settings from './Settings';\n\nexport default class Boot extends Phaser.Scene {\n  constructor() {\n    super('Boot');\n  }\n\n  preload() {\n\n  }\n\n  create() {\n    console.log('Booting all game systems...');\n    this.cursors.configure(Settings.GAME.scene);\n    this.rooms.configure(Settings.GAME.scene);\n    this.rooms.start(Settings.STARTING_ROOM); // TEMP NAME\n  }\n}\n","'use strict';\nmodule.exports = function (obj, predicate) {\n\tvar ret = {};\n\tvar keys = Object.keys(obj);\n\tvar isArr = Array.isArray(predicate);\n\n\tfor (var i = 0; i < keys.length; i++) {\n\t\tvar key = keys[i];\n\t\tvar val = obj[key];\n\n\t\tif (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {\n\t\t\tret[key] = val;\n\t\t}\n\t}\n\n\treturn ret;\n};\n","const Rooms = {\n  Room: require('./Room')\n};\n\nmodule.exports = Rooms;\n","import Settings from '../boot/Settings';\nimport Utils from './Utils';\nimport Phaser from 'phaser';\n\n/**\n * The rooms namespace.\n * @namespace TDLib.Rooms\n * @since 1.0.0\n */\n\n/**\n * Class representing a TDLRoom.\n * @extends Phaser.Scene\n * @memberof TDLib.Rooms\n * @since 1.0.0\n */\nexport default class Room extends Phaser.Scene {\n  /**\n   * Create a new TDLRoom.\n   * @param {string} sceneKey - The unique key to identify the room.\n   * @param {Object} rawAssets - The raw object of assets needed by the room. (Ripensarlo ?)\n   */\n  constructor(sceneKey, rawAssets) {\n    super(sceneKey);\n\n    /**\n       * This object contains an array with all the assets needed by the room.\n       * @type {Object}\n       * @since 1.0.0\n       */\n    this.assets = { raw: rawAssets, array: [] };\n\n    /**\n       * The average contribute of light sources to the room.\n       * @type {number}\n       * @since 1.0.0\n       */\n    this.averageLightsContribute;\n\n    /**\n       * The Settings cursor manager.\n       * @type {TDLib.Plugins.SettingsPlugins.CursorManager}\n       * @since 1.0.0\n       */\n    this.cursors;\n\n    /**\n       * The layer manager of the room.\n       * @type {TDLib.Plugins.RoomPlugins.LayerManager}\n       * @since 1.0.0\n       */\n    this.layers;\n\n    /**\n       * The tilemap of the room.\n       * @type {Phaser.Tilemaps.Tilemap}\n       * @since 1.0.0\n       */\n    this.map;\n\n    /**\n       * The name of the room.\n       * @type {string}\n       * @since 1.0.0\n       */\n    this.name = this.constructor.name;\n\n    /**\n       * The instance of the TDLCharacter designated as player for the room.\n       * @type {TDLib.Sprites.Characters.TDLCharacter}\n       * @since 1.0.0\n       */\n    this.player;\n\n    /**\n       * The Settings room manager.\n       * @type {TDLib.Plugins.SettingsPlugins.RoomManager}\n       * @since 1.0.0\n       */\n    this.rooms;\n  }\n\n  /**\n   * The preload function is executed once and load all the assets needed by the room.\n   * @since 1.0.0\n   */\n  preload() {\n    this._scrapeAssets();\n    this.assets.array.forEach(obj => {\n      if ('nPath' in obj) {\n        this.load[obj.type](obj.key, [obj.path, obj.nPath]);\n      } else if ('bPath' in obj) {\n        this.load[obj.type](obj.key, obj.path);\n        this.load[obj.type](obj.key + '_b', obj.bPath);\n      } else {\n        this.load[obj.type](obj.key, obj.path);\n      }\n    });\n\n    // Loading Border Camera Masks\n    this.load.image('top-border-mask-camera', 'assets/Masks/topMaskCamera.png');\n    this.load.image('bottom-border-mask-camera', 'assets/Masks/bottomMaskCamera.png');\n    this.load.image('left-border-mask-camera', 'assets/Masks/leftMaskCamera.png');\n    this.load.image('right-border-mask-camera', 'assets/Masks/rightMaskCamera.png');\n  }\n\n  /**\n   * Scrape the object of raw assets.\n   * @private\n   * @since 1.0.0\n   */\n  _scrapeAssets() {\n    for (let type in this.assets.raw) {\n      Utils.scrapeComplexObjKey(\n        this.assets.raw[type],\n        { type: type },\n        'path',\n        (obj, params) => {\n          obj['type'] = params.type;\n          obj['key'] = Utils.findFileNameFromPath(obj.path);\n          this.assets.array.push(obj);\n        }\n      );\n    }\n  }\n\n  /**\n   * The create function is executed once, when the room is initialized.\n   * @param {TDLib.Sprites.Characters.TDLCharacter} player - The instance of the player for the room.\n   * @since 1.0.0\n   */\n  create(player) {\n    this.player = player.setName('player');\n    this.lights.enable(); // Boot Phaser's LightManager\n    // this.scene.bringToTop(CursorManager.CURSOR_SCENE_KEY); // Add the cursor to the Room\n    this.scene.bringToTop('CursorScene');\n\n    this._setCameraViewport();\n    this._createRoom();\n    this._createSprites();\n    this._applyBorderMasks();\n    this.layers.setLayersDepth();\n\n    // Camera bounds, anche il wallsLayer\n    this.cameras.main.setBounds(0, 0, this.layers.wallsLayer.width, this.layers.wallsLayer.height);\n    this.cameras.main.startFollow(this.player);\n    this.cameras.main.setRoundPixels(true);\n    // Physics Bounds, sarà solo lo spazio di gioco (togliamo il wall layer tutto attorno!!)\n    this.physics.world.setBounds(\n      Settings.TILE_SIZE, Settings.TILE_SIZE, this.layers.wallsLayer.width - 2 * Settings.TILE_SIZE,\n      this.layers.wallsLayer.height - 2 * Settings.TILE_SIZE\n    );\n  }\n\n  /**\n   * Set the correct camera viewport.\n   * @private\n   * @since 1.0.0\n   */\n  _setCameraViewport() {\n    if (Settings.DEVICE === 'MOBILE') {\n      this.cameras.main.setPosition(\n        (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_WIDTH_IN_TILES_MOBILE) * Settings.TILE_SIZE,\n        (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE) * Settings.TILE_SIZE\n      );\n      this.cameras.main.setSize(\n        // eslint-disable-next-line max-len\n        Settings.SCREEN_PROPS.calculatedWidth - 2 * (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_WIDTH_IN_TILES_MOBILE) * Settings.TILE_SIZE,\n        Settings.ROOM_HEIGHT_IN_TILE * Settings.TILE_SIZE\n      );\n    } else {\n      this.cameras.main.setPosition(\n        Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE,\n        Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE\n      );\n      this.cameras.main.setSize(\n        Settings.SCREEN_PROPS.calculatedWidth - 2 * Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE,\n        Settings.ROOM_HEIGHT_IN_TILE * Settings.TILE_SIZE\n      );\n    }\n  }\n\n  /**\n   * Create room tilemap and layers.\n   * @private\n   * @since 1.0.0\n   */\n  _createRoom() {\n    this.map = this.make.tilemap({\n      key: Utils.findFileNameFromPath(this.assets.raw.tilemapTiledJSON.path),\n      tileWidth: Settings.TILE_SIZE,\n      tileHeight: Settings.TILE_SIZE\n    });\n\n    this.layers.backgroundLayer = this.map.createDynamicLayer(\n      'backgroundLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.background.path)),\n      0, 0\n    ).setPipeline('Light2D');\n    this.layers.wallsLayer = this.map.createDynamicLayer(\n      'wallsLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.walls.path)),\n      0, 0\n    );\n    this.layers.wallsMaskLayer = this.map.createDynamicLayer(\n      'wallsMaskLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.walls.bPath)),\n      0, 0\n    );\n  }\n\n  /**\n   * Create all the objects present in Tiled JSON map.\n   * @private\n   * @since 1.0.0\n   */\n  _createSprites() {\n    let _this = this;\n\n    this.map.objects.forEach(layer => {\n      layer.objects.forEach(element => {\n        _this;\n        // eslint-disable-next-line\n        this[element.name] = new Settings.GAME_SPRITES[element.type].default(_this, element.x + element.width / 2, element.y - element.height / 2);\n        this[element.name].setName(element.name);\n      });\n    });\n  }\n\n  /**\n   * Apply the four border masks to the camera.\n   * @private\n   * @since 1.0.0\n   */\n  _applyBorderMasks() {\n    this.layers.borderMasksLayer.create(\n      0, 0,\n      'top-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(\n      0, 0,\n      'left-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(\n      this.cameras.main.width - Settings.TILE_SIZE, 0,\n      'right-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(\n      0, this.cameras.main.height - Settings.TILE_SIZE,\n      'bottom-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n  }\n\n  /**\n   * The update function is executed at every cycle of the game loop.\n   * @since 1.0.0\n   */\n  update() {\n    this._updateMasksByLightDiffusion();\n\n    // Updates all Actions in  every ActionComponent (if present)\n    this.children.list.forEach(element => {\n      if ('actions' in element) {\n        element.actions._update();\n      }\n    });\n  }\n\n  /**\n   * Update the border masks alpha according to the average diffused light in the room.\n   * @private\n   * @since 1.0.0\n   */\n  _updateMasksByLightDiffusion() {\n    this.averageLightsContribute = this.lightSources.calculateAverageLightsContribute();\n    this.layers.wallsMaskLayer.setAlpha(1 - this.averageLightsContribute);\n  }\n}\n\n","const Utils = {\n  scrapeComplexObjKey: (obj, params, searchKey, callback) => {\n    if (Array.isArray(obj)) {\n      for (let i = 0; i < obj.length; i++) {\n        Utils.scrapeComplexObjKey(obj[i], params, searchKey, callback);\n      }\n    } else if (obj !== null && typeof obj === 'object') {\n      if (searchKey in obj) {\n        callback(obj, params);\n      } else {\n        for (let prop in obj) {\n          Utils.scrapeComplexObjKey(obj[prop], params, searchKey, callback);\n        }\n      }\n    }\n  },\n  findFileNameFromPath: (path) => {\n    let nameFirstCharachterPosition = path.lastIndexOf('/') + 1;\n\n    let nameLastCharachterPosition = path.lastIndexOf('.');\n\n    if (nameFirstCharachterPosition === -1) nameFirstCharachterPosition = 0;\n    if (nameLastCharachterPosition === -1) return -1;\n    let filename = path.slice(nameFirstCharachterPosition, nameLastCharachterPosition);\n\n    return filename;\n  }\n};\n\nmodule.exports = Utils;\n","const Sprites = {\n  Actions: require('./actions'),\n  Behaviours: require('./behaviours'),\n  Characters: require('./characters'),\n  Effects: require('./effects'),\n  InventoryItems: require('./inventory-items'),\n  WorldItems: require('./world-items'),\n  Sprite: require('./Sprite')\n};\n\nmodule.exports = Sprites;\n","const Characters = {\n  NPCharacter: require('./npc-characters/NPCharacter'),\n  Player: require('./players/Player')\n};\n\nmodule.exports = Characters;\n","import Character from '../Character';\n\nexport default class NPCharacter extends Character {\n  constructor(room, x, y, texture, layer) {\n    super(room, x, y, texture, layer);\n  }\n}\n","import Character from '../Character';\n\nexport default class Player extends Character {\n  constructor(room, x, y, texture) {\n    super(room, x, y, texture, 'playerLayer');\n\n    this.isBlocked = false;\n  }\n\n  create() {\n    super.create();\n\n    this.room.input.on('pointerdown', function (pointer) {\n      this.room.cursors.pointerDown(this);\n    }, this);\n  }\n}\n","const InventoryItems = {\n  InventoryItem: require('./InventoryItem')\n};\n\nmodule.exports = InventoryItems;\n","import Sprite from '../Sprite';\n\n/**\n * The inventory items namespace.\n * @namespace TDLib.Sprites.InventoryItems\n * @since 1.0.0\n */\n\n/**\n * Class representing an InentoryItem.\n * @extends TDLib.Sprites.Sprite\n * @memberof TDLib.Sprites.InventoryItems\n * @since 1.0.0\n */\n\nexport default class InentoryItem extends Sprite {\n  /**\n   * Create a new InvetoryItem.\n   * @param {Room} room - The room where the item is created.\n   * @param {number} x - The x coordinate of the item.\n   * @param {number} y - The y coordinate of the item.\n   * @param {string} texture - The item's graphic.\n   * @param {string} layer - The item's layer.\n   */\n  constructor(room, x, y, texture, layer) {\n    super(...arguments, false);\n  }\n\n  create() {\n    super.create();\n    this.resetPipeline(); // InventoryItems are not part of the Light2D pipeline!\n  }\n}\n","const WorldItems = {\n  WorldItem: require('./WorldItem'),\n  LightSources: require('./light-sources'),\n  RoomFurnitures: require('./room-furnitures'),\n  WallFurnitures: require('./wall-furnitures')\n};\n\nmodule.exports = WorldItems;\n","const LightSources = {\n  LightSource: require('./LightSource')\n};\n\nmodule.exports = LightSources;\n","const RoomFurnitures = {\n  RoomFurniture: require('./RoomFurniture')\n};\n\nmodule.exports = RoomFurnitures;\n","import WorldItem from '../WorldItem';\n\n/**\n * The room furnitures namespace.\n * @namespace TDLib.Sprites.Objects.WorldObjects.RoomFurnitures\n * @since 1.0.0\n */\n\n/**\n * Class representing a RoomFurniture.\n * @extends TDLib.Sprites.Objects.WorldObjects.WorldObject\n * @memberof TDLib.Sprites.Objects.WorldObjects.RoomFurnitures\n * @since 1.0.0\n */\nexport default class RoomFurniture extends WorldItem {\n  /**\n   * Create a RoomFurniture.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   */\n  constructor(room, x, y, texture, behaviourType, pixelPerfect, observeText, examineOrInteractText, blockExamineText, noLightObserveText, noLightExamineOrInteractText, examineOrInteractOffsetX, examineOrInteractThresholdRadius, minLightLevelToExamineOrInteract, minLightLevelToObserve) {\n    super(\n      room,\n      x, y,\n      texture,\n      'roomFurnitureLayer',\n      true,\n      behaviourType,\n      pixelPerfect,\n      observeText,\n      examineOrInteractText,\n      blockExamineText,\n      noLightObserveText,\n      noLightExamineOrInteractText,\n      examineOrInteractOffsetX,\n      examineOrInteractThresholdRadius,\n      minLightLevelToExamineOrInteract,\n      minLightLevelToObserve\n    );\n  }\n}\n","const WallFurnitures = {\n  WallFurniture: require('./WallFurniture')\n};\n\nmodule.exports = WallFurnitures;\n","import WorldItem from '../WorldItem';\n\n/**\n * The wall furnitures namespace.\n * @namespace TDLib.Sprites.Objects.WorldObjects.WallFurnitures\n * @since 1.0.0\n */\n\n/**\n * Class representing a WallFurniture.\n * @extends TDLib.Sprites.Objects.WorldObjects.WorldObject\n * @memberof TDLib.Sprites.Objects.WorldObjects.WallFurnitures\n * @since 1.0.0\n */\nexport default class WallFurniture extends WorldItem {\n  /**\n   * Create a WallFurniture.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   */\n  constructor(room, x, y, texture, behaviourType, pixelPerfect, observeText, examineOrInteractText, blockExamineText, noLightObserveText, noLightExamineOrInteractText, examineOrInteractOffsetX, examineOrInteractThresholdRadius, minLightLevelToExamineOrInteract, minLightLevelToObserve) {\n    super(\n      room,\n      x, y,\n      texture,\n      'wallFurnitureLayer',\n      true,\n      behaviourType,\n      pixelPerfect,\n      observeText,\n      examineOrInteractText,\n      blockExamineText,\n      noLightObserveText,\n      noLightExamineOrInteractText,\n      examineOrInteractOffsetX,\n      examineOrInteractThresholdRadius,\n      minLightLevelToExamineOrInteract,\n      minLightLevelToObserve\n    );\n\n    this.setGravityY(0);\n  }\n}\n"],"sourceRoot":""}