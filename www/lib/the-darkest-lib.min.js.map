{"version":3,"sources":["webpack://TDLib/webpack/universalModuleDefinition","webpack://TDLib/webpack/bootstrap","webpack://TDLib/./src/sprites/actions/Action.js","webpack://TDLib/./src/sprites/effects/light-effects/LightEffect.js","webpack://TDLib/./src/sprites/behaviours/index.js","webpack://TDLib/./src/boot/Settings.js","webpack://TDLib/./src/const.js","webpack://TDLib/./src/components/Component.js","webpack://TDLib/./src/sprites/actions/index.js","webpack://TDLib/./src/sprites/actions/face-to/FaceTo.js","webpack://TDLib/./src/sprites/behaviours/Behaviour.js","webpack://TDLib/./src/sprites/world-items/WorldItem.js","webpack://TDLib/./src/sprites/Sprite.js","webpack://TDLib/./src/managers/Manager.js","webpack://TDLib/./src/sprites/actions/walk-to/WalkTo.js","webpack://TDLib/./src/components/EffectComponent.js","webpack://TDLib/./src/sprites/effects/light-effects/Trembling.js","webpack://TDLib/./src/components/index.js","webpack://TDLib/./src/components/BehaviourComponent.js","webpack://TDLib/./src/sprites/effects/index.js","webpack://TDLib/./src/sprites/effects/Effect.js","webpack://TDLib/./src/sprites/effects/light-effects/HardFlickering.js","webpack://TDLib/./src/sprites/effects/light-effects/SoftFlickering.js","webpack://TDLib/./src/sprites/world-items/light-sources/LightSource.js","webpack://TDLib/./src/utils/index.js","webpack://TDLib/./src/managers/index.js","webpack://TDLib/./src/systems/index.js","webpack://TDLib/./src/sprites/characters/Character.js","webpack://TDLib/./src/TDLib.js","webpack://TDLib/(webpack)/buildin/global.js","webpack://TDLib/external \"phaser\"","webpack://TDLib/./src/components/ActionComponent.js","webpack://TDLib/./src/sprites/actions/examine/Examine.js","webpack://TDLib/./src/sprites/actions/face-to/Settings.js","webpack://TDLib/./src/sprites/actions/walk-to/Settings.js","webpack://TDLib/./src/sprites/actions/idle/Idle.js","webpack://TDLib/./src/sprites/actions/interact/Interact.js","webpack://TDLib/./src/sprites/actions/observe/Observe.js","webpack://TDLib/./src/sprites/actions/run-to/RunTo.js","webpack://TDLib/./src/sprites/actions/run-to/Settings.js","webpack://TDLib/./src/sprites/behaviours/const.js","webpack://TDLib/./src/sprites/behaviours/examinable/Examinable.js","webpack://TDLib/./src/sprites/behaviours/interactive/Interactive.js","webpack://TDLib/./src/sprites/behaviours/observable/Observable.js","webpack://TDLib/./src/sprites/behaviours/observable/Settings.js","webpack://TDLib/./src/sprites/behaviours/inventory/Inventory.js","webpack://TDLib/./src/sprites/effects/light-effects/index.js","webpack://TDLib/./src/sprites/effects/light-effects/HardFlickeringAndTrembling.js","webpack://TDLib/./src/sprites/effects/light-effects/RadiusFlickering.js","webpack://TDLib/./src/sprites/effects/light-effects/SoftFlickeringAndTrembling.js","webpack://TDLib/./src/boot/Game.js","webpack://TDLib/./src/boot/DebugHeader.js","webpack://TDLib/./src/utils/Utils.js","webpack://TDLib/./src/managers/layers/LayerManager.js","webpack://TDLib/./src/managers/layers/Settings.js","webpack://TDLib/./src/managers/light-sources/LightSourceManager.js","webpack://TDLib/./src/managers/updates/UpdateManager.js","webpack://TDLib/./src/systems/cursors/CursorSystem.js","webpack://TDLib/./src/systems/rooms/RoomSystem.js","webpack://TDLib/./src/rooms/index.js","webpack://TDLib/./src/rooms/Room.js","webpack://TDLib/./src/rooms/Utils.js","webpack://TDLib/./src/sprites/index.js","webpack://TDLib/./src/sprites/characters/index.js","webpack://TDLib/./src/sprites/characters/npc-characters/NPCharacter.js","webpack://TDLib/./src/sprites/characters/players/Player.js","webpack://TDLib/./src/sprites/inventory-items/index.js","webpack://TDLib/./src/sprites/inventory-items/InventoryItem.js","webpack://TDLib/./src/sprites/world-items/index.js","webpack://TDLib/./src/sprites/world-items/light-sources/index.js","webpack://TDLib/./src/sprites/world-items/room-furnitures/index.js","webpack://TDLib/./src/sprites/world-items/room-furnitures/RoomFurniture.js","webpack://TDLib/./src/sprites/world-items/wall-furnitures/index.js","webpack://TDLib/./src/sprites/world-items/wall-furnitures/WallFurniture.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__28__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Action","invoker","actor","config","arguments","length","undefined","_classCallCheck","this","constructor","target","_queue","isPaused","actions","_this","Array","isArray","forEach","action","push","_abort","_start","finish","shift","_remove","_pause","_resume","_update","BaseAction","startCallback","finishCallback","updateCallback","resumeCallback","pauseCallback","_createClass","_Effect2","LightEffect","contributeFactor","_possibleConstructorReturn","__proto__","getPrototypeOf","callback","_this2","_get","stopped","_this3","_const","Behaviours","Behaviour","Examinable","Interactive","Observable","Talkable","Inventory","Phaser","Utils","Objects","Extend","default","GAME","TILE_SIZE","ROOM_HEIGHT_IN_TILE","INVENTORY_WIDTH_IN_TILES_MOBILE","INVENTORY_WIDTH_IN_TILES_DESKTOP","INVENTORY_HEIGHT_IN_TILES_MOBILE","INVENTORY_HEIGHT_IN_TILES_DESKTOP","ROOM_FRAME_IN_TILES_DESKTOP","ROOM_FRAME_IN_TILES_MOBILE","SCREEN_PROPS","DEVICE","VERSION","PHASER_VERSION","LEFT","RIGHT","Component","gameObject","Actions","Examine","FaceTo","Idle","Interact","Observe","RunTo","WalkTo","_Action2","_interopRequireDefault","_Settings","apply","addActions","Math","abs","x","MICRO_MOVEMENT_RADIUS","facing","setFlipX","_Action","component","cursors","room","add","pixelPerfect","setInteractive","alphaTolerance","draggable","console","log","lightSources","calculateLightsContribuitePoint","_Sprite2","WorldItem","y","texture","layer","hasBody","behaviourType","observeText","examineOrInteractText","blockExamineText","noLightObserveText","noLightExamineOrInteractText","examineOrInteractOffsetX","examineOrInteractThresholdRadius","minLightLevelToExamineOrInteract","minLightLevelToObserve","setPipeline","_behaviours","_BehaviourComponent","Sprite","INERT","DEFAULT_OBSERVE_TEXT","DEFAULT_EXAMINE_OR_INTERACT_TEXT","DEFAULT_NO_LIGHT_OBSERVE_TEXT","DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT","DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT","DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE","floor","random","type","behaviours","existing","updates","physics","setCollideWorldBounds","setGravityY","layers","setLayersDepth","warn","Physics","Arcade","width","height","offsetX","offsetY","input","hitArea","setSize","setPosition","Manager","pluginManager","Plugins","ScenePlugin","_FaceTo","anims","play","body","setVelocity","WALK_VELOCITY","velocity","_Component2","_effects","_LightSource","EffectComponent","previousEffects","currentEffect","duration","stop","LightEffects","timer","time","addEvent","delay","callbackScope","repeat","remove","_LightEffect2","Trembling","minTime","maxTime","minPercentageIntensity","maxPercentageIntensity","minPercentageRadius","maxPercentageRadius","backToInitialIntensity","backToInitialRadius","setTimer","newIntensityPercentage","graphicLight","setIntensity","intensity","diffusedLight","newRadiusPercentage","setRadius","radius","Components","ActionComponent","BehaviourComponent","player","_addBehaviours","EXAMINABLE","INTERACTIVE","observe","examine","interact","Effects","Effect","_EffectComponent","HardFlickering","finalState","initialConfig","turnOff","SoftFlickering","_WorldItem2","LightSource","graphicLightConfig","diffusedLightConfig","offset","isOn","turnOn","effects","lights","addLight","diffusedLights","graphicLights","diffusedLightindex","indexOf","splice","removeLight","graphicLightindex","getScreenProps","Managers","LayerManager","LightSourceManager","UpdateManager","Systems","CursorSystem","RoomSystem","_components","Character","_ref","concat","slice","_phaser","TDLib","Game","Rooms","Settings","Sprites","global","g","Function","e","_actions","defaultAction","DEFAULT_MODE","newAction","QUEUE_MODE","PAUSE_MODE","unshift","_WalkTo","getAction","RUN_VELOCITY","TALKABLE","INVENTORY","_Behaviour2","checkLight","_timer","on","pointer","setCursor","DEFAULT_MIN_TIME_TO_OBSERVE","isBlocked","HardFlickeringAndTrembling","RadiusFlickering","SoftFlickeringAndTrembling","_HardFlickering","_Trembling","hardFlickering","trembling","_SoftFlickering","SoftDefaultFlickeringAndtrembling","softFlickering","_DebugHeader","_utils","_managers","_systems","_setScreenConfig","_setPhysicsConfig","_setPlugins","_setBoot","_setHeaderProps","_finalizeConfig","calculatedWidth","calculatedHeight","zoom","calculatedZoom","autoResize","backgroundColor","pixelArt","arcade","debug","gravity","plugins","plugin","start","mapping","scene","Boot","banner","WEBGL","maxLights","parent","disableContextMenu","CONST","game","bannerBackgroundColor","bannerTextColor","hidePhaser","renderType","audioType","audioConfig","audio","deviceAudio","device","webAudio","disableWebAudio","noAudio","audioData","browser","ie","lastColor","args","color","gameTitle","gameVersion","gameURL","returnValue","availHeight","innerHeight","availWidth","innerWidth","screen","ceil","_Manager2","layerSize","strartingDepth","startingDepth","backgroundLayer","group","rearDoorsLayer","wallFurnitureLayer","roomFurnitureLayer","sideDoorsLayer","npcLayer","playerLayer","cielingObjectsLayer","frontDoorsLayer","wallsLayer","wallsMaskLayer","overallDarknessLayer","borderMasksLayer","setDepth","source","getChildren","lightSource","singleLightContributeAccumulator","light","singleLightContribute","singleLightIntensityAccumulator","averageLightsContribute","events","systems","gameObjects","Structs","Set","_sceneUpdate","_sceneShutdown","once","_sceneDestroy","delta","iterateLocal","clear","off","_scenePostUpdate","obj","set","objs","delete","cursorScene","sceneManager","lastTarget","BasePlugin","CURSOR_SCENE_KEY","CursorScene","cursor","DEFAULT_CURSOR","activePointer","camera","worldX","EXAMINABLE_CURSOR","abort","INTERACTIVE_CURSOR","TALKABLE_CURSOR","TalkTo","setTexture","setOrigin","setVisible","_Phaser$Scene","_inherits","Scene","load","image","HOLD_CURSOR","CHOICE_CURSOR","CHOICE_PRESSED_CURSOR","setDefaultCursor","autoStart","Room","_Utils","sceneKey","rawAssets","assets","raw","array","map","rooms","_scrapeAssets","path","nPath","bPath","_this4","scrapeComplexObjKey","params","findFileNameFromPath","setName","enable","bringToTop","_setCameraViewport","_createRoom","_createSprites","_applyBorderMasks","cameras","main","setBounds","startFollow","setRoundPixels","world","make","tilemap","tilemapTiledJSON","tileWidth","tileHeight","createDynamicLayer","addTilesetImage","tiles","background","walls","_this5","objects","element","eval","setScrollFactor","_updateMasksByLightDiffusion","children","list","calculateAverageLightsContribute","setAlpha","searchKey","_typeof","prop","nameFirstCharachterPosition","lastIndexOf","nameLastCharachterPosition","Characters","InventoryItems","WorldItems","NPCharacter","Player","_Character2","pointerDown","InventoryItem","InentoryItem","LightSources","RoomFurnitures","WallFurnitures","RoomFurniture","WallFurniture"],"mappings":"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","file":"the-darkest-lib.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"phaser\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"TDLib\", [\"phaser\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TDLib\"] = factory(require(\"phaser\"));\n\telse\n\t\troot[\"TDLib\"] = factory(root[\"phaser\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__28__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 26);\n","/**\n * Class representing a TDLAction.\n * @memberof TDLib.Components.Actions\n * @since 1.0.0\n */\nexport default class Action {\n  /**\n   * Start a new TDLAction.\n   * @param {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @param {TDLSprite} actor - The actor who performs the action.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   */\n  constructor(invoker, actor, config = {}) {\n    /**\n     * The invoker of the action.\n     * @type {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction}\n     * @since 1.0.0\n     */\n    this.invoker = invoker;\n\n    /**\n     * The name of the action.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.name = this.constructor.name;\n\n    /**\n     * The actor who performs the action.\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.actor = actor;\n\n    /**\n     * The target of the action.\n     * @type {Object|TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.target = config.target;\n\n    /**\n     * The config object for the action.\n     * @type {Object}\n     * @since 1.0.0\n     */\n    this.config = config;\n\n    /**\n     * The queue of actions.\n     * @type {Array}\n     * @private\n     * @since 1.0.0\n     */\n    this._queue = [];\n\n    /**\n     * Tells if the action has been paused.\n     * @type {boolean}\n     * @since 1.0.0\n     */\n    this.isPaused = false;\n  }\n\n  /**\n   * Add one or more new actions to the queue.\n   * @param {TDLib.Components.Actions.TDLAction|TDLib.Components.Actions.TDLAction[]|TDLib.Components.Actions.TDLAction.BaseAction|TDLib.Components.Actions.TDLAction.BaseAction[]} actions - The new actions to add.\n   * @since 1.0.0\n   */\n  addActions(actions) {\n    if (Array.isArray(actions)) {\n      actions.forEach(action => {\n        this._queue.push(action);\n      });\n    } else this._queue.push(actions);\n  }\n\n  /**\n   * The blank action to create new composed and complex actions.\n   * @typedef {TDLib.Components.Actions.TDLAction.BaseAction}\n   *\n   * @property {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @property {Function} startCallback - The callback to execute at the beginning of the action.\n   * @property {Function} [finishCallback] - The callback to execute at the end of the action.\n   * @property {Function} [updateCallback]  - The callback to execute at every update loop.\n   * @property {Function} [resumeCallback=startCallback] - The callback to execute when the action is paused.\n   * @property {Function} [pauseCallback=finishCallback]  - The callback to execute when the action is resumed.\n   * @since 1.0.0\n   */\n  static get BaseAction() {\n    return class BaseAction {\n      constructor(invoker, startCallback, finishCallback = () => { }, updateCallback = () => { }, resumeCallback = startCallback, pauseCallback = finishCallback) {\n        this.invoker = invoker;\n\n        this.startCallback = startCallback;\n        this.finishCallback = finishCallback;\n        this.updateCallback = updateCallback;\n        this.resumeCallback = resumeCallback;\n        this.pauseCallback = pauseCallback;\n\n        this.isPaused = false;\n      }\n\n      _start() {\n        this.startCallback();\n      }\n\n      finish() {\n        this.finishCallback();\n        this.invoker._remove();\n      }\n\n      _abort() {\n        this.finishCallback();\n      }\n\n      _resume() {\n        this.isPaused = false;\n        this.resumeCallback();\n      }\n\n      _pause() {\n        this.pauseCallback();\n        this.isPaused = true;\n      }\n\n      _update() {\n        this.updateCallback();\n      }\n    };\n  }\n\n  /**\n   * Abort an uncompleted action.\n   * @private\n   * @since 1.0.0\n   */\n  _abort() {\n    if (this._queue.length > 0) this._queue[0]._abort();\n  }\n\n  /**\n   * Start an action.\n   * @private\n   * @since 1.0.0\n   */\n  _start() {\n    if (this._queue.length > 0) this._queue[0]._start();\n  }\n\n  /**\n   * Finish a completed action.\n   * @private\n   * @since 1.0.0\n   */\n  finish() {\n    if (this._queue.length > 0) this._queue[0].finish();\n  }\n\n  /**\n   * Remove a completed action from the queue.\n   * @private\n   * @since 1.0.0\n   */\n  _remove() {\n    if (this._queue.length > 0) this._queue.shift();\n\n    if (this._queue.length <= 0) this.invoker._remove();\n    else this._queue[0]._start();\n  }\n\n  /**\n   * Pause an action.\n   * @private\n   * @since 1.0.0\n   */\n  _pause() {\n    if (this._queue.length > 0) {\n      this._queue[0]._pause();\n      this.isPaused = true;\n    }\n  }\n\n  /**\n   * Resume a paused action.\n   * @private\n   * @since 1.0.0\n   */\n  _resume() {\n    if (this._queue.length > 0) {\n      this.isPaused = false;\n      this._queue[0]._resume();\n    }\n  }\n\n  /**\n   * Update the currently performed action.\n   * @private\n   * @since 1.0.0\n   */\n  _update() {\n    if (this._queue.length > 0) this._queue[0]._update();\n  }\n}\n","import Effect from '../Effect';\n\nexport default class LightEffect extends Effect {\n  constructor(invoker, config, contributeFactor = 1) {\n    super(invoker, config);\n\n    this.contributeFactor = contributeFactor;\n  }\n\n  play(callback) {\n    super.play(() => {\n      this.stopped = false;\n      callback();\n    });\n  }\n\n  stop(callback) {\n    super.stop(() => {\n      this.stopped = true;\n      callback();\n    });\n  }\n}\n","import CONST from './const';\n\nvar Behaviours = {\n  Behaviour: require('./Behaviour'),\n  Examinable: require('./examinable/Examinable'),\n  Interactive: require('./interactive/Interactive'),\n  Observable: require('./observable/Observable'),\n  Talkable: require('./talkable/Talkable'),\n  Inventory: require('./inventory/Inventory')\n};\n\nBehaviours = Phaser.Utils.Objects.Extend(false, Behaviours, CONST);\nmodule.exports = Behaviours;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * The default Game settings.\n * @namespace TDLib.Settings\n */\nvar Settings = {\n  /**\n   * The instance of the Game.\n   *\n   * @name TDLib.Settings.GAME\n   * @const\n   * @type {TDLib.Game}\n   * @since 1.0.0\n   */\n  GAME: '',\n  /**\n   * The size of the tiles.\n   *\n   * @name TDLib.Settings.TILE_SIZE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  TILE_SIZE: 48,\n  /**\n   * The height of a standard room in tiles.\n   *\n   * @name TDLib.Settings.ROOM_HEIGHT_IN_TILE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  ROOM_HEIGHT_IN_TILE: 6,\n  /**\n   * The inventory width in tiles in mobile devices.\n   *\n   * @name TDLib.Settings.INVENTORY_WIDTH_IN_TILES_MOBILE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  INVENTORY_WIDTH_IN_TILES_MOBILE: 1.25,\n  /**\n   * The inventory width in tiles in desktop devices.\n   *\n   * @name TDLib.Settings.INVENTORY_WIDTH_IN_TILES_DESKTOP\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  INVENTORY_WIDTH_IN_TILES_DESKTOP: 0,\n  /**\n   * The inventory height in tiles in mobile devices.\n   *\n   * @name TDLib.Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  INVENTORY_HEIGHT_IN_TILES_MOBILE: 0,\n  /**\n   * The inventory height in tiles in desktop devices.\n   *\n   * @name TDLib.Settings.INVENTORY_HEIGHT_IN_TILES_DESKTOP\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  INVENTORY_HEIGHT_IN_TILES_DESKTOP: 1,\n  /**\n   * The room frame in tiles in desktop devices.\n   *\n   * @name TDLib.Settings.ROOM_FRAME_IN_TILES_DESKTOP\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  ROOM_FRAME_IN_TILES_DESKTOP: 0.5,\n  /**\n   * The room frame in tiles in mobile devices.\n   *\n   * @name TDLib.Settings.ROOM_FRAME_IN_TILES_MOBILE\n   * @const\n   * @type {Number}\n   * @since 1.0.0\n   */\n  ROOM_FRAME_IN_TILES_MOBILE: 0.25,\n  /**\n   * The proportions of the used screen.\n   *\n   * @name TDLib.Settings.SCREEN_PROPS\n   * @type {Object}\n   * @since 1.0.0\n   */\n  SCREEN_PROPS: {},\n  /**\n   * The used device.\n   *\n   * @name TDLib.Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE\n   * @type {String}\n   * @since 1.0.0\n   */\n  DEVICE: 'Desktop'\n};\n\nmodule.exports = Settings;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * Global consts.\n *\n * @ignore\n */\n\nconst CONST = {\n  /**\n   * TheDarkestLib Release Version.\n   *\n   * @name TDLib.VERSION\n   * @const\n   * @type {string}\n   * @since 1.0.0\n   */\n  VERSION: '1.0.0',\n  /**\n   * Phaser Release Version.\n   *\n   * @name TDLib.PHASER_VERSION\n   * @const\n   * @type {string}\n   * @since 1.0.0\n   */\n  // eslint-disable-next-line no-undef\n  PHASER_VERSION: 3.16, // Phaser.VERSION,\n  /**\n   * Left direction constant.\n   *\n   * @name TDLib.LEFT\n   * @const\n   * @type {string}\n   * @since 1.0.0\n   */\n  LEFT: '_left',\n  /**\n   * Right direction constant.\n   *\n   * @name TDLib.RIGHT\n   * @const\n   * @type {string}\n   * @since 1.0.0\n   */\n  RIGHT: '_right'\n};\n\nmodule.exports = CONST;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * @classdesc\n * Class representing a generic Component.\n * A Component is bound to a Sprite and extends the members and methods of it.\n * To access the component you have to use a specific key.\n *\n * @class Component\n * @memberof TDLib.Components\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Sprites.Sprite} gameObject - The Sprite using the Component.\n */\nexport default class Component {\n  constructor(gameObject) {\n\n    /**\n     * The name of the Component.\n     * @type {string}\n     * @name TDLib.Components.Component#name\n     * @since 1.0.0\n     */\n    this.name = this.constructor.name;\n\n    /**\n     * The Sprite using the Component.\n     * @type {TDLib.Sprites.Sprite}\n     * @name TDLib.Components.Component#gameObject\n     * @since 1.0.0\n     */\n    this.gameObject = gameObject;\n  }\n}\n","const Actions = {\n  Action: require('./Action'),\n  Examine: require('./examine/Examine'),\n  FaceTo: require('./face-to/FaceTo'),\n  Idle: require('./idle/Idle'),\n  Interact: require('./interact/Interact'),\n  Observe: require('./observe/Observe'),\n  RunTo: require('./run-to/RunTo'),\n  WalkTo: require('./walk-to/WalkTo')\n};\n\nmodule.exports = Actions;\n","import Action from '../Action';\nimport CONST from '../../../const';\nimport Settings from './Settings';\n\nexport default class FaceTo extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      new Action.BaseAction(\n        this,\n        () => {\n          if (Math.abs(this.actor.x - this.target.x) > Settings.MICRO_MOVEMENT_RADIUS) {\n            if (this.actor.facing === CONST.RIGHT) {\n              if (this.actor.x > this.target.x) {\n                this.actor.facing = CONST.LEFT;\n                this.actor.setFlipX(true);\n                // this.actor.anims.play('idleLeft');\n              }\n            } else if (this.actor.facing === CONST.LEFT) {\n              if (this.actor.x < this.target.x) {\n                this.actor.facing = CONST.RIGHT;\n                this.actor.setFlipX(false);\n                // this.actor.anims.play('idleRight');\n              }\n            }\n          }\n          this.finish();\n        }\n      )\n    );\n  }\n}\n","import Action from '../actions/Action';\n\n/**\n * Class representing the behaviour of a sprite.\n * @memberof TDLib.Components.SpriteBehaviours\n * @since 1.0.0\n */\nexport default class Behaviour {\n  /**\n   * Create a SpriteBehaviour.\n   * @param {TDLib.Components.SpriteBehaviourComponent} component - The component which has invoked the behaviour.\n   */\n  constructor(component) {\n    /**\n     * The component which has invoked the behaviour.\n     * @type {TDLib.Components.SpriteBehaviourComponent}\n     * @since 1.0.0\n     */\n    this.component = component;\n\n    /**\n     * The global cursor manager.\n     * @type {TDLib.Plugins.GlobalPlugins.CursorManager}\n     * @since 1.0.0\n     */\n    this.cursors = this.component.gameObject.room.cursors;\n\n    /**\n     * The sprite which has invoked the behaviour.\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.gameObject = this.component.gameObject;\n\n    /**\n     * The room where the gameObject lives.\n     * @type {TDLib.Rooms.TDLRoom}\n     * @since 1.0.0\n     */\n    this.room = this.component.gameObject.room;\n\n    this.add();\n  }\n\n  /**\n   * Set the gameObject as interactive.\n   * @since 1.0.0\n   */\n  add() {\n    if (this.component.pixelPerfect === null) this.component.gameObject.setInteractive();\n    else {\n      this.component.gameObject.setInteractive(\n        {\n          pixelPerfect: true,\n          alphaTolerance: this.component.pixelPerfect.alphaTolerance,\n          draggable: false\n        }\n      );\n    }\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Action.BaseAction(\n      invoker,\n      () => {\n        console.log('Sono una generica action dei behaviour');\n        invoker.finish();\n      }\n    );\n  }\n\n  checkLight(value) {\n    if (this.room.lightSources.calculateLightsContribuitePoint(this.gameObject) >= value) return true;\n    return false;\n  }\n}\n","import Sprite from '../Sprite';\n\n/**\n * The world items namespace.\n * @namespace TDLib.Sprites.WorldItems\n * @since 1.0.0\n */\n\n/**\n * Class representing a WorldItem.\n * @extends TDLib.Sprites.Sprite\n * @memberof TDLib.Sprites.WorldItems\n * @since 1.0.0\n */\nexport default class WorldItem extends Sprite {\n  /**\n   * Create a WorldObject.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [layer=null] - The key of the layer which will contain the sprite.\n   * @param {boolean} [hasBody=true] - Specify if the sprite has physics.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   */\n  constructor(room, x, y, texture, layer, hasBody, behaviourType, pixelPerfect, observeText, examineOrInteractText, blockExamineText, noLightObserveText, noLightExamineOrInteractText, examineOrInteractOffsetX, examineOrInteractThresholdRadius, minLightLevelToExamineOrInteract, minLightLevelToObserve) {\n    super(\n      room,\n      x, y,\n      texture,\n      layer,\n      hasBody,\n      behaviourType,\n      pixelPerfect,\n      observeText,\n      examineOrInteractText,\n      blockExamineText,\n      noLightObserveText,\n      noLightExamineOrInteractText,\n      examineOrInteractOffsetX,\n      examineOrInteractThresholdRadius,\n      minLightLevelToExamineOrInteract,\n      minLightLevelToObserve\n    );\n  }\n\n  create() {\n    super.create();\n    this.setPipeline('Light2D'); // Da spostare in TDLSprite non appena il player supporterà la Light2D\n  }\n}\n","import Behaviours from '../sprites/behaviours';\nimport BehaviourComponent from '../components/BehaviourComponent';\n\n/**\n * The Darkest Lib.\n * @namespace TDLib\n * @since 1.0.0\n */\n\n/**\n * The actions namespace.\n * @namespace TDLib.Sprites\n * @since 1.0.0\n */\n\n/**\n * Class representing a TDLSprite.\n * @extends Phaser.Physics.Arcade.Sprite\n * @memberof TDLib.Sprites\n * @since 1.0.0\n */\nexport default class Sprite extends Phaser.Physics.Arcade.Sprite {\n  /**\n   * Create a TDLSprite.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [layer=null] - The key of the layer which will contain the sprite.\n   * @param {boolean} [hasBody=true] - Specify if the sprite has physics.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   * @param {boolean} [precisePosition=false] - Specify if to examine or interact with the sprite it's required to be precisely at the examineOrInteractPoint. (Probably not needed)\n   */\n  constructor(\n    room,\n    x, y,\n    texture,\n    layer = null,\n    hasBody = true,\n    behaviourType = Behaviours.INERT,\n    pixelPerfect = null,\n    observeText = Behaviours.DEFAULT_OBSERVE_TEXT,\n    examineOrInteractText = Behaviours.DEFAULT_EXAMINE_OR_INTERACT_TEXT,\n    blockExamineText = null,\n    noLightObserveText = Behaviours.DEFAULT_NO_LIGHT_OBSERVE_TEXT,\n    noLightExamineOrInteractText = Behaviours.DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT,\n    examineOrInteractOffsetX = 0,\n    examineOrInteractThresholdRadius = 0,\n    minLightLevelToExamineOrInteract = Behaviours.DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT,\n    minLightLevelToObserve = Behaviours.DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE\n\n  ) {\n    super(room, x, y, texture);\n\n    /**\n     * The room where the sprite is created.\n     * @type {TDLib.Rooms.TDLRoom}\n     * @since 1.0.0\n     */\n    this.room = room;\n\n    /**\n     * The name of the sprite, to map it in the room. Usually it's obtained by Tiled.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.name;\n\n    /**\n     * The unique key of the sprite, composed by the sprite type and a 4 digits random integer number.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.key = this.constructor.name + (Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000);\n\n    /**\n     * The type of the sprite.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.type = this.constructor.name;\n\n    /**\n     * The sprite behaviour component instance.\n     * @type {TDLib.Components.SpriteBehaviourComponent}\n     * @since 1.0.0\n     */\n    this.behaviours = new BehaviourComponent(this, behaviourType, pixelPerfect);\n\n    /**\n     * The text which appears when observing the sprite.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.observeText = observeText;\n\n    /**\n * The text which appears when examine or interact with the sprite.\n     * @type {string}\n     * @since 1.0.0\n */\n    this.examineOrInteractText = examineOrInteractText;\n\n    /**\n     * If not null it's the blocking text which appears the first time the sprite is examined.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.blockExamineText = blockExamineText;\n\n    /**\n     * The text which appears when observing the sprite when the diffused light is not sufficient.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.noLightObserveText = noLightObserveText;\n\n    /**\n * The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.noLightExamineOrInteractText = noLightExamineOrInteractText;\n\n    /**\n     * The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n     */\n    this.examineOrInteractOffsetX = examineOrInteractOffsetX;\n\n    /**\n     * The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n         */\n    this.examineOrInteractThresholdRadius = examineOrInteractThresholdRadius;\n\n    /**\n     * The minimum value of diffused light to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n         */\n    this.minLightLevelToExamineOrInteract = minLightLevelToExamineOrInteract;\n\n    /**\n * The minimum value of diffused light to observe the sprite.\n     * @type {number}\n     * @since 1.0.0\n     */\n    this.minLightLevelToObserve = minLightLevelToObserve;\n\n    this.room.add.existing(this);\n    this.room.updates.add(this);\n    if (hasBody) {\n      this.room.physics.add.existing(this);\n      this.setCollideWorldBounds(true);\n      this.setGravityY(10000);\n    }\n\n    if (layer != null) {\n      if (layer in this.room.layers) {\n        this.room.layers[layer].add(this);\n        this.room.layers.setLayersDepth();\n      } else console.warn('ALERT: layer not found for object', this);\n    }\n\n    this.create();\n  }\n\n  /**\n   * The create function is executed once, immediately after the initialization of the sprite.\n   * @since 1.0.0\n   */\n  create() {\n    console.log('Created:', this.key, '- Type:', this.type, '- Behaviour:', this.behaviours.type);\n  }\n\n  /**\n   * The update is executed at every cycle of the game loop.\n   * @since 1.0.0\n   */\n  update() {\n\n  }\n\n  /**\n   * Set the name property of a sprite.\n   * @param {string} value - The name which is used to map a sprite in the room.\n   * @return {TDLib.Sprites.TDLSprite}\n   * @since 1.0.0\n   */\n  setName(value) {\n    this.name = value;\n    return this;\n  }\n\n  // Poichè è stata aggiunta la pixel perfect collision, valutare l'utilità di questa funzione!\n  setHitAreaSize(width = this.width, height = this.height, offsetX = 0, offsetY = 0) {\n    this.input.hitArea.setSize(width, height);\n    this.input.hitArea.setPosition(((this.width - width) / 2) + offsetX, ((this.height - height) / 2) + offsetY);\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * @classdesc\n * Class representing a generic Manager.\n * A Manager is a controller working at a Room level.\n * It is unique in its own Room, but it isn't in the whole game.\n * From Phaser library a Manager is handled as a Phaser.Plugins.ScenePlugin.\n * It has to be added to the game into Game.js through the specified method..\n *\n * @class Manager\n * @extends Phaser.Plugins.ScenePlugin\n * @memberof TDLib.Managers\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Rooms.Room|Phaser.Scene} room - The room running the Manager.\n * @param {Phaser.Plugins.PluginManager} - A reference to Phaser PluginManager.\n */\n// eslint-disable-next-line no-undef\nexport default class Manager extends Phaser.Plugins.ScenePlugin {\n  constructor(room, pluginManager) {\n    super(room, pluginManager);\n\n    /**\n     * The room running the Manager.\n     * @type {TDLib.Rooms.Room|Phaser.Scene}\n     * @since 1.0.0\n     */\n    this.room = room;\n  }\n\n  /**\n   * Default function called by Phaser when booting the plugins.\n   * @method TDLib.Managers.Manager#boot\n   * @protected\n   * @since 1.0.0\n   */\n  boot() {\n\n  }\n}\n","import Action from '../Action';\nimport FaceTo from '../face-to/FaceTo';\nimport Settings from './Settings';\n\nexport default class WalkTo extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new FaceTo(this, this.actor, this.config),\n        new Action.BaseAction(\n          this,\n          () => {\n            if (Math.abs(this.actor.x - this.target.x) > Settings.MICRO_MOVEMENT_RADIUS) {\n              if (this.actor.x < this.target.x) {\n                this.actor.anims.play('walk');\n                // this.actor.anims.play('walkRight');\n                this.actor.body.setVelocity(Settings.WALK_VELOCITY);\n              } else if (this.actor.x > this.target.x) {\n                this.actor.anims.play('walk');\n                // this.actor.anims.play('walkLeft');\n                this.actor.body.setVelocity(-Settings.WALK_VELOCITY);\n              }\n            } else {\n              this.finish();\n            }\n          },\n          () => {\n            this.actor.body.setVelocity(0);\n          },\n          () => {\n            if ((this.actor.x - this.target.x) * this.actor.body.velocity.x > 0) this.finish();\n          }\n        )\n      ]\n    );\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Component from './Component';\nimport Effects from '../sprites/effects';\nimport LightSource from '../sprites/world-items/light-sources/LightSource';\n\n/**\n * @classdesc\n * Class representing the EffectComponent.\n * EffectComponent is responsible to handle all the effects of a Sprite.\n *\n * @class EffectComponent\n * @memberof TDLib.Components\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Sprites.Sprite} gameObject - The Sprite that owns the component.\n */\nexport default class EffectComponent extends Component {\n  constructor(gameObject) {\n    super(gameObject);\n\n    /**\n     * An array containing all the already played Effects.\n     * @type {Array}\n     * @name TDLib.Components.EffectComponent#previousEffects\n     * @since 1.0.0\n     */\n    this.previousEffects = [];\n\n    /**\n     * The currently played Effect.\n     * @type {TDLib.Sprites.Effects.Effect}\n     * @name TDLib.Components.EffectComponent#currentEffect\n     * @since 1.0.0\n     */\n    this.currentEffect = null;\n  }\n\n  /**\n   * Starts a new Effect. If there's an already running Effect it is stopped.\n   *\n   * @method TDLib.Components.EffectComponent#play\n   * @param {string} key - A key identifying an Effect.\n   * @param {Object} [duration=-1] - If specified it represents the duration of the Effect.\n   * @param {Object} [config] - The configuration object for the Effect.\n   * @since 1.0.0\n   */\n  play(key, duration = -1, config) {\n    if (this.currentEffect) this.stop();\n\n    if (key in Effects) this.currentEffect = new Effects[key](this, config);\n    else if (key in Effects.LightEffects) {\n      if (this.gameObject instanceof LightSource) this.currentEffect = new Effects.LightEffects[key](this, config);\n      else console.log(key + ' can only be run by a LightSource');\n    } else {\n      console.log('No effect with key: ', key);\n    }\n\n    if (this.currentEffect) this.currentEffect.play();\n\n    if (duration > 0) {\n      this.timer = this.gameObject.room.time.addEvent({\n        delay: duration,\n        callback: () => {\n          this.stop();\n        },\n        callbackScope: this,\n        repeat: 0\n      });\n      console.log(this.currentEffect.name + 'Effect started for', duration, 'ms');\n    } else if (duration === -1) {\n      console.log(this.currentEffect.name + 'Effect started');\n    } else {\n      console.log('You must use a positive value!');\n    }\n  }\n\n  /**\n   * Stops the currently played Effect.\n   *\n   * @method TDLib.Components.EffectComponent#stop\n   * @since 1.0.0\n   */\n  stop() {\n    if (this.currentEffect) {\n      if (this.timer) {\n        this.timer.remove();\n        this.timer = null;\n      }\n      this.previousEffects.push(this.currentEffect);\n      this.currentEffect.stop();\n      console.log(this.currentEffect.name + 'Effect stopped');\n      this.currentEffect = null;\n      console.log(this.previousEffects);\n    }\n  }\n}\n","import LightEffect from './LightEffect';\n\nexport default class Trembling extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.8);\n\n    if (!this.config.minTime) this.config.minTime = 10;\n    if (!this.config.maxTime) this.config.maxTime = 100;\n    if (!this.config.minPercentageIntensity) this.config.minPercentageIntensity = 0.8;\n    if (!this.config.maxPercentageIntensity) this.config.maxPercentageIntensity = 1;\n    if (!this.config.minPercentageRadius) this.config.minPercentageRadius = 0.8;\n    if (!this.config.maxPercentageRadius) this.config.maxPercentageRadius = 1;\n    if (!this.config.backToInitialIntensity) this.config.backToInitialIntensity = true;\n    if (!this.config.backToInitialRadius) this.config.backToInitialRadius = true;\n  }\n\n  play() {\n    super.play(() => {\n      let setTimer = () => {\n        this.gameObject.room.time.addEvent({\n          delay: Math.floor(Math.random() * (this.config.maxTime - this.config.minTime)) + this.config.minTime,\n          callback: () => {\n\n            if (!this.stopped) {\n              let newIntensityPercentage = Math.floor((this.config.minPercentageIntensity + Math.random() * (this.config.maxPercentageIntensity - this.config.minPercentageIntensity)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity * newIntensityPercentage);\n              this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity * newIntensityPercentage);\n              let newRadiusPercentage = Math.floor((this.config.minPercentageRadius + Math.random() * (this.config.maxPercentageRadius - this.config.minPercentageRadius)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setRadius(this.gameObject.config.graphicLight.radius * newRadiusPercentage);\n\n              setTimer();\n            }\n\n          },\n          callbackScope: this,\n          repeat: 0\n        });\n      };\n\n      setTimer();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      if (this.config.backToInitialIntensity) {\n        this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity);\n        this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity);\n      } else {\n        this.gameObject.config.graphicLight.intensity = this.gameObject.graphicLight.intensity;\n        this.gameObject.config.diffusedLight.intensity = this.gameObject.diffusedLight.intensity;\n      }\n      if (this.config.backToInitialRadius) {\n        this.gameObject.graphicLight.setRadius(this.gameObject.config.graphicLight.radius);\n      } else {\n        this.gameObject.config.graphicLight.radius = this.gameObject.graphicLight.radius;\n      }\n    });\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * Components are attachable to Sprites in order to extend their capabilities.\n * @namespace TDLib.Components\n */\n\nconst Components = {\n  Component: require('./Component'),\n  ActionComponent: require('./ActionComponent'),\n  BehaviourComponent: require('./BehaviourComponent'),\n  EffectComponent: require('./EffectComponent')\n};\n\nmodule.exports = Components;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Component from './Component';\nimport Behaviours from '../sprites/behaviours';\n\n/**\n * @classdesc\n * Class representing the BehaviourComponent.\n * BehaviourComponent is responsible to handle all the behaviours of a Sprite.\n * A Sprite can be INERT, OBSERVABLE, EXAMINABLE, INTERACTIVE, INVENTORY, TALKABLE.\n *\n * @class BehaviourComponent\n * @memberof TDLib.Components\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Sprites.Sprite} gameObject - The Sprite that owns the component.\n * @param {string} type - The type of behaviour of the gameObject.\n * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n */\nexport default class BehaviourComponent extends Component {\n  constructor(gameObject, type, pixelPerfect) {\n    super(gameObject);\n\n    /**\n     * A reference to the player in the current room.\n     * @type {TDLib.Sprites.Characters.Player}\n     * @name TDLib.Components.BehaviourComponent#player\n     * @since 1.0.0\n     */\n    this.player;\n    if (typeof this.gameObject.room.player === 'undefined') this.player = this.gameObject;\n    else this.player = this.gameObject.room.player;\n\n    /**\n     * The type of behaviour of the gameObject.\n     * @type {string}\n     * @name TDLib.Components.BehaviourComponent#type\n     * @since 1.0.0\n     */\n    this.type = type;\n\n    /**\n     * If not null enable the pixel perfect pointer hit for the Sprite.\n     * @type {string}\n     * @name TDLib.Components.BehaviourComponent#pixelPerfect\n     * @since 1.0.0\n     */\n    this.pixelPerfect = pixelPerfect;\n\n    this._addBehaviours();\n  }\n\n  /**\n   * Select the appropriate behaviour for the gameObject.\n   *\n   * @method TDLib.Components.BehaviourComponent#_addBehaviours\n   * @protected\n   * @since 1.0.0\n   */\n  _addBehaviours() {\n    // Se l'oggetto è osservabile (cioè esaminabile o interagibile) setto il cursore appropriato\n    if (this.type === Behaviours.EXAMINABLE || this.type === Behaviours.INTERACTIVE) {\n      this.observe = new Behaviours.Observable(this);\n      if (this.type === Behaviours.EXAMINABLE) this.examine = new Behaviours.Examinable(this);\n      else if (this.type === Behaviours.INTERACTIVE) this.interact = new Behaviours.Interactive(this);\n    }\n  }\n}\n","const Effects = {\n  Effect: require('./Effect'),\n  LightEffects: require('./light-effects')\n};\n\nmodule.exports = Effects;\n","import EffectComponent from '../../components/EffectComponent';\n\nexport default class Effect {\n  constructor(invoker, config = {}) {\n\n    this.invoker = invoker;\n\n    this.config = config;\n\n    this.gameObject = invoker.gameObject;\n\n    this.name = this.constructor.name;\n  }\n\n  play(callback = () => { }) {\n    if (this.invoker instanceof EffectComponent) {\n      callback();\n    } else console.log('Effects can only be played by the EffectComponent');\n  }\n\n  stop(callback = () => { }) {\n    if (this.invoker instanceof EffectComponent) {\n      callback();\n    } else console.log('Effects can only be stopped by the EffectComponent');\n  }\n}\n","import LightEffect from './LightEffect';\n\nexport default class HardFlickering extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.5);\n\n    if (!this.config.minTime) this.config.minTime = 10;\n    if (!this.config.maxTime) this.config.maxTime = 400;\n    if (!this.config.finalState) this.config.finalState = 'on';\n  }\n\n  play() {\n    super.play(() => {\n      let setTimer = () => {\n        this.gameObject.room.time.addEvent({\n          delay: Math.floor(Math.random() * (this.config.maxTime - this.config.minTime)) + this.config.minTime,\n          callback: () => {\n            if (!this.stopped) {\n              if (this.gameObject.initialConfig.graphicLight !== null) {\n                if (this.gameObject.graphicLight.intensity === 0) this.gameObject.graphicLight.setIntensity(this.gameObject.initialConfig.graphicLight.intensity);\n                else this.gameObject.graphicLight.setIntensity(0);\n              }\n\n              if (this.gameObject.initialConfig.diffusedLight !== null) {\n                if (this.gameObject.diffusedLight.intensity === 0) this.gameObject.diffusedLight.setIntensity(this.gameObject.initialConfig.diffusedLight.intensity);\n                else this.gameObject.diffusedLight.setIntensity(0);\n              }\n              setTimer();\n            }\n          },\n          callbackScope: this,\n          repeat: 0\n        });\n      };\n\n      setTimer();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      if (this.config.finalState === 'on') {\n        if (this.gameObject.initialConfig.graphicLight !== null) {\n          this.gameObject.graphicLight.setIntensity(this.gameObject.initialConfig.graphicLight.intensity);\n        }\n        if (this.gameObject.initialConfig.diffusedLight !== null) {\n          this.gameObject.diffusedLight.setIntensity(this.gameObject.initialConfig.diffusedLight.intensity);\n        }\n      } else if (this.config.finalState === 'off') {\n        this.gameObject.turnOff();\n      }\n    });\n  }\n}\n","import LightEffect from './LightEffect';\n\nexport default class SoftFlickering extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.8);\n\n    if (!this.config.minTime) this.config.minTime = 10;\n    if (!this.config.maxTime) this.config.maxTime = 100;\n    if (!this.config.minPercentageIntensity) this.config.minPercentageIntensity = 0.8;\n    if (!this.config.maxPercentageIntensity) this.config.maxPercentageIntensity = 1;\n    if (!this.config.backToInitialIntensity) this.config.backToInitialIntensity = true;\n  }\n\n  play() {\n    super.play(() => {\n      let setTimer = () => {\n        this.gameObject.room.time.addEvent({\n          delay: Math.floor(Math.random() * (this.config.maxTime - this.config.minTime)) + this.config.minTime,\n          callback: () => {\n            if (!this.stopped) {\n              let newIntensityPercentage = Math.floor((this.config.minPercentageIntensity + Math.random() * (this.config.maxPercentageIntensity - this.config.minPercentageIntensity)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity * newIntensityPercentage);\n              this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity * newIntensityPercentage);\n              setTimer();\n            }\n          },\n          callbackScope: this,\n          repeat: 0\n        });\n      };\n\n      setTimer();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      if (this.config.backToInitialIntensity) {\n        this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity);\n        this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity);\n      } else {\n        this.gameObject.config.graphicLight.intensity = this.gameObject.graphicLight.intensity;\n        this.gameObject.config.diffusedLight.intensity = this.gameObject.diffusedLight.intensity;\n      }\n    });\n  }\n}\n","import WorldItem from '../WorldItem';\nimport Behaviours from '../../behaviours';\nimport EffectComponent from '../../../components/EffectComponent';\n\nexport default class LightSource extends WorldItem {\n  /**\n   * constructor of the class\n   * @param {Room} room - Room in which will be created the LightSource.\n   * @param {number} x - X position of the sprite.\n   * @param {number} y - Y position of the sprite.\n   * @param {string} texture - Name of the sprite for the LightSource.\n   * @param {string} layer - Name of the Layer in which will be put the LightSource.\n   * @param {Object} graphicLightConfig - Configuration of the graphic light of the LightSource.\n   * @param {number} graphicLightConfig.intensity - Intensity of the graphic light.\n   * @param {number} graphicLightConfig.radius - Radius of the graphic light.\n   * @param {Object} diffusedLightConfig - Configuration of the diffused light of the LightSource.\n   * @param {number} diffusedLightConfig.intensity - Intensity of the diffused light.\n   * @param {number} diffusedLightConfig.radius - Radius of the diffused light.\n   * @param {Object} offset - Offset of the graphic light respect the center of the sprite.\n   * @param {number} offset.x - X offset.\n   * @param {number} offset.y - Y offset.\n   * @param {boolean} [isOn=true] - Light created as switched on or off.\n   */\n  constructor(room, x, y, texture, layer, graphicLightConfig, diffusedLightConfig, offset, isOn = true) {\n    super(room, x, y, texture, layer, true, Behaviours.EXAMINABLE);\n\n    this.setGravityY(0);\n\n    this.initialConfig = {\n      graphicLight: graphicLightConfig,\n      diffusedLight: diffusedLightConfig,\n      offset: offset\n    };\n\n    this.config = this.initialConfig;\n\n    this.isOn = false;\n    if (isOn) {\n      this.turnOn();\n    }\n\n    // Register this LightSource instance to the Room's LightManager\n    this.room.lightSources.add(this);\n    this.effects = new EffectComponent(this);\n  }\n\n  /**\n   * Turn on the lights of the LightSource by creating new ones.\n   */\n  turnOn() {\n    if (!this.isOn) {\n      if (this.initialConfig.diffusedLight !== null) {\n        this.diffusedLight = this.room.lights.addLight(this.x + this.initialConfig.offset.x, this.y + this.initialConfig.offset.y, this.initialConfig.diffusedLight.radius).setIntensity(this.initialConfig.diffusedLight.intensity);\n        this.room.lightSources.diffusedLights.push(this.diffusedLight);\n      }\n\n      if (this.initialConfig.graphicLight !== null) {\n        this.graphicLight = this.room.lights.addLight(this.x + this.initialConfig.offset.x, this.y + this.initialConfig.offset.y, this.initialConfig.graphicLight.radius).setIntensity(this.initialConfig.graphicLight.intensity);\n        this.room.lightSources.graphicLights.push(this.graphicLight);\n      }\n\n      this.isOn = true;\n    }\n  }\n\n  /**\n     * Turn off the lights of the LightSource by deleting the existing ones.\n     * @param {boolean} [stopBehaviours=true] - If true, turning off the light stops all the behaviours.\n     */\n  turnOff(stopBehaviours = true) {\n\n    // if (stopBehaviours) this.lightBehaviour.stopAllBehaviours();\n    if (this.isOn) {\n      let diffusedLightindex = this.room.lightSources.diffusedLights.indexOf(this.diffusedLight);\n\n      if (diffusedLightindex > -1) {\n        this.room.lightSources.diffusedLights.splice(diffusedLightindex, 1);\n        this.room.lights.removeLight(this.diffusedLight);\n      }\n\n      let graphicLightindex = this.room.lightSources.graphicLights.indexOf(this.graphicLight);\n\n      if (graphicLightindex > -1) {\n        this.room.lightSources.graphicLights.splice(graphicLightindex, 1);\n        this.room.lights.removeLight(this.graphicLight);\n      }\n\n      this.isOn = false;\n    }\n  }\n\n  /**\n   * If the light source is on, turn it off and vice versa.\n   */\n  switch() {\n    if (this.isOn) this.turnOff();\n    else this.turnOn();\n  }\n}\n","const Utils = {\n  getScreenProps: require('./Utils')\n};\n\nmodule.exports = Utils;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\n/**\n * A Manager is a controller working at a Room level.\n * It is unique in its own Room, but it isn't in the whole game.\n * From Phaser library a Manager is handled as a Phaser.Plugins.ScenePlugin.\n * It has to be added to the game into Game.js through the specified method.\n * @see TDLib.Game#_setPlugins\n * @namespace TDLib.Managers\n */\n\nconst Managers = {\n  LayerManager: require('./layers/LayerManager'),\n  LightSourceManager: require('./light-sources/LightSourceManager'),\n  Manager: require('./Manager'),\n  UpdateManager: require('./updates/UpdateManager')\n};\n\nmodule.exports = Managers;\n","const Systems = {\n  CursorSystem: require('./cursors/CursorSystem'),\n  RoomSystem: require('./rooms/RoomSystem')\n};\n\nmodule.exports = Systems;\n","import Sprite from '../Sprite';\nimport Behaviour from '../behaviours';\nimport Components from '../../components';\nimport CONST from '../../const';\n\n/**\n * The characters namespace.\n * @namespace TDLib.Sprites.Characters\n * @since 1.0.0\n */\n\n/**\n * Class representing a Character.\n * @extends TDLib.Sprites.Sprite\n * @memberof TDLib.Sprites.Characters\n * @since 1.0.0\n */\nexport default class Character extends Sprite {\n  /**\n   * Create a new Character.\n   * @param {Room} room - The room where the character is created.\n   * @param {number} x - The x coordinate of the character.\n   * @param {number} y - The y coordinate of the character.\n   * @param {string} texture - The character's graphic.\n   * @param {string} layer - The character's layer.\n   */\n  constructor(room, x, y, texture, layer) {\n    super(...arguments, true, Behaviour.INTERACTIVE, { alphaTolerance: 1 });\n\n    /**\n     * The ActionComponent for this character.\n     * @type {Components.ActionComponent}\n     * @since 1.0.0\n     */\n    this.actions = new Components.ActionComponent(this);\n\n    /**\n     * The facing of the character.\n     * @type {TDLCharacter.FACING}\n     * @since 1.0.0\n     */\n    this.facing = CONST.RIGHT;\n  }\n\n  create() {\n    super.create();\n    // this.setPipeline('Light2D');\n  }\n}\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport CONST from './const';\nimport Phaser from 'phaser';\n\n/**\n * @namespace TDLib\n */\n\nvar TDLib = {\n  Components: require('./components'),\n  Game: require('./boot/Game'),\n  Managers: require('./managers'),\n  Rooms: require('./rooms'),\n  Settings: require('./boot/Settings'),\n  Sprites: require('./sprites'),\n  Systems: require('./systems'),\n  Utils: require('./utils')\n};\n\n// Merge the consts\n// eslint-disable-next-line no-undef\nTDLib = Phaser.Utils.Objects.Extend(false, TDLib, CONST);\n\n// Export the module\nmodule.exports = TDLib;\nglobal.TDLib = TDLib;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__28__;","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Component from './Component';\nimport Actions from '../sprites/actions';\n\n/**\n * @classdesc\n * Class representing the ActionComponent.\n * ActionComponent is responsible to handle all the actions for a Sprite.\n *\n * @class ActionComponent\n * @memberof TDLib.Components\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Sprites.Sprite} gameObject - The performer of the action.\n */\nexport default class ActionComponent extends Component {\n  constructor(gameObject) {\n    super(gameObject);\n\n    /**\n     * The performer of the action.\n     * @type {TDLib.Sprites.Sprite}\n     * @name TDLib.Components.ActionComponent#gameObject\n     * @since 1.0.0\n     */\n    this.gameObject = gameObject;\n\n    /**\n     * The default action to be played, AIdle by default.\n     * @type {TDLib.Components.Actions.Action}\n     * @name TDLib.Components.ActionComponent#defaultAction\n     * @since 1.0.0\n     */\n    this.defaultAction = new Actions.Idle(this, this.gameObject);\n\n    /**\n     * The queue of actions.\n     * @type {Array}\n     * @name TDLib.Components.ActionComponent#_queue\n     * @protected\n     * @since 1.0.0\n     */\n    this._queue = [this.defaultAction];\n    this._queue[0]._start();\n  }\n\n  /**\n   * Using this mode the queue is emptied and the new action is immediately performed.\n   * @name TDLib.Components.ActionComponent#DEFAULT_MODE\n   * @since 1.0.0\n   */\n  static get DEFAULT_MODE() {\n    return 0;\n  }\n\n  /**\n   * Using this mode the new action is added to the queue.\n   * @name TDLib.Components.ActionComponent#QUEUE_MODE\n   * @since 1.0.0\n   */\n  static get QUEUE_MODE() {\n    return 1;\n  }\n\n  /**\n   * Using this mode the currently performed action is paused and the new action is immediately performed.\n   * Then the paused action is resumed.\n   * @name TDLib.Components.ActionComponent#PAUSE_MODE\n   * @since 1.0.0\n   */\n  static get PAUSE_MODE() {\n    return 2;\n  }\n\n  /**\n   * Starts a new action or add that to the queue.\n   *\n   * @method TDLib.Components.ActionComponent#add\n   * @param {TDLib.Components.Sprites.Actions.Action} action - The action to add or execute.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   * @param {number} [mode=ActionComponent.DEFAULT_MODE] - The operating mode of the component.\n   * @since 1.0.0\n   */\n  add(Action, config, mode = ActionComponent.DEFAULT_MODE) {\n\n    let newAction = new Action(this, this.gameObject, config);\n\n    switch (mode) {\n      case ActionComponent.DEFAULT_MODE: {\n        this._queue[0]._abort();\n        this._queue = [];\n        this._queue.push(newAction);\n        this._queue[0]._start();\n      };\n        break;\n\n      case ActionComponent.QUEUE_MODE: {\n        this._queue.push(newAction);\n      };\n        break;\n\n      case ActionComponent.PAUSE_MODE: {\n        this._queue[0]._pause();\n        this._queue.unshift(newAction);\n        this._queue[0]._start();\n      };\n        break;\n    }\n\n    return newAction;\n  }\n\n  /**\n   * Remove a completed action from the queue.\n   *\n   * @method TDLib.Components.ActionComponent#_remove\n   * @protected\n   * @since 1.0.0\n   */\n  _remove() {\n    this._queue.shift();\n    if (this._queue.length <= 0) this._queue.push(this.defaultAction);\n    if (this._queue[0].isPaused) this._queue[0]._resume();\n    else this._queue[0]._start();\n  }\n\n  /**\n   * Update the currently performed action.\n   *\n   * @method TDLib.Components.ActionComponent#_update\n   * @protected\n   * @since 1.0.0\n   */\n  _update() {\n    if (this._queue.length <= 0) this._queue.push(this.defaultAction);\n    else if (this._queue.length > 1 && this._queue[0].name === 'Idle') {\n      this._queue.shift();\n      if (this._queue[0].isPaused) this._queue[0]._resume();\n      else this._queue[0]._start();\n    }\n\n    this._queue[0]._update();\n  }\n}\n","import Action from '../Action';\nimport WalkTo from '../walk-to/WalkTo';\n\nexport default class Examine extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new WalkTo(this, this.actor, this.config),\n        this.target.behaviours.examine.getAction(this)\n      ]\n    );\n  }\n}\n","const Settings = {\n  MICRO_MOVEMENT_RADIUS: 6\n};\n\nmodule.exports = Settings;\n","const Settings = {\n  WALK_VELOCITY: 100,\n  MICRO_MOVEMENT_RADIUS: 20\n};\n\nmodule.exports = Settings;\n","import Action from '../Action';\nimport CONST from '../../../const';\n\n/**\n * Class representing the idle action.\n * @extends TDLib.Components.Actions.Action\n * @memberof TDLib.Components.Actions\n */\nexport default class Idle extends Action {\n  /**\n   * Start a new idle action.\n   * @param {Components.ActionComponent|Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @param {TDLSprite} actor - The actor who performs the action.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   */\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      new Action.BaseAction(\n        this,\n        () => {\n          this.actor.body.setVelocity(0);\n          switch (this.actor.facing) {\n\n            case CONST.LEFT: {\n              this.actor.anims.play('idle');\n              // this.actor.anims.play('idleLeft');\n            }\n              break;\n\n            case CONST.RIGHT: {\n              this.actor.anims.play('idle');\n              // this.actor.anims.play('idleRight');\n            }\n              break;\n\n            // possibili altri casi di facing (es girato di spalle o da davanti)\n          }\n        }\n      )\n    );\n  }\n}\n","import Action from '../Action';\nimport WalkTo from '../walk-to/WalkTo';\n\nexport default class Interact extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new WalkTo(this, this.actor, this.config),\n        this.target.behaviours.interact.getAction(this)\n      ]\n    );\n  }\n}\n","import Action from '../Action';\nimport FaceTo from '../face-to/FaceTo';\n\nexport default class Observe extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new FaceTo(this, this.actor, this.config),\n        this.target.behaviours.observe.getAction(this)\n      ]\n    );\n  }\n}\n","import Action from '../Action';\nimport FaceTo from '../face-to/FaceTo';\nimport Settings from './Settings';\n\n// da cambiare e mettere tutta dentro l'AWalkTo e fare un Move to che distingua che azioni chiamare?\nexport default class RunTo extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new FaceTo(this, this.actor, this.config),\n        new Action.BaseAction(\n          this,\n          () => {\n            if (Math.abs(this.actor.x - this.target.x) > Settings.MICRO_MOVEMENT_RADIUS) {\n              if (this.actor.x < this.target.x) {\n                this.actor.anims.play('run');\n                // this.actor.anims.play('runRight');\n                this.actor.body.setVelocity(Settings.RUN_VELOCITY);\n              } else if (this.actor.x > this.target.x) {\n                this.actor.anims.play('run');\n                // this.actor.anims.play('runLeft');\n                this.actor.body.setVelocity(-Settings.RUN_VELOCITY);\n              }\n              console.log('start to run to ', config.target.x);\n            } else {\n              this.finish();\n            }\n          },\n          () => {\n            this.actor.body.setVelocity(0);\n          },\n          () => {\n            if ((this.actor.x - this.target.x) * this.actor.body.velocity.x > 0) this.finish();\n          }\n        )\n      ]\n    );\n  }\n}\n","const Settings = {\n  RUN_VELOCITY: 240,\n  MICRO_MOVEMENT_RADIUS: 20\n};\n\nmodule.exports = Settings;\n","const CONST = {\n  EXAMINABLE: 'EXAMINABLE',\n  INERT: 'INERT',\n  INTERACTIVE: 'INTERACTIVE',\n  TALKABLE: 'TALKABLE',\n  INVENTORY: 'INVENTORY',\n\n  DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE: 0.05,\n  DEFAULT_OBSERVE_TEXT: 'Observe default text',\n  DEFAULT_NO_LIGHT_OBSERVE_TEXT: 'NoLightObserve default text',\n  DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT: 0.04,\n  DEFAULT_EXAMINE_OR_INTERACT_TEXT: 'ExamineOrInteract default text',\n  DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT: 'NoLightExamineOrInteract default text'\n};\n\nmodule.exports = CONST;\n","import Behaviour from '../Behaviour';\nimport Action from '../../actions/Action';\n\nexport default class Examinable extends Behaviour {\n  constructor(component) {\n    super(component);\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Action.BaseAction(\n      invoker,\n      () => {\n        // Fare i controlli su quanta luce c'è nella stanza!\n        if (this.checkLight(this.gameObject.minLightLevelToExamineOrInteract)) console.log(this.gameObject.examineOrInteractText);\n        else console.log(this.gameObject.noLightExamineOrInteractText);\n        invoker.finish();\n      }\n    );\n  }\n}\n","import Behaviour from '../Behaviour';\nimport Action from '../../actions/Action';\n\nexport default class Interactive extends Behaviour {\n  constructor(component) {\n    super(component);\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Action.BaseAction(\n      invoker,\n      () => {\n        // Fare i controlli su quanta luce c'è nella stanza!\n        if (this.checkLight(this.gameObject.minLightLevelToExamineOrInteract)) console.log(this.gameObject.examineOrInteractText);\n        else console.log(this.gameObject.noLightExamineOrInteractText);\n        invoker.finish();\n      }\n    );\n  }\n}\n","import Behaviour from '../Behaviour';\nimport Actions from '../../actions';\nimport Settings from './Settings';\n\nexport default class Observable extends Behaviour {\n  constructor(component) {\n    super(component);\n\n    this._timer;\n  }\n\n  add() {\n    super.add();\n\n    this.gameObject.on('pointerover', function (pointer) {\n      this.cursors.setCursor(this.gameObject);\n\n      this._timer = this.gameObject.room.time.addEvent({\n        delay: Settings.DEFAULT_MIN_TIME_TO_OBSERVE,\n        callback: () => {\n          if (this.gameObject !== this.room.player && !this.room.player.isBlocked) this.room.player.actions.add(Actions.Observe, { target: this.gameObject });\n        },\n        callbackScope: this\n      });\n    }.bind(this));\n\n    this.gameObject.on('pointerout', function (pointer) {\n      this._timer.remove(false);\n      this.cursors.setCursor();\n    }.bind(this));\n  }\n\n  /**\n   * Delete the timer which starts the AObserve action.\n   */\n  abort() {\n    this._timer.remove(false);\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Actions.Action.BaseAction(\n      invoker,\n      () => {\n        // Fare i controlli su quanta luce c'è nella stanza!\n        if (this.checkLight(this.gameObject.minLightLevelToObserve)) console.log(this.gameObject.observeText);\n        else console.log(this.gameObject.noLightObserveText);\n        invoker.finish();\n      }\n    );\n  }\n}\n","const Settings = {\n  DEFAULT_MIN_TIME_TO_OBSERVE: 1200\n};\n\nmodule.exports = Settings;\n","export default class Inventory {\n  constructor() {\n\n  }\n}\n","const LightEffects = {\n  HardFlickering: require('./HardFlickering'),\n  HardFlickeringAndTrembling: require('./HardFlickeringAndTrembling'),\n  LightEffect: require('./LightEffect'),\n  RadiusFlickering: require('./RadiusFlickering'),\n  SoftFlickering: require('./SoftFlickering'),\n  SoftFlickeringAndTrembling: require('./SoftFlickeringAndTrembling'),\n  Trembling: require('./Trembling')\n};\n\nmodule.exports = LightEffects;\n","import LightEffect from './LightEffect';\nimport HardFlickering from './HardFlickering';\nimport Trembling from './Trembling';\n\nexport default class HardFlickeringAndTrembling extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.5);\n\n    this.hardFlickering = new HardFlickering(this.invoker, this.config);\n    this.trembling = new Trembling(this.invoker, this.config);\n  }\n\n  play() {\n    super.play(() => {\n      this.hardFlickering.play();\n      this.trembling.play();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      this.hardFlickering.stop();\n      this.trembling.stop();\n    });\n  }\n}\n","import LightEffect from './LightEffect';\n\nexport default class RadiusFlickering extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.9);\n\n    if (!this.config.minTime) this.config.minTime = 10;\n    if (!this.config.maxTime) this.config.maxTime = 100;\n    if (!this.config.minPercentageIntensity) this.config.minPercentageIntensity = 0.8;\n    if (!this.config.maxPercentageIntensity) this.config.maxPercentageIntensity = 1;\n    if (!this.config.minPercentageRadius) this.config.minPercentageRadius = 0.8;\n    if (!this.config.maxPercentageRadius) this.config.maxPercentageRadius = 1;\n    if (!this.config.backToInitialIntensity) this.config.backToInitialIntensity = true;\n    if (!this.config.backToInitialRadius) this.config.backToInitialRadius = true;\n  }\n\n  play() {\n    super.play(() => {\n      var setTimer = () => {\n        this.gameObject.room.time.addEvent({\n          delay: Math.floor(Math.random() * (this.config.maxTime - this.config.minTime)) + this.config.minTime,\n          callback: () => {\n            if (!this.stopped) {\n              let newIntensityPercentage = Math.floor((this.config.minPercentageIntensity + Math.random() * (this.config.maxPercentageIntensity - this.config.minPercentageIntensity)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity * newIntensityPercentage);\n              this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity * newIntensityPercentage);\n              let newRadiusPercentage = Math.floor((this.config.minPercentageRadius + Math.random() * (this.config.maxPercentageRadius - this.config.minPercentageRadius)) * 100 + 1) / 100;\n\n              this.gameObject.graphicLight.setRadius(this.gameObject.config.graphicLight.radius * newRadiusPercentage);\n\n              setTimer();\n            }\n\n          },\n          callbackScope: this,\n          repeat: 0\n        });\n      };\n\n      setTimer();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      if (this.config.backToInitialIntensity) {\n        this.gameObject.graphicLight.setIntensity(this.gameObject.config.graphicLight.intensity);\n        this.gameObject.diffusedLight.setIntensity(this.gameObject.config.diffusedLight.intensity);\n      } else {\n        this.gameObject.config.graphicLight.intensity = this.gameObject.graphicLight.intensity;\n        this.gameObject.config.diffusedLight.intensity = this.gameObject.diffusedLight.intensity;\n      }\n      if (this.config.backToInitialRadius) {\n        this.gameObject.graphicLight.setRadius(this.gameObject.config.graphicLight.radius);\n      } else {\n        this.gameObject.config.graphicLight.radius = this.gameObject.graphicLight.radius;\n      }\n    });\n  }\n}\n","import LightEffect from './LightEffect';\nimport SoftFlickering from './SoftFlickering';\nimport Trembling from './Trembling';\n\nexport default class SoftDefaultFlickeringAndtrembling extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.5);\n\n    this.softFlickering = new SoftFlickering(this.invoker, this.config);\n    this.trembling = new Trembling(this.invoker, this.config);\n  }\n\n  play() {\n    super.play(() => {\n      this.softFlickering.play();\n      this.trembling.play();\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      this.softFlickering.stop();\n      this.trembling.stop();\n    });\n  }\n}\n","/**\r\n * @author       Francesco Negri <francesco.negri@outlook.com>\r\n * @copyright    2019 The Darkest Light\r\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\r\n */\r\n\r\nimport Settings from './Settings';\r\nimport DebugHeader from './DebugHeader';\r\nimport Utils from '../utils';\r\nimport Managers from '../managers';\r\nimport Systems from '../systems';\r\n\r\n/**\r\n * @classdesc\r\n * The TDLib.Game instance is the main controller for the entire game. It create an instace\r\n * of Phaser.Game with a default configuration of various parameters.\r\n *\r\n * @class Game\r\n * @memberof TDLib\r\n * @constructor\r\n * @since 1.0.0\r\n *\r\n * @param {Object} [config] - The configuration object for your TDLib Game instance.\r\n * @param {Object} [config.title] - The title of your game.\r\n * @param {Object} [config.url] - The url of your online game or website.\r\n * @param {Object} [config.version] - The version of your game.\r\n */\r\nexport default class Game {\r\n  constructor(config) {\r\n    /**\r\n     * The parsed Game Configuration object.\r\n     *\r\n     * The values stored within this object are read-only and should not be changed at run-time.\r\n     *\r\n     * @name TDLib.Game#config\r\n     * @type {Object}\r\n     * @readonly\r\n     * @since 1.0.0\r\n     */\r\n    this.config = config;\r\n    this._setScreenConfig();\r\n    this._setPhysicsConfig();\r\n    this._setPlugins();\r\n    this._setBoot();\r\n    this._setHeaderProps();\r\n    this._finalizeConfig();\r\n\r\n    /** ************ TODO: Aggiungere il device e la funzione per determinarlo **************/\r\n\r\n    // eslint-disable-next-line no-undef\r\n    Settings.GAME = new Phaser.Game(this.config);\r\n\r\n    DebugHeader(Settings.GAME);\r\n    return Settings.GAME;\r\n  }\r\n\r\n  /**\r\n   * This method is called automatically and configure the screen proportions and settings for the Game.\r\n   *\r\n   * @method TDLib.Game#_setScreenConfig\r\n   * @protected\r\n   * @since 1.0.0\r\n   */\r\n  _setScreenConfig() {\r\n    Settings.SCREEN_PROPS = Utils.getScreenProps();\r\n\r\n    this.config.width = Settings.SCREEN_PROPS.calculatedWidth;\r\n    this.config.height = Settings.SCREEN_PROPS.calculatedHeight;\r\n    this.config.zoom = Settings.SCREEN_PROPS.calculatedZoom;\r\n\r\n    this.config.autoResize = false;\r\n    this.config.backgroundColor = '#000000';\r\n    this.config.pixelArt = true;\r\n  }\r\n\r\n  /**\r\n   * This method is called automatically and configure physics for the Game using the Arcade engine of Phaser.\r\n   *\r\n   * @method TDLib.Game#_setPhysicsConfig\r\n   * @protected\r\n   * @since 1.0.0\r\n   */\r\n  _setPhysicsConfig() {\r\n    this.config.physics = {\r\n      default: 'arcade',\r\n      arcade: {\r\n        debug: false,\r\n        gravity: { y: 0, x: 0 }\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * This method is called automatically and configure the plugins for the Game.\r\n   * Global plugins are called Systems.\r\n   * Scene plugins are called Managers.\r\n   *\r\n   * @method TDLib.Game#_setPlugins\r\n   * @protected\r\n   * @since 1.0.0\r\n   */\r\n  _setPlugins() {\r\n    this.config.plugins = {\r\n      // Systems\r\n      global: [\r\n        { key: 'RoomSystem', plugin: Systems.RoomSystem, start: false, mapping: 'rooms' },\r\n        { key: 'CursorSystem', plugin: Systems.CursorSystem, start: false, mapping: 'cursors' }\r\n      ],\r\n      // Managers\r\n      scene: [\r\n        { key: 'UpdateManager', plugin: Managers.UpdateManager, mapping: 'updates' },\r\n        { key: 'LightSourceManager', plugin: Managers.LightSourceManager, mapping: 'lightSources' },\r\n        { key: 'LayerManager', plugin: Managers.LayerManager, mapping: 'layers' }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * This method is called automatically and configure the Phaser.Scene Boot to start the Systems.\r\n   *\r\n   * @method TDLib.Game#_setBoot\r\n   * @protected\r\n   * @since 1.0.0\r\n   */\r\n  _setBoot() {\r\n    // eslint-disable-next-line no-undef\r\n    this.config.scene = [Boot]; /** ****** TODO: Valutare come spostare il Boot dentro alla libreria*******/\r\n  }\r\n\r\n  /**\r\n   * This method is called automatically and turn off the default Phaser header/banner.\r\n   *\r\n   * @method TDLib.Game#_setHeaderProps\r\n   * @protected\r\n   * @since 1.0.0\r\n   */\r\n  _setHeaderProps() {\r\n    this.config.banner = false;\r\n  }\r\n\r\n  /**\r\n   * This method is called automatically and finalize the config passed to Phaser.Game.\r\n   *\r\n   * @method TDLib.Game#_finalizeConfig\r\n   * @protected\r\n   * @since 1.0.0\r\n   */\r\n  _finalizeConfig() {\r\n    // eslint-disable-next-line no-undef\r\n    this.config.type = Phaser.WEBGL;\r\n    this.config.maxLights = 20;\r\n    this.config.parent = 'game';\r\n    this.config.disableContextMenu = true;\r\n  }\r\n}\r\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nvar CONST = require('../const');\nvar Settings = require('./Settings');\n\n/**\n * Called automatically by Phaser.Game and responsible for creating the console.log debug header.\n *\n * You can customize or disable the header via the Game Config object.\n *\n * @function TDLib.Boot.DebugHeader\n * @since 1.0.0\n *\n * @param {TDLib.Game} game - The TDLib.Game instance which will output this debug header.\n */\nvar DebugHeader = function (game) {\n  let config = game.config;\n\n  config.bannerBackgroundColor = '#0002e6';\n  config.bannerTextColor = '#ffffff';\n  config.hidePhaser = false;\n\n  let renderType = 'WebGL';\n\n  if (config.renderType !== 2) {\n    renderType = 'NULL';\n  }\n\n  let audioConfig = config.audio;\n\n  let deviceAudio = game.device.audio;\n\n  let audioType;\n\n  if (deviceAudio.webAudio && !(audioConfig && audioConfig.disableWebAudio)) {\n    audioType = 'Web Audio';\n  } else if ((audioConfig && audioConfig.noAudio) || (!deviceAudio.webAudio && !deviceAudio.audioData)) {\n    audioType = 'No Audio';\n  } else {\n    audioType = 'HTML5 Audio';\n  }\n\n  if (!game.device.browser.ie) {\n    let c = '';\n\n    let args = [c];\n\n    if (Array.isArray(config.bannerBackgroundColor)) {\n      let lastColor;\n\n      config.bannerBackgroundColor.forEach(function (color) {\n        c = c.concat('%c ');\n\n        args.push('background: ' + color);\n\n        lastColor = color;\n\n      });\n\n      //  inject the text color\n      args[args.length - 1] = 'color: ' + config.bannerTextColor + '; background: ' + lastColor;\n    } else {\n      c = c.concat('%c ');\n\n      args.push('color: ' + config.bannerTextColor + '; background: ' + config.bannerBackgroundColor);\n    }\n\n    //  URL link background color (always white)\n    args.push('background: #fff');\n\n    if (config.gameTitle) {\n      c = c.concat(config.gameTitle);\n\n      if (config.gameVersion) {\n        c = c.concat(' v' + config.gameVersion);\n      }\n\n      if (!config.hidePhaser) {\n        c = c.concat(' / ');\n      }\n    }\n\n    if (!config.hidePhaser) {\n      c = c.concat('TDLib v' + CONST.VERSION + ' / Phaser v' + CONST.PHASER_VERSION);\n      c = c.concat(' (' + renderType + ' | ' + audioType + ' | ' + Settings.DEVICE + ')');\n    }\n\n    c = c.concat(' %c ' + config.gameURL);\n\n    //  Inject the new string back into the args array\n    args[0] = c;\n\n    console.log.apply(console, args);\n  }\n};\n\nmodule.exports = DebugHeader;\n","import Settings from '../boot/Settings';\n\nconst getScreenProps = () => {\n  var returnValue = {};\n\n  // cz : ah = 1 : mh\n  if (Settings.DEVICE === 'MOBILE') {\n    returnValue.availHeight = window.innerHeight;\n    returnValue.availWidth = window.innerWidth;\n    returnValue.calculatedZoom = Math.floor(returnValue.availHeight / ((Settings.ROOM_HEIGHT_IN_TILE + Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE + Settings.ROOM_FRAME_IN_TILES_MOBILE * 2) * Settings.TILE_SIZE) * 100) / 100;\n  } else {\n    returnValue.availHeight = screen.height;\n    returnValue.availWidth = screen.width;\n    returnValue.calculatedZoom = Math.floor(returnValue.availHeight / ((Settings.ROOM_HEIGHT_IN_TILE + Settings.INVENTORY_HEIGHT_IN_TILES_DESKTOP + Settings.ROOM_FRAME_IN_TILES_DESKTOP * 2) * Settings.TILE_SIZE) * 100) / 100;\n  }\n\n  console.log('ZOOM: ' + returnValue.calculatedZoom);\n\n  // Sono le dimensioni riaggiustate rispetto allo zoom scelto\n  // ch : ah = 1 : cz\n  returnValue.calculatedHeight = Math.ceil(returnValue.availHeight / returnValue.calculatedZoom);\n  returnValue.calculatedWidth = Math.ceil(returnValue.availWidth / returnValue.calculatedZoom);\n\n  console.log('AVAIL-H: ' + returnValue.availHeight + '\\nCALC-H: ' + returnValue.calculatedHeight);\n  console.log('AVAIL-W: ' + returnValue.availWidth + '\\nCALC-W: ' + returnValue.calculatedWidth);\n\n  return returnValue;\n};\n\nmodule.exports = getScreenProps;\n","/**\n * @author       Francesco Negri <francesco.negri@outlook.com>\n * @copyright    2019 The Darkest Light\n * @license      {@link https://github.com/FrancescoNegri/TheDarkestLib/blob/master/LICENSE|MIT License}\n */\n\nimport Manager from '../Manager';\nimport Settings from './Settings';\n\n/**\n * @classdesc\n * Class representing a LayerManager, responsible to manage\n * the layers order, in order to have all the elements rendered correctly.\n * Layers are Phaser.GameObjects.Group.\n *\n * @class LayerManager\n * @extends TDLib.Managers.Manager\n * @memberof TDLib.Managers\n * @constructor\n * @since 1.0.0\n *\n * @param {TDLib.Rooms.Room|Phaser.Scene} room - The room running the Manager.\n * @param {Phaser.Plugins.PluginManager} - A reference to Phaser PluginManager.\n */\nexport default class LayerManager extends Manager {\n  constructor(room, pluginManager) {\n    super(room, pluginManager);\n    /**\n     * The size in cells of each Layer.\n     * @type {number}\n     * @name TDLib.Managers.LayerManager#layerSize\n     * @since 1.0.0\n     */\n    this.layerSize = Settings.layerSize;\n\n    /**\n     * The starting depth of Layers.\n     * @type {number}\n     * @name TDLib.Managers.LayerManager#startingDepth\n     * @since 1.0.0\n     */\n    this.strartingDepth = Settings.startingDepth;\n  }\n\n  /**\n   * @lends TDLib.Managers.Manager.boot\n   */\n  boot() {\n    super.boot();\n    /**\n     * The Layer containing the background wall.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#backgroundLayer\n     * @since 1.0.0\n     */\n    this.backgroundLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the rear doors.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#rearDoorsLayer\n     * @since 1.0.0\n     */\n    this.rearDoorsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the objects fixed to the background wall.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#wallFurnitureLayer\n     * @since 1.0.0\n     */\n    this.wallFurnitureLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the objects in the room.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#roomFurnitureLayer\n     * @since 1.0.0\n     */\n    this.roomFurnitureLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the side doors.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#sideDoorsLayer\n     * @since 1.0.0\n     */\n    this.sideDoorsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the NPCs.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#playerLayer\n     * @since 1.0.0\n     */\n    this.npcLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the Player.\n     * @type {Phaser.GameObjects.Group}\n     * @since 1.0.0\n     */\n    this.playerLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the cieling objects from the roof.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#cielingObjectsLayer\n     * @since 1.0.0\n     */\n    this.cielingObjectsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the front doors.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#frontDoorsLayer\n     * @since 1.0.0\n     */\n    this.frontDoorsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the lateral walls.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#wallsLayer\n     * @since 1.0.0\n     */\n    this.wallsLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the lateral walls black mask.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#wallsMaskLayer\n     * @since 1.0.0\n     */\n    this.wallsMaskLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the overall darkness mask.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#overallDarknessLayer\n     * @since 1.0.0\n     */\n    this.overallDarknessLayer = this.room.add.group();\n\n    /**\n     * The Layer containing the border black masks.\n     * @type {Phaser.GameObjects.Group}\n     * @name TDLib.Managers.LayerManager#borderMasksLayer\n     * @since 1.0.0\n     */\n    this.borderMasksLayer = this.room.add.group();\n  }\n\n  /**\n   * Set the correct depth for each Layer in the right order.\n   * @method TDLib.Managers.LayerManager#setLayersDepth\n   * @since 1.0.0\n   */\n  setLayersDepth() {\n    let i = this.strartingDepth;\n\n    this.backgroundLayer.setDepth(this.layerSize * i);\n    i++;\n    this.rearDoorsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.wallFurnitureLayer.setDepth(this.layerSize * i);\n    i++;\n    this.roomFurnitureLayer.setDepth(this.layerSize * i);\n    i++;\n    this.sideDoorsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.npcLayer.setDepth(this.layerSize * i);\n    i++;\n    this.playerLayer.setDepth(this.layerSize * i);\n    i++;\n    this.cielingObjectsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.frontDoorsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.wallsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.wallsMaskLayer.setDepth(this.layerSize * i);\n    i++;\n    this.overallDarknessLayer.setDepth(this.layerSize * i);\n    i++;\n    this.borderMasksLayer.setDepth(this.layerSize * i);\n    i++;\n  }\n}\n","const Settings = {\n  layerSize: 10,\n  startingDepth: 0\n};\n\nmodule.exports = Settings;\n","import Manager from '../Manager';\nimport GlobalSettings from '../../boot/Settings';\n\nexport default class LightSourceManager extends Manager {\n  constructor(room, pluginManager) {\n    super(room, pluginManager);\n\n    this.graphicLights = [];\n    this.diffusedLights = [];\n  }\n\n  boot() {\n    super.boot();\n    this.lightSources = this.room.add.group();\n  }\n\n  add(source) {\n    this.lightSources.add(source, true);\n    this.lightSources.getChildren().forEach(lightSource => {\n      lightSource.setPipeline('Light2D');\n    });\n\n    return source;\n  }\n\n  // Le luci che flickerano o con comportamenti strani vanno contate?\n  calculateLightsContribuitePoint(target) {\n    let singleLightContributeAccumulator = 0;\n\n    this.lightSources.getChildren().forEach(light => {\n      if (light.isOn) {\n        let singleLightContribute = light.config.diffusedLight.intensity / (Math.abs(light.x + light.config.offset.x - target.x) ^ 2);\n\n        // COSE\n        if (light.effects.currentEffect) {\n          singleLightContribute *= light.effects.currentEffect.contributeFactor;\n        }\n\n        singleLightContributeAccumulator += singleLightContribute;\n      }\n    });\n\n    return Math.floor(singleLightContributeAccumulator * 10000) / 1000;\n  }\n\n  calculateAverageLightsContribute() {\n    let singleLightIntensityAccumulator = 0;\n\n    this.diffusedLights.forEach(light => {\n      singleLightIntensityAccumulator += light.intensity;\n    });\n    let averageLightsContribute = 0;\n\n    if (singleLightIntensityAccumulator !== 0) averageLightsContribute = Math.floor((singleLightIntensityAccumulator * 10000 / this.room.layers.wallsLayer.width / GlobalSettings.TILE_SIZE) * 100) / 100 + 0.3;\n    return averageLightsContribute;\n  }\n}\n","import Manager from '../Manager';\r\n\r\n/**\r\n * Class representing the update plugin.\r\n * @extends TDLib.Plugins.TDLRoomPlugin\r\n * @memberof TDLib.Plugins.RoomPlugins\r\n * @since 1.0.0\r\n */\r\nexport default class UpdateManager extends Manager {\r\n  /**\r\n   * Create a new UpdatePlugin.\r\n   * @param {TDLib.Rooms.Room} room - The room in which the layer manager operates.\r\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the plugin manager.\r\n   */\r\n  constructor(room, pluginManager) {\r\n    super(room, pluginManager);\r\n  }\r\n\r\n  /**\r\n   * Boot the plugin.\r\n   * @since 1.0.0\r\n   */\r\n  boot() {\r\n    super.boot();\r\n    const events = this.systems.events;\r\n\r\n    this.gameObjects = new Phaser.Structs.Set();\r\n\r\n    events.on('update', this._sceneUpdate, this);\r\n    events.on('shutdown', this._sceneShutdown, this);\r\n    events.once('destroy', this._sceneDestroy, this);\r\n  }\r\n\r\n  /**\r\n   * Update every game object.\r\n   * @param {*} time\r\n   * @param {*} delta\r\n   * @private\r\n   * @since 1.0.0\r\n   */\r\n  _sceneUpdate(time, delta) {\r\n    this.gameObjects.iterateLocal('update', time, delta);\r\n  }\r\n\r\n  /**\r\n   * Called at the shutdown of the scene.\r\n   * @private\r\n   * @since 1.0.0\r\n   */\r\n  _sceneShutdown() {\r\n    this.gameObjects.clear();\r\n  }\r\n\r\n  /**\r\n   * Called when the scene is destroyed.\r\n   * @private\r\n   * @since 1.0.0\r\n   */\r\n  _sceneDestroy() {\r\n    const events = this.systems.events;\r\n\r\n    events.off('update', this._scenePostUpdate, this);\r\n    events.off('shutdown', this._sceneShutdown, this);\r\n    events.off('destroy', this._sceneDestroy, this);\r\n\r\n    this.gameObjects = null;\r\n    this.scene = null;\r\n    this.systems = null;\r\n  }\r\n\r\n  /**\r\n   * Add an object to the global update loop of the game.\r\n   * @param {TDLib.Sprites.TDLSprite} obj - The object to add to the update loop.\r\n   * @since 1.0.0\r\n   */\r\n  add(obj) {\r\n    obj.once('destroy', this.remove, this);\r\n    this.gameObjects.set(obj);\r\n  }\r\n\r\n  /**\r\n   * Add multiple objects to the global update loop of the game.\r\n   * @param {TDLib.Sprites.TDLSprite[]} obj - The objects to add to the update loop.\r\n   * @since 1.0.0\r\n   */\r\n  addMultiple(objs) {\r\n    objs.forEach(this.add, this);\r\n  }\r\n\r\n  /**\r\n   * Remove an object from the global update loop of the game.\r\n   * @param {TDLib.Sprites.TDLSprite} obj - The object to remove from the update loop.\r\n   * @since 1.0.0\r\n   */\r\n  remove(obj) {\r\n    obj.off('destroy', this.remove, this);\r\n    this.gameObjects.delete(obj);\r\n  }\r\n}\r\n","import Actions from '../../sprites/actions';\nimport Behaviours from '../../sprites/behaviours';\n\n/**\n * Class representing the CursorSystem, able to select the correct graphic for the cursor and to handle pointer events.\n * @extends Phaser.Plugins.BasePlugin\n * @memberof TDLib.Plugins.GlobalPlugins\n * @since 1.0.0\n */\nexport default class CursorSystem extends Phaser.Plugins.BasePlugin {\n  /**\n   * Create a new CursorSystem.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the plugin manager.\n   */\n  constructor(pluginManager) {\n    super(pluginManager);\n\n    /**\n     * The scene containing the cursor.\n     * @type {CursorSystem.CURSOR_SCENE}\n     * @since 1.0.0\n     */\n    this.cursorScene;\n\n    /**\n     * The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n     * @type {Phaser.Scenes.SceneManager}\n     * @since 1.0.0\n     */\n    this.sceneManager;\n\n    /**\n     * Save the last sprite who called the function setCursor().\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.lastTarget;\n  }\n\n  /**\n   * It's a Phaser.Scene representing the scene containing the cursor which will be put on the rooms level.\n   * @typedef {TDLib.Plugins.GlobalPlugins.CursorSystem.CursorScene}\n   * @extends {Phaser.Scenes.Scene}\n   * @since 1.0.0\n   */\n  static get CursorScene() {\n    return class CursorScene extends Phaser.Scene {\n      constructor() {\n        super(CursorSystem.CURSOR_SCENE_KEY);\n\n        this.cursor;\n      }\n\n      preload() {\n        this.load.image(CursorSystem.EXAMINABLE_CURSOR, 'assets/Cursors/CursorExamine.png');\n        this.load.image(CursorSystem.HOLD_CURSOR, 'assets/Cursors/CursorHold.png');\n        this.load.image(CursorSystem.INTERACTIVE_CURSOR, 'assets/Cursors/CursorInteract.png');\n        this.load.image(CursorSystem.DEFAULT_CURSOR, 'assets/Cursors/CursorMove.png');\n        this.load.image(CursorSystem.TALKABLE_CURSOR, 'assets/Cursors/CursorTalk.png');\n        this.load.image(CursorSystem.CHOICE_CURSOR, 'assets/Cursors/CursorChoice.png');\n        this.load.image(CursorSystem.CHOICE_PRESSED_CURSOR, 'assets/Cursors/CursorChoicePressed.png');\n      }\n\n      create() {\n        this.input.setDefaultCursor('none');\n        this.cursor = this.add.image(0, 0, CursorSystem.DEFAULT_CURSOR).setOrigin(0.4, 0.33).setDepth(100000);\n      }\n\n      update() {\n        this.cursor.setPosition(this.input.activePointer.x, this.input.activePointer.y);\n      }\n    };\n  }\n\n  /**\n   * The key of the scene containing the cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get CURSOR_SCENE_KEY() {\n    return 'CursorScene';\n  }\n\n  /**\n   * The key of the inert cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get DEFAULT_CURSOR() {\n    return 'cursorMove';\n  }\n\n  /**\n   * The key of the examine cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get EXAMINABLE_CURSOR() {\n    return 'cursorExamine';\n  }\n\n  /**\n   * The key of the interact cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get INTERACTIVE_CURSOR() {\n    return 'cursorInteract';\n  }\n\n  /**\n   * The key of the hold cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get HOLD_CURSOR() {\n    return 'cursorHold';\n  }\n\n  /**\n   * The key of the talk cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get TALKABLE_CURSOR() {\n    return 'cursorTalk';\n  }\n\n  /**\n   * The key of the choice cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get CHOICE_CURSOR() {\n    return 'cursorChoice';\n  }\n\n  /**\n   * The key of the choice pressed cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get CHOICE_PRESSED_CURSOR() {\n    return 'cursorChoicePressed';\n  }\n\n  /**\n   * Configure the cursor manager.\n   * @param {Phaser.Scenes.SceneManager} sceneManager - The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n   * @since 1.0.0\n   */\n  configure(sceneManager) {\n    this.sceneManager = sceneManager;\n    this.cursorScene = this.sceneManager.add(CursorSystem.CURSOR_SCENE_KEY, CursorSystem.CursorScene, true);\n  }\n\n  /**\n   * Handle the pointer down event.\n   * @param {TDLib.Sprites.Characters.TDLCharacter} player - The current player.\n   * @since 1.0.0\n   */\n  pointerDown(player, pointer = null) {\n    if (!player.isBlocked) {\n      switch (this.cursorScene.cursor.texture.key) {\n        case CursorSystem.DEFAULT_CURSOR: {\n          if (typeof player.room.input.activePointer.camera !== 'undefined') player.actions.add(Actions.WalkTo, { target: { x: player.room.input.activePointer.worldX } });\n        }\n          break;\n\n        case CursorSystem.EXAMINABLE_CURSOR: {\n          this.lastTarget.behaviours.observe.abort();\n          player.actions.add(Actions.Examine, { target: this.lastTarget });\n        }\n          break;\n\n        case CursorSystem.INTERACTIVE_CURSOR: {\n          this.lastTarget.behaviours.observe.abort();\n          player.actions.add(Actions.Interact, { target: this.lastTarget });\n        }\n          break;\n\n        case CursorSystem.TALKABLE_CURSOR: {\n          player.actions.add(Actions.TalkTo, { target: this.lastTarget });\n        }\n          break;\n      }\n    }\n  }\n\n  /**\n   * Set the correct cursor for the target selected.\n   * @param {Object} target - The target of the pointer.sceneManager\n   * @param {TDLib.Components.ActionComponent} target.behaviours - The SpriteBehaviourComponent of the target.\n   * @param {string} [target.behaviours.type=TDLib.Sprites.Behaviours.INERT] - The type of the sprite behaviour for this target.\n   * @since 1.0.0\n   */\n  setCursor(target = { behaviours: { type: Behaviours.INERT }, room: {} }) {\n    if ('room' in target && target !== target.room.player) {\n      switch (target.behaviours.type) {\n        case Behaviours.INERT: {\n          this.cursorScene.cursor.setTexture(CursorSystem.DEFAULT_CURSOR).setOrigin(0.4, 0.33);\n        }\n          break;\n\n        case Behaviours.EXAMINABLE: {\n          this.cursorScene.cursor.setTexture(CursorSystem.EXAMINABLE_CURSOR).setOrigin(0.33, 0.29);\n        }\n          break;\n\n        case Behaviours.INTERACTIVE: {\n          this.cursorScene.cursor.setTexture(CursorSystem.INTERACTIVE_CURSOR).setOrigin(0.4, 0.33);\n        }\n          break;\n\n        case Behaviours.TALKABLE: {\n          this.cursorScene.cursor.setTexture(CursorSystem.TALKABLE_CURSOR);\n        }\n          break;\n      }\n\n      this.lastTarget = target;\n    }\n  }\n\n  /**\n   * Show the cursor.\n   * @since 1.0.0\n   */\n  showCursor() {\n    this.cursorScene.cursor.setVisible(true);\n  }\n\n  /**\n   * Hide the cursor.\n   * @since 1.0.0\n   */\n  hideCursor() {\n    this.cursorScene.cursor.setVisible(false);\n  }\n}\n","/**\n * Class representing the manager of the rooms\n * @extends Phaser.Plugins.BasePlugin\n * @memberof TDLib.Plugins.GlobalPlugins\n */\nexport default class RoomSystem extends Phaser.Plugins.BasePlugin {\n  /**\n   * Create a new RoomSystem.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the plugin manager.\n   */\n  constructor(pluginManager) {\n    super(pluginManager);\n\n    /**\n     * The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n     * @type {Phaser.Scenes.SceneManager}\n     */\n    this.sceneManager = {};\n  }\n\n  /**\n   * Add (and start) a new room to the RoomSystem.\n   * @param {TDLib.Rooms.Room} room - The class of the new room to add.\n   * @param {boolean} [autoStart=true] - Specify if the room has to start.\n   */\n  add(room, autoStart = true) {\n    console.log('Added room:', room.name);\n    this.sceneManager.add(room.name, room, autoStart);\n  }\n\n  /**\n   * Configure the RoomSystem.\n   * @param {Phaser.Scenes.SceneManager} sceneManager - The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n   */\n  configure(sceneManager) {\n    this.sceneManager = sceneManager;\n  }\n}\n","const Rooms = {\n  Room: require('./Room')\n};\n\nmodule.exports = Rooms;\n","import Settings from '../boot/Settings';\nimport Utils from './Utils';\n\n/**\n * The rooms namespace.\n * @namespace TDLib.Rooms\n * @since 1.0.0\n */\n\n/**\n * Class representing a TDLRoom.\n * @extends Phaser.Scene\n * @memberof TDLib.Rooms\n * @since 1.0.0\n */\n// eslint-disable-next-line no-undef\nexport default class Room extends Phaser.Scene {\n  /**\n   * Create a new TDLRoom.\n   * @param {string} sceneKey - The unique key to identify the room.\n   * @param {Object} rawAssets - The raw object of assets needed by the room. (Ripensarlo ?)\n   */\n  constructor(sceneKey, rawAssets) {\n    super(sceneKey);\n\n    /**\n       * This object contains an array with all the assets needed by the room.\n       * @type {Object}\n       * @since 1.0.0\n       */\n    this.assets = { raw: rawAssets, array: [] };\n\n    /**\n       * The average contribute of light sources to the room.\n       * @type {number}\n       * @since 1.0.0\n       */\n    this.averageLightsContribute;\n\n    /**\n       * The Settings cursor manager.\n       * @type {TDLib.Plugins.SettingsPlugins.CursorManager}\n       * @since 1.0.0\n       */\n    this.cursors;\n\n    /**\n       * The layer manager of the room.\n       * @type {TDLib.Plugins.RoomPlugins.LayerManager}\n       * @since 1.0.0\n       */\n    this.layers;\n\n    /**\n       * The tilemap of the room.\n       * @type {Phaser.Tilemaps.Tilemap}\n       * @since 1.0.0\n       */\n    this.map;\n\n    /**\n       * The name of the room.\n       * @type {string}\n       * @since 1.0.0\n       */\n    this.name = this.constructor.name;\n\n    /**\n       * The instance of the TDLCharacter designated as player for the room.\n       * @type {TDLib.Sprites.Characters.TDLCharacter}\n       * @since 1.0.0\n       */\n    this.player;\n\n    /**\n       * The Settings room manager.\n       * @type {TDLib.Plugins.SettingsPlugins.RoomManager}\n       * @since 1.0.0\n       */\n    this.rooms;\n  }\n\n  /**\n   * The preload function is executed once and load all the assets needed by the room.\n   * @since 1.0.0\n   */\n  preload() {\n    this._scrapeAssets();\n    this.assets.array.forEach(obj => {\n      if ('nPath' in obj) {\n        this.load[obj.type](obj.key, [obj.path, obj.nPath]);\n      } else if ('bPath' in obj) {\n        this.load[obj.type](obj.key, obj.path);\n        this.load[obj.type](obj.key + '_b', obj.bPath);\n      } else {\n        this.load[obj.type](obj.key, obj.path);\n      }\n    });\n\n    // Loading Border Camera Masks\n    this.load.image('top-border-mask-camera', 'assets/Masks/topMaskCamera.png');\n    this.load.image('bottom-border-mask-camera', 'assets/Masks/bottomMaskCamera.png');\n    this.load.image('left-border-mask-camera', 'assets/Masks/leftMaskCamera.png');\n    this.load.image('right-border-mask-camera', 'assets/Masks/rightMaskCamera.png');\n  }\n\n  /**\n   * Scrape the object of raw assets.\n   * @private\n   * @since 1.0.0\n   */\n  _scrapeAssets() {\n    for (let type in this.assets.raw) {\n      Utils.scrapeComplexObjKey(\n        this.assets.raw[type],\n        { type: type },\n        'path',\n        (obj, params) => {\n          obj['type'] = params.type;\n          obj['key'] = Utils.findFileNameFromPath(obj.path);\n          this.assets.array.push(obj);\n        }\n      );\n    }\n  }\n\n  /**\n   * The create function is executed once, when the room is initialized.\n   * @param {TDLib.Sprites.Characters.TDLCharacter} player - The instance of the player for the room.\n   * @since 1.0.0\n   */\n  create(player) {\n    this.player = player.setName('player');\n    this.lights.enable(); // Boot Phaser's LightManager\n    // this.scene.bringToTop(CursorManager.CURSOR_SCENE_KEY); // Add the cursor to the Room\n    this.scene.bringToTop('CursorScene');\n\n    this._setCameraViewport();\n    this._createRoom();\n    this._createSprites();\n    this._applyBorderMasks();\n    this.layers.setLayersDepth();\n\n    // Camera bounds, anche il wallsLayer\n    this.cameras.main.setBounds(0, 0, this.layers.wallsLayer.width, this.layers.wallsLayer.height);\n    this.cameras.main.startFollow(this.player);\n    this.cameras.main.setRoundPixels(true);\n    // Physics Bounds, sarà solo lo spazio di gioco (togliamo il wall layer tutto attorno!!)\n    this.physics.world.setBounds(\n      Settings.TILE_SIZE, Settings.TILE_SIZE, this.layers.wallsLayer.width - 2 * Settings.TILE_SIZE,\n      this.layers.wallsLayer.height - 2 * Settings.TILE_SIZE\n    );\n  }\n\n  /**\n   * Set the correct camera viewport.\n   * @private\n   * @since 1.0.0\n   */\n  _setCameraViewport() {\n    if (Settings.DEVICE === 'MOBILE') {\n      this.cameras.main.setPosition(\n        (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_WIDTH_IN_TILES_MOBILE) * Settings.TILE_SIZE,\n        (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE) * Settings.TILE_SIZE\n      );\n      this.cameras.main.setSize(\n        Settings.SCREEN_PROPS.calculatedWidth - 2 * (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_WIDTH_IN_TILES_MOBILE) * Settings.TILE_SIZE,\n        Settings.ROOM_HEIGHT_IN_TILE * Settings.TILE_SIZE\n      );\n    } else {\n      this.cameras.main.setPosition(\n        Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE,\n        Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE\n      );\n      this.cameras.main.setSize(\n        Settings.SCREEN_PROPS.calculatedWidth - 2 * Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE,\n        Settings.ROOM_HEIGHT_IN_TILE * Settings.TILE_SIZE\n      );\n    }\n  }\n\n  /**\n   * Create room tilemap and layers.\n   * @private\n   * @since 1.0.0\n   */\n  _createRoom() {\n    this.map = this.make.tilemap({\n      key: Utils.findFileNameFromPath(this.assets.raw.tilemapTiledJSON.path),\n      tileWidth: Settings.TILE_SIZE,\n      tileHeight: Settings.TILE_SIZE\n    });\n\n    this.layers.backgroundLayer = this.map.createDynamicLayer(\n      'backgroundLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.background.path)),\n      0, 0\n    );// .setPipeline('Light2D');\n    this.layers.wallsLayer = this.map.createDynamicLayer(\n      'wallsLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.walls.path)),\n      0, 0\n    );\n    this.layers.wallsMaskLayer = this.map.createDynamicLayer(\n      'wallsMaskLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.walls.bPath)),\n      0, 0\n    );\n  }\n\n  /**\n   * Create all the objects present in Tiled JSON map.\n   * @private\n   * @since 1.0.0\n   */\n  _createSprites() {\n    let _this = this;\n\n    this.map.objects.forEach(layer => {\n      layer.objects.forEach(element => {\n        _this;\n        // eslint-disable-next-line no-eval\n        this[element.name] = eval('new ' + element.type + '(_this,' + (element.x + element.width / 2) + ', ' + (element.y - element.height / 2) + ');');\n        this[element.name].setName(element.name);\n      });\n    });\n  }\n\n  /**\n   * Apply the four border masks to the camera.\n   * @private\n   * @since 1.0.0\n   */\n  _applyBorderMasks() {\n    this.layers.borderMasksLayer.create(0,\n      0,\n      'top-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(0,\n      0,\n      'left-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(\n      this.cameras.main.width - Settings.TILE_SIZE,\n      0,\n      'right-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(\n      0,\n      this.cameras.main.height - Settings.TILE_SIZE,\n      'bottom-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n  }\n\n  /**\n   * The update function is executed at every cycle of the game loop.\n   * @since 1.0.0\n   */\n  update() {\n    this._updateMasksByLightDiffusion();\n\n    // Updates all Actions in  every ActionComponent (if present)\n    this.children.list.forEach(element => {\n      if ('actions' in element) {\n        element.actions._update();\n      }\n    });\n  }\n\n  /**\n   * Update the border masks alpha according to the average diffused light in the room.\n   * @private\n   * @since 1.0.0\n   */\n  _updateMasksByLightDiffusion() {\n    this.averageLightsContribute = this.lightSources.calculateAverageLightsContribute();\n    this.layers.wallsMaskLayer.setAlpha(1 - this.averageLightsContribute);\n  }\n}\n\n","const Utils = {\n  scrapeComplexObjKey: (obj, params, searchKey, callback) => {\n    if (Array.isArray(obj)) {\n      for (let i = 0; i < obj.length; i++) {\n        Utils.scrapeComplexObjKey(obj[i], params, searchKey, callback);\n      }\n    } else if (obj !== null && typeof obj === 'object') {\n      if (searchKey in obj) {\n        callback(obj, params);\n      } else {\n        for (let prop in obj) {\n          Utils.scrapeComplexObjKey(obj[prop], params, searchKey, callback);\n        }\n      }\n    }\n  },\n  findFileNameFromPath: (path) => {\n    let nameFirstCharachterPosition = path.lastIndexOf('/') + 1;\n\n    let nameLastCharachterPosition = path.lastIndexOf('.');\n\n    if (nameFirstCharachterPosition === -1) nameFirstCharachterPosition = 0;\n    if (nameLastCharachterPosition === -1) return -1;\n    let filename = path.slice(nameFirstCharachterPosition, nameLastCharachterPosition);\n\n    return filename;\n  }\n};\n\nmodule.exports = Utils;\n","const Sprites = {\n  Actions: require('./actions'),\n  Behaviours: require('./behaviours'),\n  Characters: require('./characters'),\n  Effects: require('./effects'),\n  InventoryItems: require('./inventory-items'),\n  WorldItems: require('./world-items'),\n  Sprite: require('./Sprite')\n};\n\nmodule.exports = Sprites;\n","const Characters = {\n  NPCharacter: require('./npc-characters/NPCharacter'),\n  Player: require('./players/Player')\n};\n\nmodule.exports = Characters;\n","import Character from '../Character';\n\nexport default class NPCharacter extends Character {\n  constructor(room, x, y, texture, layer) {\n    super(room, x, y, texture, layer);\n  }\n}\n","import Character from '../Character';\n\nexport default class Player extends Character {\n  constructor(room, x, y, texture) {\n    super(room, x, y, texture, 'playerLayer');\n\n    this.isBlocked = false;\n  }\n\n  create() {\n    super.create();\n\n    this.room.input.on('pointerdown', function (pointer) {\n      this.room.cursors.pointerDown(this);\n    }, this);\n  }\n}\n","const InventoryItems = {\n  InventoryItem: require('./InventoryItem')\n};\n\nmodule.exports = InventoryItems;\n","import Sprite from '../Sprite';\n\n/**\n * The inventory items namespace.\n * @namespace TDLib.Sprites.InventoryItems\n * @since 1.0.0\n */\n\n/**\n * Class representing an InentoryItem.\n * @extends TDLib.Sprites.Sprite\n * @memberof TDLib.Sprites.InventoryItems\n * @since 1.0.0\n */\n\nexport default class InentoryItem extends Sprite {\n  /**\n   * Create a new InvetoryItem.\n   * @param {Room} room - The room where the item is created.\n   * @param {number} x - The x coordinate of the item.\n   * @param {number} y - The y coordinate of the item.\n   * @param {string} texture - The item's graphic.\n   * @param {string} layer - The item's layer.\n   */\n  constructor(room, x, y, texture, layer) {\n    super(...arguments, false);\n  }\n\n  create() {\n    super.create();\n  }\n}\n","const WorldItems = {\n  WorldItem: require('./WorldItem'),\n  LightSources: require('./light-sources'),\n  RoomFurnitures: require('./room-furnitures'),\n  WallFurnitures: require('./wall-furnitures')\n};\n\nmodule.exports = WorldItems;\n","const LightSources = {\n  LightSource: require('./LightSource')\n};\n\nmodule.exports = LightSources;\n","const RoomFurnitures = {\n  RoomFurniture: require('./RoomFurniture')\n};\n\nmodule.exports = RoomFurnitures;\n","import WorldItem from '../WorldItem';\n\n/**\n * The room furnitures namespace.\n * @namespace TDLib.Sprites.Objects.WorldObjects.RoomFurnitures\n * @since 1.0.0\n */\n\n/**\n * Class representing a RoomFurniture.\n * @extends TDLib.Sprites.Objects.WorldObjects.WorldObject\n * @memberof TDLib.Sprites.Objects.WorldObjects.RoomFurnitures\n * @since 1.0.0\n */\nexport default class RoomFurniture extends WorldItem {\n  /**\n   * Create a RoomFurniture.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   */\n  constructor(room, x, y, texture, behaviourType, pixelPerfect, observeText, examineOrInteractText, blockExamineText, noLightObserveText, noLightExamineOrInteractText, examineOrInteractOffsetX, examineOrInteractThresholdRadius, minLightLevelToExamineOrInteract, minLightLevelToObserve) {\n    super(\n      room,\n      x, y,\n      texture,\n      'roomFurnitureLayer',\n      true,\n      behaviourType,\n      pixelPerfect,\n      observeText,\n      examineOrInteractText,\n      blockExamineText,\n      noLightObserveText,\n      noLightExamineOrInteractText,\n      examineOrInteractOffsetX,\n      examineOrInteractThresholdRadius,\n      minLightLevelToExamineOrInteract,\n      minLightLevelToObserve\n    );\n  }\n}\n","const WallFurnitures = {\n  WallFurniture: require('./WallFurniture')\n};\n\nmodule.exports = WallFurnitures;\n","import WorldItem from '../WorldItem';\n\n/**\n * The wall furnitures namespace.\n * @namespace TDLib.Sprites.Objects.WorldObjects.WallFurnitures\n * @since 1.0.0\n */\n\n/**\n * Class representing a WallFurniture.\n * @extends TDLib.Sprites.Objects.WorldObjects.WorldObject\n * @memberof TDLib.Sprites.Objects.WorldObjects.WallFurnitures\n * @since 1.0.0\n */\nexport default class WallFurniture extends WorldItem {\n  /**\n   * Create a WallFurniture.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   */\n  constructor(room, x, y, texture, behaviourType, pixelPerfect, observeText, examineOrInteractText, blockExamineText, noLightObserveText, noLightExamineOrInteractText, examineOrInteractOffsetX, examineOrInteractThresholdRadius, minLightLevelToExamineOrInteract, minLightLevelToObserve) {\n    super(\n      room,\n      x, y,\n      texture,\n      'wallFurnitureLayer',\n      true,\n      behaviourType,\n      pixelPerfect,\n      observeText,\n      examineOrInteractText,\n      blockExamineText,\n      noLightObserveText,\n      noLightExamineOrInteractText,\n      examineOrInteractOffsetX,\n      examineOrInteractThresholdRadius,\n      minLightLevelToExamineOrInteract,\n      minLightLevelToObserve\n    );\n\n    this.setGravityY(0);\n  }\n}\n"],"sourceRoot":""}