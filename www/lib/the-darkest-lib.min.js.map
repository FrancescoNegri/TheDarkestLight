{"version":3,"sources":["webpack://TDLib/webpack/universalModuleDefinition","webpack://TDLib/webpack/bootstrap","webpack://TDLib/./src/sprites/actions/Action.js","webpack://TDLib/./src/sprites/behaviours/index.js","webpack://TDLib/./src/const.js","webpack://TDLib/./src/boot/Settings.js","webpack://TDLib/./src/components/Component.js","webpack://TDLib/./src/sprites/actions/index.js","webpack://TDLib/./src/sprites/actions/face-to/FaceTo.js","webpack://TDLib/./src/sprites/behaviours/Behaviour.js","webpack://TDLib/./src/sprites/world-items/WorldItem.js","webpack://TDLib/./src/sprites/Sprite.js","webpack://TDLib/./src/managers/Manager.js","webpack://TDLib/./src/sprites/actions/walk-to/WalkTo.js","webpack://TDLib/./src/components/EffectComponent.js","webpack://TDLib/./src/components/index.js","webpack://TDLib/./src/components/BehaviourComponent.js","webpack://TDLib/./src/sprites/effects/index.js","webpack://TDLib/./src/sprites/effects/Effect.js","webpack://TDLib/./src/sprites/effects/light-effects/LightEffect.js","webpack://TDLib/./src/sprites/world-items/light-sources/LightSource.js","webpack://TDLib/./src/utils/index.js","webpack://TDLib/./src/managers/index.js","webpack://TDLib/./src/systems/index.js","webpack://TDLib/./src/sprites/characters/Character.js","webpack://TDLib/./src/TDLib.js","webpack://TDLib/(webpack)/buildin/global.js","webpack://TDLib/./src/components/ActionComponent.js","webpack://TDLib/./src/sprites/actions/examine/Examine.js","webpack://TDLib/./src/sprites/actions/face-to/Settings.js","webpack://TDLib/./src/sprites/actions/walk-to/Settings.js","webpack://TDLib/./src/sprites/actions/idle/Idle.js","webpack://TDLib/./src/sprites/actions/interact/Interact.js","webpack://TDLib/./src/sprites/actions/observe/Observe.js","webpack://TDLib/./src/sprites/actions/run-to/RunTo.js","webpack://TDLib/./src/sprites/actions/run-to/Settings.js","webpack://TDLib/./src/sprites/behaviours/const.js","webpack://TDLib/./src/sprites/behaviours/examinable/Examinable.js","webpack://TDLib/./src/sprites/behaviours/interactive/Interactive.js","webpack://TDLib/./src/sprites/behaviours/observable/Observable.js","webpack://TDLib/./src/sprites/behaviours/observable/Settings.js","webpack://TDLib/./src/sprites/behaviours/inventory/Inventory.js","webpack://TDLib/./src/sprites/effects/light-effects/index.js","webpack://TDLib/./src/sprites/effects/light-effects/HardFlickering.js","webpack://TDLib/./src/boot/Game.js","webpack://TDLib/./src/boot/DebugHeader.js","webpack://TDLib/./src/utils/Utils.js","webpack://TDLib/./src/managers/layers/LayerManager.js","webpack://TDLib/./src/managers/layers/Settings.js","webpack://TDLib/./src/managers/light-sources/LightSourceManager.js","webpack://TDLib/./src/managers/updates/UpdateManager.js","webpack://TDLib/./src/systems/cursors/CursorSystem.js","webpack://TDLib/./src/systems/rooms/RoomSystem.js","webpack://TDLib/./src/rooms/index.js","webpack://TDLib/./src/rooms/Room.js","webpack://TDLib/./src/rooms/Utils.js","webpack://TDLib/./src/sprites/index.js","webpack://TDLib/./src/sprites/characters/index.js","webpack://TDLib/./src/sprites/characters/npc-characters/NPCharacter.js","webpack://TDLib/./src/sprites/characters/players/Player.js","webpack://TDLib/./src/sprites/inventory-items/index.js","webpack://TDLib/./src/sprites/inventory-items/InventoryItem.js","webpack://TDLib/./src/sprites/world-items/index.js","webpack://TDLib/./src/sprites/world-items/light-sources/index.js","webpack://TDLib/./src/sprites/world-items/room-furnitures/index.js","webpack://TDLib/./src/sprites/world-items/room-furnitures/RoomFurniture.js","webpack://TDLib/./src/sprites/world-items/wall-furnitures/index.js","webpack://TDLib/./src/sprites/world-items/wall-furnitures/WallFurniture.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Action","invoker","actor","config","arguments","length","undefined","_classCallCheck","this","constructor","target","_queue","isPaused","actions","_this","Array","isArray","forEach","action","push","abort","start","finish","shift","remove","pause","resume","update","BaseAction","startCallback","finishCallback","updateCallback","resumeCallback","pauseCallback","_createClass","_const","Behaviours","Behaviour","require","Examinable","Interactive","Observable","Talkable","Inventory","Phaser","Utils","Objects","Extend","default","CONST","VERSION","PHASER_VERSION","LEFT","RIGHT","GAME","TILE_SIZE","ROOM_HEIGHT_IN_TILE","INVENTORY_WIDTH_IN_TILES_MOBILE","INVENTORY_WIDTH_IN_TILES_DESKTOP","INVENTORY_HEIGHT_IN_TILES_MOBILE","INVENTORY_HEIGHT_IN_TILES_DESKTOP","ROOM_FRAME_IN_TILES_DESKTOP","ROOM_FRAME_IN_TILES_MOBILE","SCREEN_PROPS","DEVICE","Component","gameObject","Actions","Examine","FaceTo","Idle","Interact","Observe","RunTo","WalkTo","_Action2","_interopRequireDefault","_Settings","_possibleConstructorReturn","__proto__","getPrototypeOf","apply","addActions","Math","abs","x","MICRO_MOVEMENT_RADIUS","facing","setFlipX","_Action","component","cursors","room","add","pixelPerfect","setInteractive","alphaTolerance","draggable","console","log","lightSources","calculateLightsContribuitePoint","_Sprite2","WorldItem","y","texture","layer","hasBody","behaviourType","observeText","examineOrInteractText","blockExamineText","noLightObserveText","noLightExamineOrInteractText","examineOrInteractOffsetX","examineOrInteractThresholdRadius","minLightLevelToExamineOrInteract","minLightLevelToObserve","_get","setPipeline","_behaviours","_BehaviourComponent","Sprite","INERT","DEFAULT_OBSERVE_TEXT","DEFAULT_EXAMINE_OR_INTERACT_TEXT","DEFAULT_NO_LIGHT_OBSERVE_TEXT","DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT","DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT","DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE","floor","random","type","behaviour","existing","updates","physics","setCollideWorldBounds","setGravityY","layers","setLayersDepth","warn","Physics","Arcade","width","height","offsetX","offsetY","input","hitArea","setSize","setPosition","Manager","pluginManager","Plugins","ScenePlugin","_FaceTo","anims","play","body","setVelocity","WALK_VELOCITY","velocity","_Component2","_effects","_LightSource","EffectComponent","previousEffects","currentEffect","stop","LightEffects","Components","ActionComponent","BehaviourComponent","player","_addBehaviours","EXAMINABLE","INTERACTIVE","observe","examine","interact","Effects","Effect","_EffectComponent","callback","_Effect2","LightEffect","contributeFactor","_this2","stopped","_this3","_WorldItem2","LightSource","graphicLightConfig","diffusedLightConfig","offset","allowedBehaviours","isOn","initialConfig","graphicLight","diffusedLight","turnOn","effects","lights","addLight","radius","setIntensity","intensity","diffusedLights","graphicLights","diffusedLightindex","indexOf","splice","removeLight","graphicLightindex","turnOff","getScreenProps","Managers","LayerManager","LightSourceManager","UpdateManager","Systems","CursorSystem","RoomSystem","_components","Character","_ref","concat","slice","TDLib","Game","Rooms","Sprites","global","g","Function","e","_actions","defaultAction","DEFAULT_MODE","newAction","QUEUE_MODE","PAUSE_MODE","unshift","_WalkTo","getAction","RUN_VELOCITY","TALKABLE","INVENTORY","_Behaviour2","checkLight","_timer","on","pointer","setCursor","time","addEvent","delay","DEFAULT_MIN_TIME_TO_OBSERVE","isBlocked","callbackScope","HardFlickering","_LightEffect2","minTime","maxTime","finalState","setTimer","repeat","_DebugHeader","_utils","_managers","_systems","_setScreenConfig","_setPhysicsConfig","_setPlugins","_setBoot","_setHeaderProps","_finalizeConfig","calculatedWidth","calculatedHeight","zoom","calculatedZoom","autoResize","backgroundColor","pixelArt","arcade","debug","gravity","plugins","plugin","mapping","scene","Boot","banner","WEBGL","maxLights","parent","disableContextMenu","Settings","game","bannerBackgroundColor","bannerTextColor","hidePhaser","renderType","audioType","audioConfig","audio","deviceAudio","device","webAudio","disableWebAudio","noAudio","audioData","browser","ie","lastColor","args","color","gameTitle","gameVersion","gameURL","returnValue","availHeight","innerHeight","availWidth","innerWidth","screen","ceil","_Manager2","layerSize","strartingDepth","startingDepth","backgroundLayer","group","rearDoorsLayer","wallFurnitureLayer","roomFurnitureLayer","sideDoorsLayer","npcLayer","playerLayer","cielingObjectsLayer","frontDoorsLayer","wallsLayer","wallsMaskLayer","overallDarknessLayer","borderMasksLayer","setDepth","source","getChildren","lightSource","singleLightContributeAccumulator","light","singleLightContribute","singleLightIntensityAccumulator","averageLightsContribute","events","systems","gameObjects","Structs","Set","_sceneUpdate","_sceneShutdown","once","_sceneDestroy","delta","iterateLocal","clear","off","_scenePostUpdate","obj","set","objs","delete","cursorScene","sceneManager","lastTarget","BasePlugin","CURSOR_SCENE_KEY","CursorScene","cursor","DEFAULT_CURSOR","activePointer","camera","worldX","EXAMINABLE_CURSOR","INTERACTIVE_CURSOR","TALKABLE_CURSOR","TalkTo","setTexture","setOrigin","setVisible","_Phaser$Scene","_inherits","Scene","load","image","HOLD_CURSOR","CHOICE_CURSOR","CHOICE_PRESSED_CURSOR","setDefaultCursor","autoStart","Room","_Utils","sceneKey","rawAssets","assets","raw","array","map","rooms","_scrapeAssets","path","nPath","bPath","_this4","scrapeComplexObjKey","params","findFileNameFromPath","setName","enable","bringToTop","_setCameraViewport","_createRoom","_createSprites","_applyBorderMasks","cameras","main","setBounds","startFollow","setRoundPixels","world","make","tilemap","tilemapTiledJSON","tileWidth","tileHeight","createDynamicLayer","addTilesetImage","tiles","background","walls","_this5","objects","element","eval","setScrollFactor","_updateMasksByLightDiffusion","children","list","calculateAverageLightsContribute","setAlpha","searchKey","_typeof","prop","nameFirstCharachterPosition","lastIndexOf","nameLastCharachterPosition","Characters","InventoryItems","WorldItems","NPCharacter","Player","_Character2","pointerDown","InventoryItem","InentoryItem","LightSources","RoomFurnitures","WallFurnitures","RoomFurniture","WallFurniture"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,WAAAH,GACA,iBAAAC,QACAA,QAAA,MAAAD,IAEAD,EAAA,MAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAT,QAAA,IAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,saC7EqBC,aASnB,SAAAA,EAAYC,EAASC,GAAoB,IAAbC,EAAaC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAAIG,EAAAC,KAAAR,GAMvCQ,KAAKP,QAAUA,EAOfO,KAAKjC,KAAOiC,KAAKC,YAAYlC,KAO7BiC,KAAKN,MAAQA,EAObM,KAAKE,OAASP,EAAOO,OAOrBF,KAAKL,OAASA,EAQdK,KAAKG,OAAS,GAOdH,KAAKI,UAAW,+CAQPC,GAAS,IAAAC,EAAAN,KACdO,MAAMC,QAAQH,GAChBA,EAAQI,QAAQ,SAAAC,GACdJ,EAAKH,OAAOQ,KAAKD,KAEdV,KAAKG,OAAOQ,KAAKN,mCAgEpBL,KAAKG,OAAON,OAAS,GAAGG,KAAKG,OAAO,GAAGS,wCASvCZ,KAAKG,OAAON,OAAS,GAAGG,KAAKG,OAAO,GAAGU,yCASvCb,KAAKG,OAAON,OAAS,GAAGG,KAAKG,OAAO,GAAGW,0CASvCd,KAAKG,OAAON,OAAS,GAAGG,KAAKG,OAAOY,QAEpCf,KAAKG,OAAON,QAAU,EAAGG,KAAKP,QAAQuB,SACrChB,KAAKG,OAAO,GAAGU,wCAShBb,KAAKG,OAAON,OAAS,IACvBG,KAAKG,OAAO,GAAGc,QACfjB,KAAKI,UAAW,oCAUdJ,KAAKG,OAAON,OAAS,IACvBG,KAAKI,UAAW,EAChBJ,KAAKG,OAAO,GAAGe,2CAUblB,KAAKG,OAAON,OAAS,GAAGG,KAAKG,OAAO,GAAGgB,8CA/G3C,kBACE,SAAAC,EAAY3B,EAAS4B,GAAuI,IAAxHC,EAAwH1B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvG,aAAW2B,EAA4F3B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA3E,aAAW4B,EAAgE5B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA/CyB,EAAeI,EAAgC7B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAhB0B,EAAgBvB,EAAAC,KAAAoB,GAC1JpB,KAAKP,QAAUA,EAEfO,KAAKqB,cAAgBA,EACrBrB,KAAKsB,eAAiBA,EACtBtB,KAAKuB,eAAiBA,EACtBvB,KAAKwB,eAAiBA,EACtBxB,KAAKyB,cAAgBA,EAErBzB,KAAKI,UAAW,EAVpB,OAAAsB,EAAAN,EAAA,EAAArC,IAAA,QAAAN,MAAA,WAcIuB,KAAKqB,kBAdT,CAAAtC,IAAA,SAAAN,MAAA,WAkBIuB,KAAKsB,iBACLtB,KAAKP,QAAQuB,WAnBjB,CAAAjC,IAAA,QAAAN,MAAA,WAuBIuB,KAAKsB,mBAvBT,CAAAvC,IAAA,SAAAN,MAAA,WA2BIuB,KAAKI,UAAW,EAChBJ,KAAKwB,mBA5BT,CAAAzC,IAAA,QAAAN,MAAA,WAgCIuB,KAAKyB,gBACLzB,KAAKI,UAAW,IAjCpB,CAAArB,IAAA,SAAAN,MAAA,WAqCIuB,KAAKuB,qBArCTH,EAAA,0EC5FJ,MAAAO,KAAArE,EAAA,iCAEA,IAAIsE,EAAa,CACfC,UAAWC,EAAQ,GACnBC,WAAYD,EAAQ,IACpBE,YAAaF,EAAQ,IACrBG,WAAYH,EAAQ,IACpBI,SAAUJ,EAAQ,IAClBK,UAAWL,EAAQ,KAGrBF,EAAaQ,OAAOC,MAAMC,QAAQC,QAAO,EAAOX,EAAnCD,EAAAa,SACbvF,EAAOD,QAAU4E,iBCZjB,IAAMa,EAAQ,CACZC,QAAS,QACTC,eAAgBP,OAAOM,QACvBE,KAAM,QACNC,MAAO,UAGT5F,EAAOD,QAAUyF,iBCOjBxF,EAAOD,QAdQ,CACb8F,KAAM,GACNC,UAAW,GACXC,oBAAqB,EACrBC,gCAAiC,KACjCC,iCAAkC,EAClCC,iCAAkC,EAClCC,kCAAmC,EACnCC,4BAA6B,GAC7BC,2BAA4B,IAC5BC,aAAc,GACdC,OAAQ,qHCGR,SAAAC,EAAYC,gGAAY3D,CAAAC,KAAAyD,GAMtBzD,KAAKjC,KAAOiC,KAAKC,YAAYlC,KAM7BiC,KAAK0D,WAAaA,wCC1BtB,IAAMC,EAAU,CACdnE,OAAQsC,EAAQ,GAChB8B,QAAS9B,EAAQ,IACjB+B,OAAQ/B,EAAQ,GAChBgC,KAAMhC,EAAQ,IACdiC,SAAUjC,EAAQ,IAClBkC,QAASlC,EAAQ,IACjBmC,MAAOnC,EAAQ,IACfoC,OAAQpC,EAAQ,KAGlB7E,EAAOD,QAAU2G,kGCXjB,IAAAQ,EAAAC,EAAA9G,EAAA,IACAqE,EAAAyC,EAAA9G,EAAA,IACA+G,EAAAD,EAAA9G,EAAA,4jBAEqBuG,cACnB,SAAAA,EAAYpE,EAASC,EAAOC,GAAQ,IAAAW,EAAA,mGAAAP,CAAAC,KAAA6D,IAClCvD,EAAAgE,EAAAtE,MAAA6D,EAAAU,WAAArG,OAAAsG,eAAAX,IAAAY,MAAAzE,KAASJ,aACJ8E,WACH,IAAIP,EAAA3B,QAAOpB,WAAXd,EAEE,WACMqE,KAAKC,IAAItE,EAAKZ,MAAMmF,EAAIvE,EAAKJ,OAAO2E,GAAKR,EAAA7B,QAASsC,wBAChDxE,EAAKZ,MAAMqF,SAAWpD,EAAAa,QAAMK,MAC1BvC,EAAKZ,MAAMmF,EAAIvE,EAAKJ,OAAO2E,IAC7BvE,EAAKZ,MAAMqF,OAASpD,EAAAa,QAAMI,KAC1BtC,EAAKZ,MAAMsF,UAAS,IAGb1E,EAAKZ,MAAMqF,SAAWpD,EAAAa,QAAMI,MACjCtC,EAAKZ,MAAMmF,EAAIvE,EAAKJ,OAAO2E,IAC7BvE,EAAKZ,MAAMqF,OAASpD,EAAAa,QAAMK,MAC1BvC,EAAKZ,MAAMsF,UAAS,KAK1B1E,EAAKQ,YArBuBR,8XCLtC,MAAA2E,KAAA3H,EAAA,0MAOqBuE,aAKnB,SAAAA,EAAYqD,gGAAWnF,CAAAC,KAAA6B,GAMrB7B,KAAKkF,UAAYA,EAOjBlF,KAAKmF,QAAUnF,KAAKkF,UAAUxB,WAAW0B,KAAKD,QAO9CnF,KAAK0D,WAAa1D,KAAKkF,UAAUxB,WAOjC1D,KAAKoF,KAAOpF,KAAKkF,UAAUxB,WAAW0B,KAEtCpF,KAAKqF,2DAQ+B,OAAhCrF,KAAKkF,UAAUI,aAAuBtF,KAAKkF,UAAUxB,WAAW6B,iBAElEvF,KAAKkF,UAAUxB,WAAW6B,eACxB,CACED,cAAc,EACdE,eAAgBxF,KAAKkF,UAAUI,aAAaE,eAC5CC,WAAW,sCAWThG,GACR,OAAO,IAAIwF,EAAAzC,QAAOpB,WAChB3B,EACA,WACEiG,QAAQC,IAAI,0CACZlG,EAAQqB,8CAKHrC,GACT,OAAIuB,KAAKoF,KAAKQ,aAAaC,gCAAgC7F,KAAK0D,aAAejF,uKC7EnF,MAAAqH,KAAAxI,EAAA,knCAcqByI,cAsBnB,SAAAA,EAAYX,EAAMP,EAAGmB,EAAGC,EAASC,EAAOC,EAASC,EAAed,EAAce,EAAaC,EAAuBC,EAAkBC,EAAoBC,EAA8BC,EAA0BC,EAAkCC,EAAkCC,GAAwB,mGAAA9G,CAAAC,KAAA+F,GAAAzB,EAAAtE,MAAA+F,EAAAxB,WAAArG,OAAAsG,eAAAuB,IAAApI,KAAAqC,KAExSoF,EACAP,EAAGmB,EACHC,EACAC,EACAC,EACAC,EACAd,EACAe,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,4SAKFC,EAAAf,EAAA3G,UAAAmF,WAAArG,OAAAsG,eAAAuB,EAAA3G,WAAA,SAAAY,MAAArC,KAAAqC,MACAA,KAAK+G,YAAY,gLC3DrB,IAAAC,EAAA5C,EAAA9G,EAAA,IACA2J,EAAA7C,EAAA9G,EAAA,kuBAoBqB4J,cAuBnB,SAAAA,EACE9B,EACAP,EAAGmB,EACHC,GAeA,IAAA3F,EAdA4F,EAcAtG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAdQ,KACRuG,IAaAvG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAZAwG,EAYAxG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAZgBoH,EAAAxE,QAAW2E,MAC3B7B,EAWA1F,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAXe,KACfyG,EAUAzG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAVcoH,EAAAxE,QAAW4E,qBACzBd,EASA1G,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GATwBoH,EAAAxE,QAAW6E,iCACnCd,EAQA3G,UAAAC,OAAA,SAAAC,IAAAF,UAAA,IAAAA,UAAA,IARmB,KACnB4G,EAOA5G,UAAAC,OAAA,SAAAC,IAAAF,UAAA,IAAAA,UAAA,IAPqBoH,EAAAxE,QAAW8E,8BAChCb,EAMA7G,UAAAC,OAAA,SAAAC,IAAAF,UAAA,IAAAA,UAAA,IAN+BoH,EAAAxE,QAAW+E,0CAC1Cb,EAKA9G,UAAAC,OAAA,SAAAC,IAAAF,UAAA,IAAAA,UAAA,IAL2B,EAC3B+G,EAIA/G,UAAAC,OAAA,SAAAC,IAAAF,UAAA,IAAAA,UAAA,IAJmC,EACnCgH,EAGAhH,UAAAC,OAAA,SAAAC,IAAAF,UAAA,IAAAA,UAAA,IAHmCoH,EAAAxE,QAAWgF,+CAC9CX,EAEAjH,UAAAC,OAAA,SAAAC,IAAAF,UAAA,IAAAA,UAAA,IAFyBoH,EAAAxE,QAAWiF,mCAEpC,mGAAA1H,CAAAC,KAAAkH,IACA5G,EAAAgE,EAAAtE,MAAAkH,EAAA3C,WAAArG,OAAAsG,eAAA0C,IAAAvJ,KAAAqC,KAAMoF,EAAMP,EAAGmB,EAAGC,KAObb,KAAOA,EAOZ9E,EAAKvC,KAOLuC,EAAKvB,IAAMuB,EAAKL,YAAYlC,MAAQ4G,KAAK+C,MAAM,IAAA/C,KAAKgD,UAAgC,KAOpFrH,EAAKsH,KAAOtH,EAAKL,YAAYlC,KAO7BuC,EAAKuH,UAAY,IAAAZ,EAAAzE,QAAAlC,EAA6B8F,EAAed,GAO7DhF,EAAK+F,YAAcA,EAOnB/F,EAAKgG,sBAAwBA,EAO7BhG,EAAKiG,iBAAmBA,EAOxBjG,EAAKkG,mBAAqBA,EAO1BlG,EAAKmG,6BAA+BA,EAOpCnG,EAAKoG,yBAA2BA,EAOhCpG,EAAKqG,iCAAmCA,EAOxCrG,EAAKsG,iCAAmCA,EAOxCtG,EAAKuG,uBAAyBA,EAE9BvG,EAAK8E,KAAKC,IAAIyC,SAAdxH,GACAA,EAAK8E,KAAK2C,QAAQ1C,IAAlB/E,GACI6F,IACF7F,EAAK8E,KAAK4C,QAAQ3C,IAAIyC,SAAtBxH,GACAA,EAAK2H,uBAAsB,GAC3B3H,EAAK4H,YAAY,MAGN,MAAThC,IACEA,KAAS5F,EAAK8E,KAAK+C,QACrB7H,EAAK8E,KAAK+C,OAAOjC,GAAOb,IAAxB/E,GACAA,EAAK8E,KAAK+C,OAAOC,kBACZ1C,QAAQ2C,KAAK,oCAAb/H,IAGTA,EAAKxB,SApHLwB,wPAzCgC8B,OAAOkG,QAAQC,OAAOrB,+CAqKtDxB,QAAQC,IAAI,WAAY3F,KAAKjB,IAAK,UAAWiB,KAAK4H,KAAM,eAAgB5H,KAAK6H,UAAUD,wEAiBjFnJ,GAEN,OADAuB,KAAKjC,KAAOU,EACLuB,8CAI0E,IAApEwI,EAAoE5I,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA5DI,KAAKwI,MAAOC,EAAgD7I,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvCI,KAAKyI,OAAQC,EAA0B9I,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAhB,EAAG+I,EAAa/I,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EAC9EI,KAAK4I,MAAMC,QAAQC,QAAQN,EAAOC,GAClCzI,KAAK4I,MAAMC,QAAQE,aAAc/I,KAAKwI,MAAQA,GAAS,EAAKE,GAAW1I,KAAKyI,OAASA,GAAU,EAAKE,4qBC3LnFK,cAMnB,SAAAA,EAAY5D,EAAM6D,GAAe,IAAA3I,EAAA,mGAAAP,CAAAC,KAAAgJ,IAC/B1I,EAAAgE,EAAAtE,MAAAgJ,EAAAzE,WAAArG,OAAAsG,eAAAwE,IAAArL,KAAAqC,KAAMoF,EAAM6D,KAOP7D,KAAOA,EARmB9E,8OANE8B,OAAO8G,QAAQC,kJCxBpD,IAAAhF,EAAAC,EAAA9G,EAAA,IACA8L,EAAAhF,EAAA9G,EAAA,IACA+G,EAAAD,EAAA9G,EAAA,4jBAEqB4G,cACnB,SAAAA,EAAYzE,EAASC,EAAOC,GAAQ,IAAAW,EAAA,mGAAAP,CAAAC,KAAAkE,IAClC5D,EAAAgE,EAAAtE,MAAAkE,EAAAK,WAAArG,OAAAsG,eAAAN,IAAAO,MAAAzE,KAASJ,aACJ8E,WACH,CACE,IAAA0E,EAAA5G,QAAAlC,EAAiBA,EAAKZ,MAAOY,EAAKX,QAClC,IAAIwE,EAAA3B,QAAOpB,WAAXd,EAEE,WACMqE,KAAKC,IAAItE,EAAKZ,MAAMmF,EAAIvE,EAAKJ,OAAO2E,GAAKR,EAAA7B,QAASsC,sBAChDxE,EAAKZ,MAAMmF,EAAIvE,EAAKJ,OAAO2E,GAC7BvE,EAAKZ,MAAM2J,MAAMC,KAAK,QAEtBhJ,EAAKZ,MAAM6J,KAAKC,YAAYnF,EAAA7B,QAASiH,gBAC5BnJ,EAAKZ,MAAMmF,EAAIvE,EAAKJ,OAAO2E,IACpCvE,EAAKZ,MAAM2J,MAAMC,KAAK,QAEtBhJ,EAAKZ,MAAM6J,KAAKC,aAAanF,EAAA7B,QAASiH,gBAGxCnJ,EAAKQ,UAGT,WACER,EAAKZ,MAAM6J,KAAKC,YAAY,IAE9B,YACOlJ,EAAKZ,MAAMmF,EAAIvE,EAAKJ,OAAO2E,GAAKvE,EAAKZ,MAAM6J,KAAKG,SAAS7E,EAAI,GAAGvE,EAAKQ,aA1BhDR,8XCLtC,IAAAqJ,EAAAvF,EAAA9G,EAAA,IACAsM,EAAAxF,EAAA9G,EAAA,KACAuM,EAAAzF,EAAA9G,EAAA,kuBAEqBwM,cACnB,SAAAA,EAAYpG,GAAY,IAAApD,EAAA,mGAAAP,CAAAC,KAAA8J,IACtBxJ,EAAAgE,EAAAtE,MAAA8J,EAAAvF,WAAArG,OAAAsG,eAAAsF,IAAAnM,KAAAqC,KAAM0D,KAEDqG,gBAAkB,GAEvBzJ,EAAK0J,cAAgB,KALC1J,sSAQnBvB,EAAKY,GACJK,KAAKgK,eAAehK,KAAKiK,OAEzBlL,KAAG6K,EAAApH,QAAaxC,KAAKgK,cAAgB,IAAIJ,EAAApH,QAAQzD,GAAKiB,KAAML,GACvDZ,KAAO6K,EAAApH,QAAQ0H,aAClBlK,KAAK0D,sBAALmG,EAAArH,QAAwCxC,KAAKgK,cAAgB,IAAIJ,EAAApH,QAAQ0H,aAAanL,GAAKiB,KAAML,GAChG+F,QAAQC,IAAI5G,EAAM,qCAEvB2G,QAAQC,IAAI,uBAAwB5G,GAGlCiB,KAAKgK,eAAehK,KAAKgK,cAAcV,sCAIvCtJ,KAAKgK,gBACPhK,KAAK+J,gBAAgBpJ,KAAKX,KAAKgK,eAC/BhK,KAAKgK,cAAcC,OACnBjK,KAAKgK,cAAgB,KACrBtE,QAAQC,IAAI3F,KAAK+J,wGChCvB,IAAMI,EAAa,CACjB1G,UAAW3B,EAAQ,GACnBsI,gBAAiBtI,EAAQ,IACzBuI,mBAAoBvI,EAAQ,IAC5BgI,gBAAiBhI,EAAQ,KAG3B7E,EAAOD,QAAUmN,kGCPjB,IAAAR,EAAAvF,EAAA9G,EAAA,IACA0J,EAAA5C,EAAA9G,EAAA,iuBAcqB+M,cAQnB,SAAAA,EAAY3G,EAAYkE,EAAMtC,GAAc,IAAAhF,EAAA,mGAAAP,CAAAC,KAAAqK,IAC1C/J,EAAAgE,EAAAtE,MAAAqK,EAAA9F,WAAArG,OAAAsG,eAAA6F,IAAA1M,KAAAqC,KAAM0D,KAOD4G,YACmC,IAAhChK,EAAKoD,WAAW0B,KAAKkF,OAA0BhK,EAAKgK,OAAShK,EAAKoD,WAAapD,EAAKgK,OAAShK,EAAKoD,WAAW0B,KAAKkF,OAO1HhK,EAAKsH,KAAOA,EAOZtH,EAAKgF,aAAeA,EAEpBhF,EAAKiK,iBAzBqCjK,kTAmCtCN,KAAK4H,OAASZ,EAAAxE,QAAWgI,YAAcxK,KAAK4H,OAASZ,EAAAxE,QAAWiI,cAClEzK,KAAK0K,QAAU,IAAI1D,EAAAxE,QAAWP,WAAWjC,MACrCA,KAAK4H,OAASZ,EAAAxE,QAAWgI,WAAYxK,KAAK2K,QAAU,IAAI3D,EAAAxE,QAAWT,WAAW/B,MACzEA,KAAK4H,OAASZ,EAAAxE,QAAWiI,cAAazK,KAAK4K,SAAW,IAAI5D,EAAAxE,QAAWR,YAAYhC,8FC7DhG,IAAM6K,EAAU,CACdC,OAAQhJ,EAAQ,IAChBoI,aAAcpI,EAAQ,KAGxB7E,EAAOD,QAAU6N,kGCLjB,MAAAE,KAAAzN,EAAA,2MAEqBwN,aACnB,SAAAA,EAAYrL,GAAsB,IAAbE,EAAaC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,gGAAIG,CAAAC,KAAA8K,GAEhC9K,KAAKP,QAAUA,EAEfO,KAAKL,OAASA,EAEdK,KAAK0D,WAAajE,EAAQiE,WAE1B1D,KAAKjC,KAAOiC,KAAKC,YAAYlC,2DAGJ,IAAtBiN,EAAsBpL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAX,aACVI,KAAKP,mBAALsL,EAAAvI,SACFwI,IACAtF,QAAQC,IAAI3F,KAAKjC,KAAO,mBACnB2H,QAAQC,IAAI,oFAGM,IAAtBqF,EAAsBpL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAX,aACVI,KAAKP,mBAALsL,EAAAvI,SACFwI,IACAtF,QAAQC,IAAI3F,KAAKjC,KAAO,mBACnB2H,QAAQC,IAAI,2NCzBvB,MAAAsF,KAAA3N,EAAA,mnCAEqB4N,cACnB,SAAAA,EAAYzL,EAASE,GAA8B,IAAAW,EAAtB6K,EAAsBvL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EAAG,mGAAAG,CAAAC,KAAAkL,IACjD5K,EAAAgE,EAAAtE,MAAAkL,EAAA3G,WAAArG,OAAAsG,eAAA0G,IAAAvN,KAAAqC,KAAMP,EAASE,KAEVwL,iBAAmBA,EAHyB7K,sSAM9C0K,GAAU,IAAAI,EAAApL,KACb8G,EAAAoE,EAAA9L,UAAAmF,WAAArG,OAAAsG,eAAA0G,EAAA9L,WAAA,OAAAY,MAAArC,KAAAqC,KAAW,WACToL,EAAKC,SAAU,EACfL,mCAICA,GAAU,IAAAM,EAAAtL,KACb8G,EAAAoE,EAAA9L,UAAAmF,WAAArG,OAAAsG,eAAA0G,EAAA9L,WAAA,OAAAY,MAAArC,KAAAqC,KAAW,WACTsL,EAAKD,SAAU,EACfL,2KCnBN,IAAAO,EAAAnH,EAAA9G,EAAA,IACA0J,EAAA5C,EAAA9G,EAAA,IACAyN,EAAA3G,EAAA9G,EAAA,kuBAEqBkO,cAoBnB,SAAAA,EAAYpG,EAAMP,EAAGmB,EAAGC,EAASC,EAAOuF,EAAoBC,EAAqBC,EAAQC,GAAgC,IAAAtL,EAAbuL,IAAajM,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,sGAAAG,CAAAC,KAAAwL,IACvHlL,EAAAgE,EAAAtE,MAAAwL,EAAAjH,WAAArG,OAAAsG,eAAAgH,IAAA7N,KAAAqC,KAAMoF,EAAMP,EAAGmB,EAAGC,EAASC,GAAO,EAAMc,EAAAxE,QAAWgI,cAE9CtC,YAAY,GAEjB5H,EAAKwL,cAAgB,CACnBC,aAAcN,EACdO,cAAeN,EACfC,OAAQA,GAGVrL,EAAKX,OAASW,EAAKwL,cAEnBxL,EAAKuL,MAAO,EACRA,GACFvL,EAAK2L,SAIP3L,EAAK8E,KAAKQ,aAAaP,IAAvB/E,GACAA,EAAK4L,QAAU,IAAAnB,EAAAvI,QAAAlC,GApBwGA,0SA2BlHN,KAAK6L,OACiC,OAArC7L,KAAK8L,cAAcE,gBACrBhM,KAAKgM,cAAgBhM,KAAKoF,KAAK+G,OAAOC,SAASpM,KAAK6E,EAAI7E,KAAK8L,cAAcH,OAAO9G,EAAG7E,KAAKgG,EAAIhG,KAAK8L,cAAcH,OAAO3F,EAAGhG,KAAK8L,cAAcE,cAAcK,QAAQC,aAAatM,KAAK8L,cAAcE,cAAcO,WAClNvM,KAAKoF,KAAKQ,aAAa4G,eAAe7L,KAAKX,KAAKgM,gBAGV,OAApChM,KAAK8L,cAAcC,eACrB/L,KAAK+L,aAAe/L,KAAKoF,KAAK+G,OAAOC,SAASpM,KAAK6E,EAAI7E,KAAK8L,cAAcH,OAAO9G,EAAG7E,KAAKgG,EAAIhG,KAAK8L,cAAcH,OAAO3F,EAAGhG,KAAK8L,cAAcC,aAAaM,QAAQC,aAAatM,KAAK8L,cAAcC,aAAaQ,WAC/MvM,KAAKoF,KAAKQ,aAAa6G,cAAc9L,KAAKX,KAAK+L,eAGjD/L,KAAK6L,MAAO,uCAQejM,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAG7B,GAAII,KAAK6L,KAAM,CACb,IAAIa,EAAqB1M,KAAKoF,KAAKQ,aAAa4G,eAAeG,QAAQ3M,KAAKgM,eAExEU,GAAsB,IACxB1M,KAAKoF,KAAKQ,aAAa4G,eAAeI,OAAOF,EAAoB,GACjE1M,KAAKoF,KAAK+G,OAAOU,YAAY7M,KAAKgM,gBAGpC,IAAIc,EAAoB9M,KAAKoF,KAAKQ,aAAa6G,cAAcE,QAAQ3M,KAAK+L,cAEtEe,GAAqB,IACvB9M,KAAKoF,KAAKQ,aAAa6G,cAAcG,OAAOE,EAAmB,GAC/D9M,KAAKoF,KAAK+G,OAAOU,YAAY7M,KAAK+L,eAGpC/L,KAAK6L,MAAO,oCAQV7L,KAAK6L,KAAM7L,KAAK+M,UACf/M,KAAKiM,+FCjGd,IAAM5J,EAAQ,CACZ2K,eAAgBlL,EAAQ,KAG1B7E,EAAOD,QAAUqF,mBCJjB,IAAM4K,EAAW,CACfC,aAAcpL,EAAQ,IACtBqL,mBAAoBrL,EAAQ,IAC5BkH,QAASlH,EAAQ,IACjBsL,cAAetL,EAAQ,KAGzB7E,EAAOD,QAAUiQ,mBCPjB,IAAMI,EAAU,CACdC,aAAcxL,EAAQ,IACtByL,WAAYzL,EAAQ,KAGtB7E,EAAOD,QAAUqQ,kGCLjB,IAAAvH,EAAA1B,EAAA9G,EAAA,IACA0J,EAAA5C,EAAA9G,EAAA,IACAkQ,EAAApJ,EAAA9G,EAAA,KACAqE,EAAAyC,EAAA9G,EAAA,yoCAcqBmQ,cASnB,SAAAA,EAAYrI,EAAMP,EAAGmB,EAAGC,EAASC,GAAO,IAAAwH,EAAApN,EAAA,mGAAAP,CAAAC,KAAAyN,IACtCnN,EAAAgE,EAAAtE,MAAA0N,EAAAD,EAAAlJ,WAAArG,OAAAsG,eAAAiJ,IAAA9P,KAAA8G,MAAAiJ,EAAA,CAAA1N,MAAA2N,OAAApN,MAAAnB,UAAAwO,MAAAjQ,KAASiC,WAAT,EAAoB,EAAMoH,EAAAxE,QAAUiI,YAAa,CAAEjF,eAAgB,QAO9DnF,QAAU,IAAImN,EAAAhL,QAAW4H,gBAAf9J,GAOfA,EAAKyE,OAASpD,EAAAa,QAAMK,MAfkBvC,0SAmBtCwG,EAAA2G,EAAArO,UAAAmF,WAAArG,OAAAsG,eAAAiJ,EAAArO,WAAA,SAAAY,MAAArC,KAAAqC,sHC7CJ,MAAA2B,KAAArE,EAAA,gCAKA,IAAIuQ,EAAQ,CACV1D,WAAYrI,EAAQ,IACpBgM,KAAMhM,EAAQ,IACdmL,SAAUnL,EAAQ,IAClBiM,MAAOjM,EAAQ,IACfkM,QAASlM,EAAQ,IACjBuL,QAASvL,EAAQ,IACjBO,MAAOP,EAAQ,KAGjB+L,EAAQzL,OAAOC,MAAMC,QAAQC,QAAO,EAAOsL,EAAnClM,EAAAa,SAERvF,EAAOD,QAAU6Q,EACjBI,EAAOJ,MAAQA,oCClBf,IAAAK,EAGAA,EAAA,WACA,OAAAlO,KADA,GAIA,IAEAkO,KAAA,IAAAC,SAAA,iBACC,MAAAC,GAED,iBAAAhR,SAAA8Q,EAAA9Q,QAOAH,EAAAD,QAAAkR,kGCnBA,IAAAvE,EAAAvF,EAAA9G,EAAA,IACA+Q,EAAAjK,EAAA9G,EAAA,iuBAcqB8M,cAKnB,SAAAA,EAAY1K,GAAO,IAAAY,EAAA,mGAAAP,CAAAC,KAAAoK,IACjB9J,EAAAgE,EAAAtE,MAAAoK,EAAA7F,WAAArG,OAAAsG,eAAA4F,IAAAzM,KAAAqC,KAAMN,KAODA,MAAQA,EAObY,EAAKgO,cAAgB,IAAID,EAAA7L,QAAQsB,KAAZxD,EAAuBA,EAAKZ,OAQjDY,EAAKH,OAAS,CAACG,EAAKgO,eACpBhO,EAAKH,OAAO,GAAGU,QAxBEP,6SAgCjB,OAAO,qCAQP,OAAO,qCAQP,OAAO,mCAYLd,EAAQG,GAA6C,IAArChB,EAAqCiB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA9BwK,EAAgBmE,aAErCC,EAAY,IAAIhP,EAAOQ,KAAMA,KAAKN,MAAOC,GAE7C,OAAQhB,GACN,KAAKyL,EAAgBmE,aACnBvO,KAAKG,OAAO,GAAGS,QACfZ,KAAKG,OAAS,GACdH,KAAKG,OAAOQ,KAAK6N,GACjBxO,KAAKG,OAAO,GAAGU,QAEf,MAEF,KAAKuJ,EAAgBqE,WACnBzO,KAAKG,OAAOQ,KAAK6N,GAEjB,MAEF,KAAKpE,EAAgBsE,WACnB1O,KAAKG,OAAO,GAAGc,QACfjB,KAAKG,OAAOwO,QAAQH,GACpBxO,KAAKG,OAAO,GAAGU,QAKnB,OAAO2N,mCASPxO,KAAKG,OAAOY,QACRf,KAAKG,OAAON,QAAU,GAAGG,KAAKG,OAAOQ,KAAKX,KAAKsO,eAC/CtO,KAAKG,OAAO,GAAGC,SAAUJ,KAAKG,OAAO,GAAGe,SACvClB,KAAKG,OAAO,GAAGU,yCAShBb,KAAKG,OAAON,QAAU,EAAGG,KAAKG,OAAOQ,KAAKX,KAAKsO,eAC1CtO,KAAKG,OAAON,OAAS,GAA6B,SAAxBG,KAAKG,OAAO,GAAGpC,OAChDiC,KAAKG,OAAOY,QACRf,KAAKG,OAAO,GAAGC,SAAUJ,KAAKG,OAAO,GAAGe,SACvClB,KAAKG,OAAO,GAAGU,SAGtBb,KAAKG,OAAO,GAAGgB,8KCtInB,IAAAgD,EAAAC,EAAA9G,EAAA,IACAsR,EAAAxK,EAAA9G,EAAA,4jBAEqBsG,cACnB,SAAAA,EAAYnE,EAASC,EAAOC,GAAQ,IAAAW,EAAA,mGAAAP,CAAAC,KAAA4D,IAClCtD,EAAAgE,EAAAtE,MAAA4D,EAAAW,WAAArG,OAAAsG,eAAAZ,IAAAa,MAAAzE,KAASJ,aACJ8E,WACH,CACE,IAAAkK,EAAApM,QAAAlC,EAAiBA,EAAKZ,MAAOY,EAAKX,QAClCW,EAAKJ,OAAO2H,UAAU8C,QAAQkE,UAA9BvO,KAL8BA,6SCAtCrD,EAAOD,QAJU,CACf8H,sBAAuB,kBCIzB7H,EAAOD,QALU,CACfyM,cAAe,IACf3E,sBAAuB,oGCFzB,IAAAX,EAAAC,EAAA9G,EAAA,IACAqE,EAAAyC,EAAA9G,EAAA,2jBAOqBwG,cASnB,SAAAA,EAAYrE,EAASC,EAAOC,GAAQ,IAAAW,EAAA,mGAAAP,CAAAC,KAAA8D,IAClCxD,EAAAgE,EAAAtE,MAAA8D,EAAAS,WAAArG,OAAAsG,eAAAV,IAAAW,MAAAzE,KAASJ,aACJ8E,WACH,IAAIP,EAAA3B,QAAOpB,WAAXd,EAEE,WAEE,OADAA,EAAKZ,MAAM6J,KAAKC,YAAY,GACpBlJ,EAAKZ,MAAMqF,QAEjB,KAAKpD,EAAAa,QAAMI,KAMX,KAAKjB,EAAAa,QAAMK,MACTvC,EAAKZ,MAAM2J,MAAMC,KAAK,YAhBEhJ,8XCjBtC,IAAA6D,EAAAC,EAAA9G,EAAA,IACAsR,EAAAxK,EAAA9G,EAAA,4jBAEqByG,cACnB,SAAAA,EAAYtE,EAASC,EAAOC,GAAQ,IAAAW,EAAA,mGAAAP,CAAAC,KAAA+D,IAClCzD,EAAAgE,EAAAtE,MAAA+D,EAAAQ,WAAArG,OAAAsG,eAAAT,IAAAU,MAAAzE,KAASJ,aACJ8E,WACH,CACE,IAAAkK,EAAApM,QAAAlC,EAAiBA,EAAKZ,MAAOY,EAAKX,QAClCW,EAAKJ,OAAO2H,UAAU+C,SAASiE,UAA/BvO,KAL8BA,8XCJtC,IAAA6D,EAAAC,EAAA9G,EAAA,IACA8L,EAAAhF,EAAA9G,EAAA,2jBAEqB0G,cACnB,SAAAA,EAAYvE,EAASC,EAAOC,GAAQ,IAAAW,EAAA,mGAAAP,CAAAC,KAAAgE,IAClC1D,EAAAgE,EAAAtE,MAAAgE,EAAAO,WAAArG,OAAAsG,eAAAR,IAAAS,MAAAzE,KAASJ,aACJ8E,WACH,CACE,IAAA0E,EAAA5G,QAAAlC,EAAiBA,EAAKZ,MAAOY,EAAKX,QAClCW,EAAKJ,OAAO2H,UAAU6C,QAAQmE,UAA9BvO,KAL8BA,8XCJtC,IAAA6D,EAAAC,EAAA9G,EAAA,IACA8L,EAAAhF,EAAA9G,EAAA,IACA+G,EAAAD,EAAA9G,EAAA,4jBAGqB2G,cACnB,SAAAA,EAAYxE,EAASC,EAAOC,GAAQ,IAAAW,EAAA,mGAAAP,CAAAC,KAAAiE,IAClC3D,EAAAgE,EAAAtE,MAAAiE,EAAAM,WAAArG,OAAAsG,eAAAP,IAAAQ,MAAAzE,KAASJ,aACJ8E,WACH,CACE,IAAA0E,EAAA5G,QAAAlC,EAAiBA,EAAKZ,MAAOY,EAAKX,QAClC,IAAIwE,EAAA3B,QAAOpB,WAAXd,EAEE,WACMqE,KAAKC,IAAItE,EAAKZ,MAAMmF,EAAIvE,EAAKJ,OAAO2E,GAAKR,EAAA7B,QAASsC,uBAChDxE,EAAKZ,MAAMmF,EAAIvE,EAAKJ,OAAO2E,GAC7BvE,EAAKZ,MAAM2J,MAAMC,KAAK,OAEtBhJ,EAAKZ,MAAM6J,KAAKC,YAAYnF,EAAA7B,QAASsM,eAC5BxO,EAAKZ,MAAMmF,EAAIvE,EAAKJ,OAAO2E,IACpCvE,EAAKZ,MAAM2J,MAAMC,KAAK,OAEtBhJ,EAAKZ,MAAM6J,KAAKC,aAAanF,EAAA7B,QAASsM,eAExCpJ,QAAQC,IAAI,mBAAoBhG,EAAOO,OAAO2E,IAE9CvE,EAAKQ,UAGT,WACER,EAAKZ,MAAM6J,KAAKC,YAAY,IAE9B,YACOlJ,EAAKZ,MAAMmF,EAAIvE,EAAKJ,OAAO2E,GAAKvE,EAAKZ,MAAM6J,KAAKG,SAAS7E,EAAI,GAAGvE,EAAKQ,aA3BhDR,6SCDtCrD,EAAOD,QALU,CACf8R,aAAc,IACdhK,sBAAuB,mBCazB7H,EAAOD,QAfO,CACZwN,WAAY,aACZrD,MAAO,QACPsD,YAAa,cACbsE,SAAU,WACVC,UAAW,YAEXvH,mCAAoC,IACpCL,qBAAsB,uBACtBE,8BAA+B,8BAC/BE,+CAAgD,IAChDH,iCAAkC,iCAClCE,0CAA2C,yICZ7C,IAAA0H,EAAA7K,EAAA9G,EAAA,IACA2H,EAAAb,EAAA9G,EAAA,iuBAEqByE,cACnB,SAAAA,EAAYmD,GAAW,mGAAAnF,CAAAC,KAAA+B,GAAAuC,EAAAtE,MAAA+B,EAAAwC,WAAArG,OAAAsG,eAAAzC,IAAApE,KAAAqC,KACfkF,6SAQEzF,GAAS,IAAAa,EAAAN,KACjB,OAAO,IAAIiF,EAAAzC,QAAOpB,WAChB3B,EACA,WAEMa,EAAK4O,WAAW5O,EAAKoD,WAAWkD,kCAAmClB,QAAQC,IAAIrF,EAAKoD,WAAW4C,uBAC9FZ,QAAQC,IAAIrF,EAAKoD,WAAW+C,8BACjChH,EAAQqB,gLCpBhB,IAAAmO,EAAA7K,EAAA9G,EAAA,IACA2H,EAAAb,EAAA9G,EAAA,iuBAEqB0E,cACnB,SAAAA,EAAYkD,GAAW,mGAAAnF,CAAAC,KAAAgC,GAAAsC,EAAAtE,MAAAgC,EAAAuC,WAAArG,OAAAsG,eAAAxC,IAAArE,KAAAqC,KACfkF,6SAQEzF,GAAS,IAAAa,EAAAN,KACjB,OAAO,IAAIiF,EAAAzC,QAAOpB,WAChB3B,EACA,WAEMa,EAAK4O,WAAW5O,EAAKoD,WAAWkD,kCAAmClB,QAAQC,IAAIrF,EAAKoD,WAAW4C,uBAC9FZ,QAAQC,IAAIrF,EAAKoD,WAAW+C,8BACjChH,EAAQqB,gLCpBhB,IAAAmO,EAAA7K,EAAA9G,EAAA,IACA+Q,EAAAjK,EAAA9G,EAAA,IACA+G,EAAAD,EAAA9G,EAAA,0oCAEqB2E,cACnB,SAAAA,EAAYiD,GAAW,IAAA5E,EAAA,mGAAAP,CAAAC,KAAAiC,IACrB3B,EAAAgE,EAAAtE,MAAAiC,EAAAsC,WAAArG,OAAAsG,eAAAvC,IAAAtE,KAAAqC,KAAMkF,KAEDiK,OAHgB7O,uSAOrBwG,EAAA7E,EAAA7C,UAAAmF,WAAArG,OAAAsG,eAAAvC,EAAA7C,WAAA,MAAAY,MAAArC,KAAAqC,MAEAA,KAAK0D,WAAW0L,GAAG,cAAe,SAAUC,GAAS,IAAAjE,EAAApL,KACnDA,KAAKmF,QAAQmK,UAAUtP,KAAK0D,YAE5B1D,KAAKmP,OAASnP,KAAK0D,WAAW0B,KAAKmK,KAAKC,SAAS,CAC/CC,MAAOpL,EAAA7B,QAASkN,4BAChB1E,SAAU,WACJI,EAAK1H,aAAe0H,EAAKhG,KAAKkF,QAAWc,EAAKhG,KAAKkF,OAAOqF,WAAWvE,EAAKhG,KAAKkF,OAAOjK,QAAQgF,IAAIgJ,EAAA7L,QAAQwB,QAAS,CAAE9D,OAAQkL,EAAK1H,cAExIkM,cAAe5P,QAEjBhB,KAAKgB,OAEPA,KAAK0D,WAAW0L,GAAG,aAAc,SAAUC,GACzCrP,KAAKmP,OAAOnO,QAAO,GACnBhB,KAAKmF,QAAQmK,aACbtQ,KAAKgB,uCAOPA,KAAKmP,OAAOnO,QAAO,qCAQXvB,GAAS,IAAA6L,EAAAtL,KACjB,OAAO,IAAIqO,EAAA7L,QAAQhD,OAAO4B,WACxB3B,EACA,WAEM6L,EAAK4D,WAAW5D,EAAK5H,WAAWmD,wBAAyBnB,QAAQC,IAAI2F,EAAK5H,WAAW2C,aACpFX,QAAQC,IAAI2F,EAAK5H,WAAW8C,oBACjC/G,EAAQqB,+FC/ChB7D,EAAOD,QAJU,CACf0S,4BAA6B,gICA7B,SAAAvN,iGAAcpC,CAAAC,KAAAmC,yCCDhB,IAAM+H,EAAe,CACnB2F,eAAgB/N,EAAQ,IACxBoJ,YAAapJ,EAAQ,KAGvB7E,EAAOD,QAAUkN,kGCLjB,MAAA4F,KAAAxS,EAAA,mnCAEqBuS,cACnB,SAAAA,EAAYpQ,EAASE,GAAQ,IAAAW,EAAA,mGAAAP,CAAAC,KAAA6P,IAC3BvP,EAAAgE,EAAAtE,MAAA6P,EAAAtL,WAAArG,OAAAsG,eAAAqL,IAAAlS,KAAAqC,KAAMP,EAASE,EAAQ,MAEbA,OAAOoQ,UAASzP,EAAKX,OAAOoQ,QAAU,IAC3CzP,EAAKX,OAAOqQ,UAAS1P,EAAKX,OAAOqQ,QAAU,KAC3C1P,EAAKX,OAAOsQ,aAAY3P,EAAKX,OAAOsQ,WAAa,MAL3B3P,wSAQtB,IAAA8K,EAAApL,KACL8G,EAAA+I,EAAAzQ,UAAAmF,WAAArG,OAAAsG,eAAAqL,EAAAzQ,WAAA,OAAAY,MAAArC,KAAAqC,KAAW,YACM,SAAXkQ,IACF9E,EAAK1H,WAAW0B,KAAKmK,KAAKC,SAAS,CACjCC,MAAO9K,KAAK+C,MAAM/C,KAAKgD,UAAYyD,EAAKzL,OAAOqQ,QAAU5E,EAAKzL,OAAOoQ,UAAY3E,EAAKzL,OAAOoQ,QAC7F/E,SAAU,WACHI,EAAKC,UAC2C,OAA/CD,EAAK1H,WAAWoI,cAAcC,eACe,IAA3CX,EAAK1H,WAAWqI,aAAaQ,UAAiBnB,EAAK1H,WAAWqI,aAAaO,aAAalB,EAAK1H,WAAWoI,cAAcC,aAAaQ,WAClInB,EAAK1H,WAAWqI,aAAaO,aAAa,IAGG,OAAhDlB,EAAK1H,WAAWoI,cAAcE,gBACgB,IAA5CZ,EAAK1H,WAAWsI,cAAcO,UAAiBnB,EAAK1H,WAAWsI,cAAcM,aAAalB,EAAK1H,WAAWoI,cAAcE,cAAcO,WACrInB,EAAK1H,WAAWsI,cAAcM,aAAa,IAElD4D,MAGJN,cAAexE,EACf+E,OAAQ,IAIZD,oCAIG,IAAA5E,EAAAtL,KACL8G,EAAA+I,EAAAzQ,UAAAmF,WAAArG,OAAAsG,eAAAqL,EAAAzQ,WAAA,OAAAY,MAAArC,KAAAqC,KAAW,WACsB,OAA3BsL,EAAK3L,OAAOsQ,YACqC,OAA/C3E,EAAK5H,WAAWoI,cAAcC,cAChCT,EAAK5H,WAAWqI,aAAaO,aAAahB,EAAK5H,WAAWoI,cAAcC,aAAaQ,WAEnC,OAAhDjB,EAAK5H,WAAWoI,cAAcE,eAChCV,EAAK5H,WAAWsI,cAAcM,aAAahB,EAAK5H,WAAWoI,cAAcE,cAAcO,YAErD,QAA3BjB,EAAK3L,OAAOsQ,YACrB3E,EAAK5H,WAAWqJ,iLCjDxB,IAAA1I,EAAAD,EAAA9G,EAAA,IACA8S,EAAAhM,EAAA9G,EAAA,KACA+S,EAAAjM,EAAA9G,EAAA,KACAgT,EAAAlM,EAAA9G,EAAA,KACAiT,EAAAnM,EAAA9G,EAAA,kOAEqBwQ,aACnB,SAAAA,EAAYnO,GAcV,mGAdkBI,CAAAC,KAAA8N,GAClB9N,KAAKL,OAASA,EACdK,KAAKwQ,mBACLxQ,KAAKyQ,oBACLzQ,KAAK0Q,cACL1Q,KAAK2Q,WACL3Q,KAAK4Q,kBACL5Q,KAAK6Q,kBAILxM,EAAA7B,QAASM,KAAO,IAAIV,OAAO0L,KAAK9N,KAAKL,SAErC,EAAAyQ,EAAA5N,SAAY6B,EAAA7B,QAASM,MACduB,EAAA7B,QAASM,uEAIhBuB,EAAA7B,QAASe,aAAe8M,EAAA7N,QAAMwK,iBAE9BhN,KAAKL,OAAO6I,MAAQnE,EAAA7B,QAASe,aAAauN,gBAC1C9Q,KAAKL,OAAO8I,OAASpE,EAAA7B,QAASe,aAAawN,iBAC3C/Q,KAAKL,OAAOqR,KAAO3M,EAAA7B,QAASe,aAAa0N,eAEzCjR,KAAKL,OAAOuR,YAAa,EACzBlR,KAAKL,OAAOwR,gBAAkB,UAC9BnR,KAAKL,OAAOyR,UAAW,8CAIvBpR,KAAKL,OAAOqI,QAAU,CACpBxF,QAAS,SACT6O,OAAQ,CACNC,OAAO,EACPC,QAAS,CAAEvL,EAAG,EAAGnB,EAAG,2CAMxB7E,KAAKL,OAAO6R,QAAU,CACpBvD,OAAQ,CACN,CAAElP,IAAK,aAAc0S,OAAQlB,EAAA/N,QAAQ+K,WAAY1M,OAAO,EAAO6Q,QAAS,SACxE,CAAE3S,IAAK,eAAgB0S,OAAQlB,EAAA/N,QAAQ8K,aAAczM,OAAO,EAAO6Q,QAAS,YAE9EC,MAAO,CACL,CAAE5S,IAAK,gBAAiB0S,OAAQnB,EAAA9N,QAAS4K,cAAesE,QAAS,WACjE,CAAE3S,IAAK,qBAAsB0S,OAAQnB,EAAA9N,QAAS2K,mBAAoBuE,QAAS,gBAC3E,CAAE3S,IAAK,eAAgB0S,OAAQnB,EAAA9N,QAAS0K,aAAcwE,QAAS,+CAOnE1R,KAAKL,OAAOgS,MAAQ,CAACC,gDAIrB5R,KAAKL,OAAOkS,QAAS,4CAIrB7R,KAAKL,OAAOiI,KAAOxF,OAAO0P,MAC1B9R,KAAKL,OAAOoS,UAAY,GACxB/R,KAAKL,OAAOqS,OAAS,OACrBhS,KAAKL,OAAOsS,oBAAqB,wFCzErC,IAAIxP,EAAQX,EAAQ,GAChBoQ,EAAWpQ,EAAQ,GA2FvB7E,EAAOD,QA/EW,SAAUmV,GAC1B,IAAIxS,EAASwS,EAAKxS,OAElBA,EAAOyS,sBAAwB,UAC/BzS,EAAO0S,gBAAkB,UACzB1S,EAAO2S,YAAa,EAEpB,IAAIC,EAAa,QAES,IAAtB5S,EAAO4S,aACTA,EAAa,QAGf,IAGIC,EAHAC,EAAc9S,EAAO+S,MACrBC,EAAcR,EAAKS,OAAOF,MAY9B,GALEF,GAHEG,EAAYE,UAAcJ,GAAeA,EAAYK,gBAE7CL,GAAeA,EAAYM,UAAcJ,EAAYE,WAAaF,EAAYK,UAC5E,WAEA,cAJA,aAOTb,EAAKS,OAAOK,QAAQC,GAAI,CAC3B,IAIMC,EAJFtV,EAAI,GACJuV,EAAO,CAACvV,GAER0C,MAAMC,QAAQb,EAAOyS,wBAGvBzS,EAAOyS,sBAAsB3R,QAAQ,SAAU4S,GAC7CxV,EAAIA,EAAE8P,OAAO,OAEbyF,EAAKzS,KAAK,eAAiB0S,GAE3BF,EAAYE,IAKdD,EAAKA,EAAKvT,OAAS,GAAK,UAAYF,EAAO0S,gBAAkB,iBAAmBc,IAEhFtV,EAAIA,EAAE8P,OAAO,OAEbyF,EAAKzS,KAAK,UAAYhB,EAAO0S,gBAAkB,iBAAmB1S,EAAOyS,wBAI3EgB,EAAKzS,KAAK,oBAENhB,EAAO2T,YACTzV,EAAIA,EAAE8P,OAAOhO,EAAO2T,WAEhB3T,EAAO4T,cACT1V,EAAIA,EAAE8P,OAAO,KAAOhO,EAAO4T,cAGxB5T,EAAO2S,aACVzU,EAAIA,EAAE8P,OAAO,SAIZhO,EAAO2S,aAEVzU,GADAA,EAAIA,EAAE8P,OAAO,UAAYlL,EAAMC,QAAU,cAAgBD,EAAME,iBACzDgL,OAAO,KAAO4E,EAAa,MAAQC,EAAY,MAAQN,EAAS1O,OAAS,MAGjF3F,EAAIA,EAAE8P,OAAO,OAAShO,EAAO6T,SAG7BJ,EAAK,GAAKvV,EAEV6H,QAAQC,IAAIlB,MAAMiB,QAAS0N,mCCxF/B,MAAA/O,KAAA/G,EAAA,gCA6BAL,EAAOD,QA3BgB,WACrB,IAAIyW,EAAc,GAuBlB,MApBwB,WAApBpP,EAAA7B,QAASgB,QACXiQ,EAAYC,YAActW,OAAOuW,YACjCF,EAAYG,WAAaxW,OAAOyW,WAChCJ,EAAYxC,eAAiBtM,KAAK+C,MAAM+L,EAAYC,cAAgBrP,EAAA7B,QAASQ,oBAAsBqB,EAAA7B,QAASW,iCAAyE,EAAtCkB,EAAA7B,QAASc,4BAAkCe,EAAA7B,QAASO,WAAa,KAAO,MAEvN0Q,EAAYC,YAAcI,OAAOrL,OACjCgL,EAAYG,WAAaE,OAAOtL,MAChCiL,EAAYxC,eAAiBtM,KAAK+C,MAAM+L,EAAYC,cAAgBrP,EAAA7B,QAASQ,oBAAsBqB,EAAA7B,QAASY,kCAA2E,EAAvCiB,EAAA7B,QAASa,6BAAmCgB,EAAA7B,QAASO,WAAa,KAAO,KAG3N2C,QAAQC,IAAI,SAAW8N,EAAYxC,gBAInCwC,EAAY1C,iBAAmBpM,KAAKoP,KAAKN,EAAYC,YAAcD,EAAYxC,gBAC/EwC,EAAY3C,gBAAkBnM,KAAKoP,KAAKN,EAAYG,WAAaH,EAAYxC,gBAE7EvL,QAAQC,IAAI,YAAc8N,EAAYC,YAAc,aAAeD,EAAY1C,kBAC/ErL,QAAQC,IAAI,YAAc8N,EAAYG,WAAa,aAAeH,EAAY3C,iBAEvE2C,mGC1BT,IAAAO,EAAA5P,EAAA9G,EAAA,KACA+G,EAAAD,EAAA9G,EAAA,kuBAQqB4P,cAMnB,SAAAA,EAAY9H,EAAM6D,GAAe,IAAA3I,EAAA,mGAAAP,CAAAC,KAAAkN,IAC/B5M,EAAAgE,EAAAtE,MAAAkN,EAAA3I,WAAArG,OAAAsG,eAAA0I,IAAAvP,KAAAqC,KAAMoF,EAAM6D,KAMPgL,UAAY5P,EAAA7B,QAASyR,UAO1B3T,EAAK4T,eAAiB7P,EAAA7B,QAAS2R,cAdA7T,wSA2B/BN,KAAKoU,gBAAkBpU,KAAKoF,KAAKC,IAAIgP,QAOrCrU,KAAKsU,eAAiBtU,KAAKoF,KAAKC,IAAIgP,QAOpCrU,KAAKuU,mBAAqBvU,KAAKoF,KAAKC,IAAIgP,QAOxCrU,KAAKwU,mBAAqBxU,KAAKoF,KAAKC,IAAIgP,QAOxCrU,KAAKyU,eAAiBzU,KAAKoF,KAAKC,IAAIgP,QAOpCrU,KAAK0U,SAAW1U,KAAKoF,KAAKC,IAAIgP,QAO9BrU,KAAK2U,YAAc3U,KAAKoF,KAAKC,IAAIgP,QAOjCrU,KAAK4U,oBAAsB5U,KAAKoF,KAAKC,IAAIgP,QAOzCrU,KAAK6U,gBAAkB7U,KAAKoF,KAAKC,IAAIgP,QAOrCrU,KAAK8U,WAAa9U,KAAKoF,KAAKC,IAAIgP,QAOhCrU,KAAK+U,eAAiB/U,KAAKoF,KAAKC,IAAIgP,QAOpCrU,KAAKgV,qBAAuBhV,KAAKoF,KAAKC,IAAIgP,QAO1CrU,KAAKiV,iBAAmBjV,KAAKoF,KAAKC,IAAIgP,iDAQtC,IAAI7W,EAAIwC,KAAKkU,eAEblU,KAAKoU,gBAAgBc,SAASlV,KAAKiU,UAAYzW,GAC/CA,IACAwC,KAAKsU,eAAeY,SAASlV,KAAKiU,UAAYzW,GAC9CA,IACAwC,KAAKuU,mBAAmBW,SAASlV,KAAKiU,UAAYzW,GAClDA,IACAwC,KAAKwU,mBAAmBU,SAASlV,KAAKiU,UAAYzW,GAClDA,IACAwC,KAAKyU,eAAeS,SAASlV,KAAKiU,UAAYzW,GAC9CA,IACAwC,KAAK0U,SAASQ,SAASlV,KAAKiU,UAAYzW,GACxCA,IACAwC,KAAK2U,YAAYO,SAASlV,KAAKiU,UAAYzW,GAC3CA,IACAwC,KAAK4U,oBAAoBM,SAASlV,KAAKiU,UAAYzW,GACnDA,IACAwC,KAAK6U,gBAAgBK,SAASlV,KAAKiU,UAAYzW,GAC/CA,IACAwC,KAAK8U,WAAWI,SAASlV,KAAKiU,UAAYzW,GAC1CA,IACAwC,KAAK+U,eAAeG,SAASlV,KAAKiU,UAAYzW,GAC9CA,IACAwC,KAAKgV,qBAAqBE,SAASlV,KAAKiU,UAAYzW,GACpDA,IACAwC,KAAKiV,iBAAiBC,SAASlV,KAAKiU,UAAYzW,GAChDA,wFC5JJP,EAAOD,QALU,CACfiX,UAAW,GACXE,cAAe,mGCFjB,IAAAH,EAAA5P,EAAA9G,EAAA,KACA+G,EAAAD,EAAA9G,EAAA,iuBAEqB6P,cACnB,SAAAA,EAAY/H,EAAM6D,GAAe,IAAA3I,EAAA,mGAAAP,CAAAC,KAAAmN,IAC/B7M,EAAAgE,EAAAtE,MAAAmN,EAAA5I,WAAArG,OAAAsG,eAAA2I,IAAAxP,KAAAqC,KAAMoF,EAAM6D,KAEPwD,cAAgB,GACrBnM,EAAKkM,eAAiB,GAJSlM,wSAQ/BN,KAAK4F,aAAe5F,KAAKoF,KAAKC,IAAIgP,oCAGhCc,GAMF,OALAnV,KAAK4F,aAAaP,IAAI8P,GAAQ,GAC9BnV,KAAK4F,aAAawP,cAAc3U,QAAQ,SAAA4U,GACtCA,EAAYtO,YAAY,aAGnBoO,0DAIuBjV,GAC9B,IAAIoV,EAAmC,EAevC,OAbAtV,KAAK4F,aAAawP,cAAc3U,QAAQ,SAAA8U,GACtC,GAAIA,EAAM1J,KAAM,CACd,IAAI2J,EAAwBD,EAAM5V,OAAOqM,cAAcO,WAAoE,EAAvD5H,KAAKC,IAAI2Q,EAAM1Q,EAAI0Q,EAAM5V,OAAOgM,OAAO9G,EAAI3E,EAAO2E,IAGlH0Q,EAAMrJ,QAAQlC,gBAChBwL,GAAyBD,EAAMrJ,QAAQlC,cAAcmB,kBAGvDmK,GAAoCE,KAIjC7Q,KAAK+C,MAAyC,IAAnC4N,GAA4C,+DAI9D,IAAIG,EAAkC,EAEtCzV,KAAKwM,eAAe/L,QAAQ,SAAA8U,GAC1BE,GAAmCF,EAAMhJ,YAE3C,IAAImJ,EAA0B,EAG9B,OADwC,IAApCD,IAAuCC,EAA0B/Q,KAAK+C,MAAyC,IAAlC+N,EAA0CzV,KAAKoF,KAAK+C,OAAO2M,WAAWtM,MAAQnE,EAAA7B,QAAeO,UAAa,KAAO,IAAM,IACjM2S,uKCrDX,MAAA1B,KAAA1W,EAAA,2sBAQqB8P,cAMnB,SAAAA,EAAYhI,EAAM6D,GAAe,mGAAAlJ,CAAAC,KAAAoN,GAAA9I,EAAAtE,MAAAoN,EAAA7I,WAAArG,OAAAsG,eAAA4I,IAAAzP,KAAAqC,KACzBoF,EAAM6D,0SAQZ,IAAM0M,EAAS3V,KAAK4V,QAAQD,OAE5B3V,KAAK6V,YAAc,IAAIzT,OAAO0T,QAAQC,IAEtCJ,EAAOvG,GAAG,SAAUpP,KAAKgW,aAAchW,MACvC2V,EAAOvG,GAAG,WAAYpP,KAAKiW,eAAgBjW,MAC3C2V,EAAOO,KAAK,UAAWlW,KAAKmW,cAAenW,2CAUhCuP,EAAM6G,GACjBpW,KAAK6V,YAAYQ,aAAa,SAAU9G,EAAM6G,4CAS9CpW,KAAK6V,YAAYS,gDASjB,IAAMX,EAAS3V,KAAK4V,QAAQD,OAE5BA,EAAOY,IAAI,SAAUvW,KAAKwW,iBAAkBxW,MAC5C2V,EAAOY,IAAI,WAAYvW,KAAKiW,eAAgBjW,MAC5C2V,EAAOY,IAAI,UAAWvW,KAAKmW,cAAenW,MAE1CA,KAAK6V,YAAc,KACnB7V,KAAK2R,MAAQ,KACb3R,KAAK4V,QAAU,iCAQba,GACFA,EAAIP,KAAK,UAAWlW,KAAKgB,OAAQhB,MACjCA,KAAK6V,YAAYa,IAAID,uCAQXE,GACVA,EAAKlW,QAAQT,KAAKqF,IAAKrF,qCAQlByW,GACLA,EAAIF,IAAI,UAAWvW,KAAKgB,OAAQhB,MAChCA,KAAK6V,YAAYe,OAAOH,wKC/F5B,IAAApI,EAAAjK,EAAA9G,EAAA,IACA0J,EAAA5C,EAAA9G,EAAA,4lCAQqBgQ,cAKnB,SAAAA,EAAYrE,GAAe,IAAA3I,EAAA,OAAAP,EAAAC,KAAAsN,IACzBhN,EAAAgE,EAAAtE,MAAAsN,EAAA/I,WAAArG,OAAAsG,eAAA8I,IAAA3P,KAAAqC,KAAMiJ,KAOD4N,YAOLvW,EAAKwW,aAOLxW,EAAKyW,WAtBoBzW,aALa8B,OAAO8G,QAAQ8N,iDA8I7CF,GACR9W,KAAK8W,aAAeA,EACpB9W,KAAK6W,YAAc7W,KAAK8W,aAAazR,IAAIiI,EAAa2J,iBAAkB3J,EAAa4J,aAAa,uCAQxF5M,GAAwB1K,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAClC,IAAK0K,EAAOqF,UACV,OAAQ3P,KAAK6W,YAAYM,OAAOlR,QAAQlH,KACtC,KAAKuO,EAAa8J,oBACsC,IAA3C9M,EAAOlF,KAAKwD,MAAMyO,cAAcC,QAAwBhN,EAAOjK,QAAQgF,IAAIgJ,EAAA7L,QAAQ0B,OAAQ,CAAEhE,OAAQ,CAAE2E,EAAGyF,EAAOlF,KAAKwD,MAAMyO,cAAcE,UAErJ,MAEF,KAAKjK,EAAakK,kBAChBxX,KAAK+W,WAAWlP,UAAU6C,QAAQ9J,QAClC0J,EAAOjK,QAAQgF,IAAIgJ,EAAA7L,QAAQoB,QAAS,CAAE1D,OAAQF,KAAK+W,aAEnD,MAEF,KAAKzJ,EAAamK,mBAChBzX,KAAK+W,WAAWlP,UAAU6C,QAAQ9J,QAClC0J,EAAOjK,QAAQgF,IAAIgJ,EAAA7L,QAAQuB,SAAU,CAAE7D,OAAQF,KAAK+W,aAEpD,MAEF,KAAKzJ,EAAaoK,gBAChBpN,EAAOjK,QAAQgF,IAAIgJ,EAAA7L,QAAQmV,OAAQ,CAAEzX,OAAQF,KAAK+W,kDAcc,IAA9D7W,EAA8DN,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAArD,CAAEiI,UAAW,CAAED,KAAMZ,EAAAxE,QAAW2E,OAAS/B,KAAM,IAChE,GAAI,SAAUlF,GAAUA,IAAWA,EAAOkF,KAAKkF,OAAQ,CACrD,OAAQpK,EAAO2H,UAAUD,MACvB,KAAKZ,EAAAxE,QAAW2E,MACdnH,KAAK6W,YAAYM,OAAOS,WAAWtK,EAAa8J,gBAAgBS,UAAU,GAAK,KAE/E,MAEF,KAAK7Q,EAAAxE,QAAWgI,WACdxK,KAAK6W,YAAYM,OAAOS,WAAWtK,EAAakK,mBAAmBK,UAAU,IAAM,KAEnF,MAEF,KAAK7Q,EAAAxE,QAAWiI,YACdzK,KAAK6W,YAAYM,OAAOS,WAAWtK,EAAamK,oBAAoBI,UAAU,GAAK,KAEnF,MAEF,KAAK7Q,EAAAxE,QAAWuM,SACd/O,KAAK6W,YAAYM,OAAOS,WAAWtK,EAAaoK,iBAKpD1X,KAAK+W,WAAa7W,wCASpBF,KAAK6W,YAAYM,OAAOW,YAAW,wCAQnC9X,KAAK6W,YAAYM,OAAOW,YAAW,yCA/LnC,gBAAAC,GACE,SAAAb,IAAc,IAAA9L,EAAA,OAAArL,EAAAC,KAAAkX,IACZ9L,EAAA9G,EAAAtE,MAAAkX,EAAA3S,WAAArG,OAAAsG,eAAA0S,IAAAvZ,KAAAqC,KAAMsN,EAAa2J,oBAEdE,OAHO/L,EADhB,OAAA4M,EAAAd,EAAiC9U,OAAO6V,OAAxCvW,EAAAwV,EAAA,EAAAnY,IAAA,UAAAN,MAAA,WAQIuB,KAAKkY,KAAKC,MAAM7K,EAAakK,kBAAmB,oCAChDxX,KAAKkY,KAAKC,MAAM7K,EAAa8K,YAAa,iCAC1CpY,KAAKkY,KAAKC,MAAM7K,EAAamK,mBAAoB,qCACjDzX,KAAKkY,KAAKC,MAAM7K,EAAa8J,eAAgB,iCAC7CpX,KAAKkY,KAAKC,MAAM7K,EAAaoK,gBAAiB,iCAC9C1X,KAAKkY,KAAKC,MAAM7K,EAAa+K,cAAe,mCAC5CrY,KAAKkY,KAAKC,MAAM7K,EAAagL,sBAAuB,4CAdxD,CAAAvZ,IAAA,SAAAN,MAAA,WAkBIuB,KAAK4I,MAAM2P,iBAAiB,QAC5BvY,KAAKmX,OAASnX,KAAKqF,IAAI8S,MAAM,EAAG,EAAG7K,EAAa8J,gBAAgBS,UAAU,GAAK,KAAM3C,SAAS,OAnBlG,CAAAnW,IAAA,SAAAN,MAAA,WAuBIuB,KAAKmX,OAAOpO,YAAY/I,KAAK4I,MAAMyO,cAAcxS,EAAG7E,KAAK4I,MAAMyO,cAAcrR,OAvBjFkR,EAAA,4CAkCA,MAAO,qDASP,MAAO,uDASP,MAAO,2DASP,MAAO,qDASP,MAAO,qDASP,MAAO,mDASP,MAAO,6DASP,MAAO,y0BC1IU3J,cAKnB,SAAAA,EAAYtE,GAAe,IAAA3I,EAAA,mGAAAP,CAAAC,KAAAuN,IACzBjN,EAAAgE,EAAAtE,MAAAuN,EAAAhJ,WAAArG,OAAAsG,eAAA+I,IAAA5P,KAAAqC,KAAMiJ,KAMD6N,aAAe,GAPKxW,wPALW8B,OAAO8G,QAAQ8N,8CAoBjD5R,GAAwB,IAAlBoT,IAAkB5Y,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAC1B8F,QAAQC,IAAI,cAAeP,EAAKrH,MAChCiC,KAAK8W,aAAazR,IAAID,EAAKrH,KAAMqH,EAAMoT,qCAO/B1B,GACR9W,KAAK8W,aAAeA,wFCnCxB,IAAM/I,EAAQ,CACZ0K,KAAM3W,EAAQ,KAGhB7E,EAAOD,QAAU+Q,2ICJjB,IAAA1J,UAAAD,uBAAA9G,oBAAA,IACAob,OAAAtU,uBAAA9G,oBAAA,q0CAcqBmb,6BAMnB,SAAAA,KAAYE,EAAUC,GAAW,IAAAxN,EAAA,OAAArL,gBAAAC,KAAAyY,OAC/BrN,EAAA9G,2BAAAtE,MAAAyY,KAAAlU,WAAArG,OAAAsG,eAAAiU,OAAA9a,KAAAqC,KAAM2Y,KAODE,OAAS,CAAEC,IAAKF,EAAWG,MAAO,IAOvC3N,EAAKsK,wBAOLtK,EAAKjG,QAOLiG,EAAKjD,OAOLiD,EAAK4N,IAOL5N,EAAKrN,KAAOqN,EAAKnL,YAAYlC,KAO7BqN,EAAKd,OAOLc,EAAK6N,MAzD0B7N,0FAgEvB,IAAAE,EAAAtL,KACRA,KAAKkZ,gBACLlZ,KAAK6Y,OAAOE,MAAMtY,QAAQ,SAAAgW,GACpB,UAAWA,EACbnL,EAAK4M,KAAKzB,EAAI7O,MAAM6O,EAAI1X,IAAK,CAAC0X,EAAI0C,KAAM1C,EAAI2C,QACnC,UAAW3C,GACpBnL,EAAK4M,KAAKzB,EAAI7O,MAAM6O,EAAI1X,IAAK0X,EAAI0C,MACjC7N,EAAK4M,KAAKzB,EAAI7O,MAAM6O,EAAI1X,IAAM,KAAM0X,EAAI4C,QAExC/N,EAAK4M,KAAKzB,EAAI7O,MAAM6O,EAAI1X,IAAK0X,EAAI0C,QAKrCnZ,KAAKkY,KAAKC,MAAM,yBAA0B,kCAC1CnY,KAAKkY,KAAKC,MAAM,4BAA6B,qCAC7CnY,KAAKkY,KAAKC,MAAM,0BAA2B,mCAC3CnY,KAAKkY,KAAKC,MAAM,2BAA4B,4EAQ9B,IAAAmB,EAAAtZ,KACd,IAAK,IAAI4H,KAAQ5H,KAAK6Y,OAAOC,IAC3BJ,OAAAlW,QAAM+W,oBACJvZ,KAAK6Y,OAAOC,IAAIlR,GAChB,CAAEA,KAAMA,GACR,OACA,SAAC6O,EAAK+C,GACJ/C,EAAG,KAAW+C,EAAO5R,KACrB6O,EAAG,IAAUiC,OAAAlW,QAAMiX,qBAAqBhD,EAAI0C,MAC5CG,EAAKT,OAAOE,MAAMpY,KAAK8V,oCAWxBnM,GACLtK,KAAKsK,OAASA,EAAOoP,QAAQ,UAC7B1Z,KAAKmM,OAAOwN,SAEZ3Z,KAAK2R,MAAMiI,WAAW,eAEtB5Z,KAAK6Z,qBACL7Z,KAAK8Z,cACL9Z,KAAK+Z,iBACL/Z,KAAKga,oBACLha,KAAKmI,OAAOC,iBAGZpI,KAAKia,QAAQC,KAAKC,UAAU,EAAG,EAAGna,KAAKmI,OAAO2M,WAAWtM,MAAOxI,KAAKmI,OAAO2M,WAAWrM,QACvFzI,KAAKia,QAAQC,KAAKE,YAAYpa,KAAKsK,QACnCtK,KAAKia,QAAQC,KAAKG,gBAAe,GAEjCra,KAAKgI,QAAQsS,MAAMH,UACjB9V,UAAA7B,QAASO,UAAWsB,UAAA7B,QAASO,UAAW/C,KAAKmI,OAAO2M,WAAWtM,MAAQ,EAAInE,UAAA7B,QAASO,UACpF/C,KAAKmI,OAAO2M,WAAWrM,OAAS,EAAIpE,UAAA7B,QAASO,wDAUvB,WAApBsB,UAAA7B,QAASgB,QACXxD,KAAKia,QAAQC,KAAKnR,aACf1E,UAAA7B,QAASc,2BAA6Be,UAAA7B,QAASS,iCAAmCoB,UAAA7B,QAASO,WAC3FsB,UAAA7B,QAASc,2BAA6Be,UAAA7B,QAASW,kCAAoCkB,UAAA7B,QAASO,WAE/F/C,KAAKia,QAAQC,KAAKpR,QAChBzE,UAAA7B,QAASe,aAAauN,gBAAkB,GAAKzM,UAAA7B,QAASc,2BAA6Be,UAAA7B,QAASS,iCAAmCoB,UAAA7B,QAASO,UACxIsB,UAAA7B,QAASQ,oBAAsBqB,UAAA7B,QAASO,aAG1C/C,KAAKia,QAAQC,KAAKnR,YAChB1E,UAAA7B,QAASa,4BAA8BgB,UAAA7B,QAASO,UAChDsB,UAAA7B,QAASa,4BAA8BgB,UAAA7B,QAASO,WAElD/C,KAAKia,QAAQC,KAAKpR,QAChBzE,UAAA7B,QAASe,aAAauN,gBAAkB,EAAIzM,UAAA7B,QAASa,4BAA8BgB,UAAA7B,QAASO,UAC5FsB,UAAA7B,QAASQ,oBAAsBqB,UAAA7B,QAASO,kDAW5C/C,KAAKgZ,IAAMhZ,KAAKua,KAAKC,QAAQ,CAC3Bzb,IAAK2Z,OAAAlW,QAAMiX,qBAAqBzZ,KAAK6Y,OAAOC,IAAI2B,iBAAiBtB,MACjEuB,UAAWrW,UAAA7B,QAASO,UACpB4X,WAAYtW,UAAA7B,QAASO,YAGvB/C,KAAKmI,OAAOiM,gBAAkBpU,KAAKgZ,IAAI4B,mBACrC,kBACA5a,KAAKgZ,IAAI6B,gBAAgBnC,OAAAlW,QAAMiX,qBAAqBzZ,KAAK6Y,OAAOC,IAAIX,MAAM2C,MAAMC,WAAW5B,OAC3F,EAAG,GAELnZ,KAAKmI,OAAO2M,WAAa9U,KAAKgZ,IAAI4B,mBAChC,aACA5a,KAAKgZ,IAAI6B,gBAAgBnC,OAAAlW,QAAMiX,qBAAqBzZ,KAAK6Y,OAAOC,IAAIX,MAAM2C,MAAME,MAAM7B,OACtF,EAAG,GAELnZ,KAAKmI,OAAO4M,eAAiB/U,KAAKgZ,IAAI4B,mBACpC,iBACA5a,KAAKgZ,IAAI6B,gBAAgBnC,OAAAlW,QAAMiX,qBAAqBzZ,KAAK6Y,OAAOC,IAAIX,MAAM2C,MAAME,MAAM3B,QACtF,EAAG,2DASU,IAAA4B,OAAAjb,KACXM,MAAQN,KAEZA,KAAKgZ,IAAIkC,QAAQza,QAAQ,SAAAyF,OACvBA,MAAMgV,QAAQza,QAAQ,SAAA0a,SAEpBF,OAAKE,QAAQpd,MAAQqd,KAAK,OAASD,QAAQvT,KAAO,WAAauT,QAAQtW,EAAIsW,QAAQ3S,MAAQ,GAAK,MAAQ2S,QAAQnV,EAAImV,QAAQ1S,OAAS,GAAK,MAC1IwS,OAAKE,QAAQpd,MAAM2b,QAAQyB,QAAQpd,sDAWvCiC,KAAKmI,OAAO8M,iBAAiBnW,OAAO,EAClC,EACA,0BACAuc,gBAAgB,GAAGxD,UAAU,EAAG,GAElC7X,KAAKmI,OAAO8M,iBAAiBnW,OAAO,EAClC,EACA,2BACAuc,gBAAgB,GAAGxD,UAAU,EAAG,GAElC7X,KAAKmI,OAAO8M,iBAAiBnW,OAC3BkB,KAAKia,QAAQC,KAAK1R,MAAQnE,UAAA7B,QAASO,UACnC,EACA,4BACAsY,gBAAgB,GAAGxD,UAAU,EAAG,GAElC7X,KAAKmI,OAAO8M,iBAAiBnW,OAC3B,EACAkB,KAAKia,QAAQC,KAAKzR,OAASpE,UAAA7B,QAASO,UACpC,6BACAsY,gBAAgB,GAAGxD,UAAU,EAAG,oCAQlC7X,KAAKsb,+BAGLtb,KAAKub,SAASC,KAAK/a,QAAQ,SAAA0a,GACrB,YAAaA,GACfA,EAAQ9a,QAAQc,kEAWpBnB,KAAK0V,wBAA0B1V,KAAK4F,aAAa6V,mCACjDzb,KAAKmI,OAAO4M,eAAe2G,SAAS,EAAI1b,KAAK0V,mCAtQftT,OAAO6V,+SCfzC,IAAM5V,EAAQ,CACZkX,oBAAqB,SAAC9C,EAAK+C,EAAQmC,EAAW3Q,GAC5C,GAAIzK,MAAMC,QAAQiW,GAChB,IAAK,IAAIjZ,EAAI,EAAGA,EAAIiZ,EAAI5W,OAAQrC,IAC9B6E,EAAMkX,oBAAoB9C,EAAIjZ,GAAIgc,EAAQmC,EAAW3Q,QAElD,GAAY,OAARyL,GAA+B,WAAfmF,EAAOnF,GAChC,GAAIkF,KAAalF,EACfzL,EAASyL,EAAK+C,QAEd,IAAK,IAAIqC,KAAQpF,EACfpU,EAAMkX,oBAAoB9C,EAAIoF,GAAOrC,EAAQmC,EAAW3Q,IAKhEyO,qBAAsB,SAACN,GACrB,IAAI2C,EAA8B3C,EAAK4C,YAAY,KAAO,EACtDC,EAA6B7C,EAAK4C,YAAY,KAGlD,OADqC,IAAjCD,IAAoCA,EAA8B,IAClC,IAAhCE,GAA2C,EAChC7C,EAAKvL,MAAMkO,EAA6BE,KAM3D/e,EAAOD,QAAUqF,mBC5BjB,IAAM2L,EAAU,CACdrK,QAAS7B,EAAQ,GACjBF,WAAYE,EAAQ,GACpBma,WAAYna,EAAQ,IACpB+I,QAAS/I,EAAQ,IACjBoa,eAAgBpa,EAAQ,IACxBqa,WAAYra,EAAQ,IACpBoF,OAAQpF,EAAQ,IAGlB7E,EAAOD,QAAUgR,mBCVjB,IAAMiO,EAAa,CACjBG,YAAata,EAAQ,IACrBua,OAAQva,EAAQ,KAGlB7E,EAAOD,QAAUif,kGCLjB,MAAAK,KAAAhf,EAAA,qiBAEqB8e,cACnB,SAAAA,EAAYhX,EAAMP,EAAGmB,EAAGC,EAASC,GAAO,mGAAAnG,CAAAC,KAAAoc,GAAA9X,EAAAtE,MAAAoc,EAAA7X,WAAArG,OAAAsG,eAAA4X,IAAAze,KAAAqC,KAChCoF,EAAMP,EAAGmB,EAAGC,EAASC,gYCJ/B,MAAAoW,KAAAhf,EAAA,mnCAEqB+e,cACnB,SAAAA,EAAYjX,EAAMP,EAAGmB,EAAGC,GAAS,IAAA3F,EAAA,mGAAAP,CAAAC,KAAAqc,IAC/B/b,EAAAgE,EAAAtE,MAAAqc,EAAA9X,WAAArG,OAAAsG,eAAA6X,IAAA1e,KAAAqC,KAAMoF,EAAMP,EAAGmB,EAAGC,EAAS,iBAEtB0J,WAAY,EAHcrP,0SAO/BwG,EAAAuV,EAAAjd,UAAAmF,WAAArG,OAAAsG,eAAA6X,EAAAjd,WAAA,SAAAY,MAAArC,KAAAqC,MAEAA,KAAKoF,KAAKwD,MAAMwG,GAAG,cAAe,SAAUC,GAC1CrP,KAAKoF,KAAKD,QAAQoX,YAAYvc,OAC7BA,4FCdP,IAAMkc,EAAiB,CACrBM,cAAe1a,EAAQ,KAGzB7E,EAAOD,QAAUkf,kGCJjB,MAAApW,KAAAxI,EAAA,knCAeqBmf,cASnB,SAAAA,EAAYrX,EAAMP,EAAGmB,EAAGC,EAASC,GAAO,IAAAwH,EAAA,mGAAA3N,CAAAC,KAAAyc,GAAAnY,EAAAtE,MAAA0N,EAAA+O,EAAAlY,WAAArG,OAAAsG,eAAAiY,IAAA9e,KAAA8G,MAAAiJ,EAAA,CAAA1N,MAAA2N,OAAApN,MAAAnB,UAAAwO,MAAAjQ,KAC7BiC,WAD6B,EAClB,8SAIpBkH,EAAA2V,EAAArd,UAAAmF,WAAArG,OAAAsG,eAAAiY,EAAArd,WAAA,SAAAY,MAAArC,KAAAqC,4FC7BJ,IAAMmc,EAAa,CACjBpW,UAAWjE,EAAQ,GACnB4a,aAAc5a,EAAQ,IACtB6a,eAAgB7a,EAAQ,IACxB8a,eAAgB9a,EAAQ,KAG1B7E,EAAOD,QAAUmf,mBCPjB,IAAMO,EAAe,CACnBlR,YAAa1J,EAAQ,KAGvB7E,EAAOD,QAAU0f,mBCJjB,IAAMC,EAAiB,CACrBE,cAAe/a,EAAQ,KAGzB7E,EAAOD,QAAU2f,kGCJjB,MAAApR,KAAAjO,EAAA,oiBAcqBuf,cAoBnB,SAAAA,EAAYzX,EAAMP,EAAGmB,EAAGC,EAASG,EAAed,EAAce,EAAaC,EAAuBC,EAAkBC,EAAoBC,EAA8BC,EAA0BC,EAAkCC,EAAkCC,GAAwB,mGAAA9G,CAAAC,KAAA6c,GAAAvY,EAAAtE,MAAA6c,EAAAtY,WAAArG,OAAAsG,eAAAqY,IAAAlf,KAAAqC,KAExRoF,EACAP,EAAGmB,EACHC,EACA,sBACA,EACAG,EACAd,EACAe,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,iTCnDN,IAAM+V,EAAiB,CACrBE,cAAehb,EAAQ,KAGzB7E,EAAOD,QAAU4f,kGCJjB,MAAArR,KAAAjO,EAAA,oiBAcqBwf,cAoBnB,SAAAA,EAAY1X,EAAMP,EAAGmB,EAAGC,EAASG,EAAed,EAAce,EAAaC,EAAuBC,EAAkBC,EAAoBC,EAA8BC,EAA0BC,EAAkCC,EAAkCC,GAAwB,IAAAvG,EAAA,mGAAAP,CAAAC,KAAA8c,IAC1Rxc,EAAAgE,EAAAtE,MAAA8c,EAAAvY,WAAArG,OAAAsG,eAAAsY,IAAAnf,KAAAqC,KACEoF,EACAP,EAAGmB,EACHC,EACA,sBACA,EACAG,EACAd,EACAe,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,KAGGqB,YAAY,GApByQ5H","file":"the-darkest-lib.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"TDLib\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"TDLib\"] = factory();\n\telse\n\t\troot[\"TDLib\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 23);\n","/**\n * Class representing a TDLAction.\n * @memberof TDLib.Components.Actions\n * @since 1.0.0\n */\nexport default class Action {\n  /**\n   * Start a new TDLAction.\n   * @param {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @param {TDLSprite} actor - The actor who performs the action.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   */\n  constructor(invoker, actor, config = {}) {\n    /**\n     * The invoker of the action.\n     * @type {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction}\n     * @since 1.0.0\n     */\n    this.invoker = invoker;\n\n    /**\n     * The name of the action.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.name = this.constructor.name;\n\n    /**\n     * The actor who performs the action.\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.actor = actor;\n\n    /**\n     * The target of the action.\n     * @type {Object|TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.target = config.target;\n\n    /**\n     * The config object for the action.\n     * @type {Object}\n     * @since 1.0.0\n     */\n    this.config = config;\n\n    /**\n     * The queue of actions.\n     * @type {Array}\n     * @private\n     * @since 1.0.0\n     */\n    this._queue = [];\n\n    /**\n     * Tells if the action has been paused.\n     * @type {boolean}\n     * @since 1.0.0\n     */\n    this.isPaused = false;\n  }\n\n  /**\n   * Add one or more new actions to the queue.\n   * @param {TDLib.Components.Actions.TDLAction|TDLib.Components.Actions.TDLAction[]|TDLib.Components.Actions.TDLAction.BaseAction|TDLib.Components.Actions.TDLAction.BaseAction[]} actions - The new actions to add.\n   * @since 1.0.0\n   */\n  addActions(actions) {\n    if (Array.isArray(actions)) {\n      actions.forEach(action => {\n        this._queue.push(action);\n      });\n    } else this._queue.push(actions);\n  }\n\n  /**\n   * The blank action to create new composed and complex actions.\n   * @typedef {TDLib.Components.Actions.TDLAction.BaseAction}\n   *\n   * @property {TDLib.Components.ActionComponent|TDLib.Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @property {Function} startCallback - The callback to execute at the beginning of the action.\n   * @property {Function} [finishCallback] - The callback to execute at the end of the action.\n   * @property {Function} [updateCallback]  - The callback to execute at every update loop.\n   * @property {Function} [resumeCallback=startCallback] - The callback to execute when the action is paused.\n   * @property {Function} [pauseCallback=finishCallback]  - The callback to execute when the action is resumed.\n   * @since 1.0.0\n   */\n  static get BaseAction() {\n    return class BaseAction {\n      constructor(invoker, startCallback, finishCallback = () => { }, updateCallback = () => { }, resumeCallback = startCallback, pauseCallback = finishCallback) {\n        this.invoker = invoker;\n\n        this.startCallback = startCallback;\n        this.finishCallback = finishCallback;\n        this.updateCallback = updateCallback;\n        this.resumeCallback = resumeCallback;\n        this.pauseCallback = pauseCallback;\n\n        this.isPaused = false;\n      }\n\n      start() {\n        this.startCallback();\n      }\n\n      finish() {\n        this.finishCallback();\n        this.invoker.remove();\n      }\n\n      abort() {\n        this.finishCallback();\n      }\n\n      resume() {\n        this.isPaused = false;\n        this.resumeCallback();\n      }\n\n      pause() {\n        this.pauseCallback();\n        this.isPaused = true;\n      }\n\n      update() {\n        this.updateCallback();\n      }\n    };\n  }\n\n  /**\n   * Abort an uncompleted action.\n   * @private\n   * @since 1.0.0\n   */\n  abort() {\n    if (this._queue.length > 0) this._queue[0].abort();\n  }\n\n  /**\n   * Start an action.\n   * @private\n   * @since 1.0.0\n   */\n  start() {\n    if (this._queue.length > 0) this._queue[0].start();\n  }\n\n  /**\n   * Finish a completed action.\n   * @private\n   * @since 1.0.0\n   */\n  finish() {\n    if (this._queue.length > 0) this._queue[0].finish();\n  }\n\n  /**\n   * Remove a completed action from the queue.\n   * @private\n   * @since 1.0.0\n   */\n  remove() {\n    if (this._queue.length > 0) this._queue.shift();\n\n    if (this._queue.length <= 0) this.invoker.remove();\n    else this._queue[0].start();\n  }\n\n  /**\n   * Pause an action.\n   * @private\n   * @since 1.0.0\n   */\n  pause() {\n    if (this._queue.length > 0) {\n      this._queue[0].pause();\n      this.isPaused = true;\n    }\n  }\n\n  /**\n   * Resume a paused action.\n   * @private\n   * @since 1.0.0\n   */\n  resume() {\n    if (this._queue.length > 0) {\n      this.isPaused = false;\n      this._queue[0].resume();\n    }\n  }\n\n  /**\n   * Update the currently performed action.\n   * @private\n   * @since 1.0.0\n   */\n  update() {\n    if (this._queue.length > 0) this._queue[0].update();\n  }\n}\n","import CONST from './const';\n\nvar Behaviours = {\n  Behaviour: require('./Behaviour'),\n  Examinable: require('./examinable/Examinable'),\n  Interactive: require('./interactive/Interactive'),\n  Observable: require('./observable/Observable'),\n  Talkable: require('./talkable/Talkable'),\n  Inventory: require('./inventory/Inventory')\n};\n\nBehaviours = Phaser.Utils.Objects.Extend(false, Behaviours, CONST);\nmodule.exports = Behaviours;\n","const CONST = {\n  VERSION: '1.0.0',\n  PHASER_VERSION: Phaser.VERSION,\n  LEFT: '_left',\n  RIGHT: '_right'\n};\n\nmodule.exports = CONST;\n","var Settings = {\n  GAME: '',\n  TILE_SIZE: 48,\n  ROOM_HEIGHT_IN_TILE: 6,\n  INVENTORY_WIDTH_IN_TILES_MOBILE: 1.25,\n  INVENTORY_WIDTH_IN_TILES_DESKTOP: 0,\n  INVENTORY_HEIGHT_IN_TILES_MOBILE: 0,\n  INVENTORY_HEIGHT_IN_TILES_DESKTOP: 1,\n  ROOM_FRAME_IN_TILES_DESKTOP: 0.5,\n  ROOM_FRAME_IN_TILES_MOBILE: 0.25,\n  SCREEN_PROPS: {},\n  DEVICE: 'Desktop'\n};\n\nmodule.exports = Settings;\n","/**\n * The namespace of components.\n * @namespace TDLib.Components\n */\n\n/**\n * Class representing a generic TDLComponent. A TDLComponent extends the members and methods of a TDLSprite which uses it.\n * @memberof TDLib.Components\n */\nexport default class Component {\n  /**\n   * Creates a new TDLComponent.\n   * @param {TDLib.Sprites.TDLSprite} gameObject - The TDLSprite which owns the component.\n   */\n  constructor(gameObject) {\n\n    /**\n     * The name of the component.\n     * @type {string}\n     */\n    this.name = this.constructor.name;\n\n    /**\n     * The TDLSprite which owns the component.\n     * @type {TDLib.Sprites.TDLSprite}\n     */\n    this.gameObject = gameObject;\n  }\n}\n","const Actions = {\n  Action: require('./Action'),\n  Examine: require('./examine/Examine'),\n  FaceTo: require('./face-to/FaceTo'),\n  Idle: require('./idle/Idle'),\n  Interact: require('./interact/Interact'),\n  Observe: require('./observe/Observe'),\n  RunTo: require('./run-to/RunTo'),\n  WalkTo: require('./walk-to/WalkTo')\n};\n\nmodule.exports = Actions;\n","import Action from '../Action';\nimport CONST from '../../../const';\nimport Settings from './Settings';\n\nexport default class FaceTo extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      new Action.BaseAction(\n        this,\n        () => {\n          if (Math.abs(this.actor.x - this.target.x) > Settings.MICRO_MOVEMENT_RADIUS) {\n            if (this.actor.facing === CONST.RIGHT) {\n              if (this.actor.x > this.target.x) {\n                this.actor.facing = CONST.LEFT;\n                this.actor.setFlipX(true);\n                // this.actor.anims.play('idleLeft');\n              }\n            } else if (this.actor.facing === CONST.LEFT) {\n              if (this.actor.x < this.target.x) {\n                this.actor.facing = CONST.RIGHT;\n                this.actor.setFlipX(false);\n                // this.actor.anims.play('idleRight');\n              }\n            }\n          }\n          this.finish();\n        }\n      )\n    );\n  }\n}\n","import Action from '../actions/Action';\n\n/**\n * Class representing the behaviour of a sprite.\n * @memberof TDLib.Components.SpriteBehaviours\n * @since 1.0.0\n */\nexport default class Behaviour {\n  /**\n   * Create a SpriteBehaviour.\n   * @param {TDLib.Components.SpriteBehaviourComponent} component - The component which has invoked the behaviour.\n   */\n  constructor(component) {\n    /**\n     * The component which has invoked the behaviour.\n     * @type {TDLib.Components.SpriteBehaviourComponent}\n     * @since 1.0.0\n     */\n    this.component = component;\n\n    /**\n     * The global cursor manager.\n     * @type {TDLib.Plugins.GlobalPlugins.CursorManager}\n     * @since 1.0.0\n     */\n    this.cursors = this.component.gameObject.room.cursors;\n\n    /**\n     * The sprite which has invoked the behaviour.\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.gameObject = this.component.gameObject;\n\n    /**\n     * The room where the gameObject lives.\n     * @type {TDLib.Rooms.TDLRoom}\n     * @since 1.0.0\n     */\n    this.room = this.component.gameObject.room;\n\n    this.add();\n  }\n\n  /**\n   * Set the gameObject as interactive.\n   * @since 1.0.0\n   */\n  add() {\n    if (this.component.pixelPerfect === null) this.component.gameObject.setInteractive();\n    else {\n      this.component.gameObject.setInteractive(\n        {\n          pixelPerfect: true,\n          alphaTolerance: this.component.pixelPerfect.alphaTolerance,\n          draggable: false\n        }\n      );\n    }\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Action.BaseAction(\n      invoker,\n      () => {\n        console.log('Sono una generica action dei behaviour');\n        invoker.finish();\n      }\n    );\n  }\n\n  checkLight(value) {\n    if (this.room.lightSources.calculateLightsContribuitePoint(this.gameObject) >= value) return true;\n    return false;\n  }\n}\n","import Sprite from '../Sprite';\n\n/**\n * The world items namespace.\n * @namespace TDLib.Sprites.WorldItems\n * @since 1.0.0\n */\n\n/**\n * Class representing a WorldItem.\n * @extends TDLib.Sprites.Sprite\n * @memberof TDLib.Sprites.WorldItems\n * @since 1.0.0\n */\nexport default class WorldItem extends Sprite {\n  /**\n   * Create a WorldObject.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [layer=null] - The key of the layer which will contain the sprite.\n   * @param {boolean} [hasBody=true] - Specify if the sprite has physics.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   */\n  constructor(room, x, y, texture, layer, hasBody, behaviourType, pixelPerfect, observeText, examineOrInteractText, blockExamineText, noLightObserveText, noLightExamineOrInteractText, examineOrInteractOffsetX, examineOrInteractThresholdRadius, minLightLevelToExamineOrInteract, minLightLevelToObserve) {\n    super(\n      room,\n      x, y,\n      texture,\n      layer,\n      hasBody,\n      behaviourType,\n      pixelPerfect,\n      observeText,\n      examineOrInteractText,\n      blockExamineText,\n      noLightObserveText,\n      noLightExamineOrInteractText,\n      examineOrInteractOffsetX,\n      examineOrInteractThresholdRadius,\n      minLightLevelToExamineOrInteract,\n      minLightLevelToObserve\n    );\n  }\n\n  create() {\n    super.create();\n    this.setPipeline('Light2D'); // Da spostare in TDLSprite non appena il player supporterà la Light2D\n  }\n}\n","import Behaviours from '../sprites/behaviours';\nimport BehaviourComponent from '../components/BehaviourComponent';\n\n/**\n * The Darkest Lib.\n * @namespace TDLib\n * @since 1.0.0\n */\n\n/**\n * The actions namespace.\n * @namespace TDLib.Sprites\n * @since 1.0.0\n */\n\n/**\n * Class representing a TDLSprite.\n * @extends Phaser.Physics.Arcade.Sprite\n * @memberof TDLib.Sprites\n * @since 1.0.0\n */\nexport default class Sprite extends Phaser.Physics.Arcade.Sprite {\n  /**\n   * Create a TDLSprite.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [layer=null] - The key of the layer which will contain the sprite.\n   * @param {boolean} [hasBody=true] - Specify if the sprite has physics.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   * @param {boolean} [precisePosition=false] - Specify if to examine or interact with the sprite it's required to be precisely at the examineOrInteractPoint. (Probably not needed)\n   */\n  constructor(\n    room,\n    x, y,\n    texture,\n    layer = null,\n    hasBody = true,\n    behaviourType = Behaviours.INERT,\n    pixelPerfect = null,\n    observeText = Behaviours.DEFAULT_OBSERVE_TEXT,\n    examineOrInteractText = Behaviours.DEFAULT_EXAMINE_OR_INTERACT_TEXT,\n    blockExamineText = null,\n    noLightObserveText = Behaviours.DEFAULT_NO_LIGHT_OBSERVE_TEXT,\n    noLightExamineOrInteractText = Behaviours.DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT,\n    examineOrInteractOffsetX = 0,\n    examineOrInteractThresholdRadius = 0,\n    minLightLevelToExamineOrInteract = Behaviours.DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT,\n    minLightLevelToObserve = Behaviours.DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE\n\n  ) {\n    super(room, x, y, texture);\n\n    /**\n     * The room where the sprite is created.\n     * @type {TDLib.Rooms.TDLRoom}\n     * @since 1.0.0\n     */\n    this.room = room;\n\n    /**\n     * The name of the sprite, to map it in the room. Usually it's obtained by Tiled.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.name;\n\n    /**\n     * The unique key of the sprite, composed by the sprite type and a 4 digits random integer number.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.key = this.constructor.name + (Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000);\n\n    /**\n     * The type of the sprite.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.type = this.constructor.name;\n\n    /**\n     * The sprite behaviour component instance.\n     * @type {TDLib.Components.SpriteBehaviourComponent}\n     * @since 1.0.0\n     */\n    this.behaviour = new BehaviourComponent(this, behaviourType, pixelPerfect);\n\n    /**\n     * The text which appears when observing the sprite.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.observeText = observeText;\n\n    /**\n * The text which appears when examine or interact with the sprite.\n     * @type {string}\n     * @since 1.0.0\n */\n    this.examineOrInteractText = examineOrInteractText;\n\n    /**\n     * If not null it's the blocking text which appears the first time the sprite is examined.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.blockExamineText = blockExamineText;\n\n    /**\n     * The text which appears when observing the sprite when the diffused light is not sufficient.\n         * @type {string}\n         * @since 1.0.0\n     */\n    this.noLightObserveText = noLightObserveText;\n\n    /**\n * The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.noLightExamineOrInteractText = noLightExamineOrInteractText;\n\n    /**\n     * The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n     */\n    this.examineOrInteractOffsetX = examineOrInteractOffsetX;\n\n    /**\n     * The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n         */\n    this.examineOrInteractThresholdRadius = examineOrInteractThresholdRadius;\n\n    /**\n     * The minimum value of diffused light to examine or interact with the sprite.\n         * @type {number}\n         * @since 1.0.0\n         */\n    this.minLightLevelToExamineOrInteract = minLightLevelToExamineOrInteract;\n\n    /**\n * The minimum value of diffused light to observe the sprite.\n     * @type {number}\n     * @since 1.0.0\n     */\n    this.minLightLevelToObserve = minLightLevelToObserve;\n\n    this.room.add.existing(this);\n    this.room.updates.add(this);\n    if (hasBody) {\n      this.room.physics.add.existing(this);\n      this.setCollideWorldBounds(true);\n      this.setGravityY(10000);\n    }\n\n    if (layer != null) {\n      if (layer in this.room.layers) {\n        this.room.layers[layer].add(this);\n        this.room.layers.setLayersDepth();\n      } else console.warn('ALERT: layer not found for object', this);\n    }\n\n    this.create();\n  }\n\n  /**\n   * The create function is executed once, immediately after the initialization of the sprite.\n   * @since 1.0.0\n   */\n  create() {\n    console.log('Created:', this.key, '- Type:', this.type, '- Behaviour:', this.behaviour.type);\n  }\n\n  /**\n   * The update is executed at every cycle of the game loop.\n   * @since 1.0.0\n   */\n  update() {\n\n  }\n\n  /**\n   * Set the name property of a sprite.\n   * @param {string} value - The name which is used to map a sprite in the room.\n   * @return {TDLib.Sprites.TDLSprite}\n   * @since 1.0.0\n   */\n  setName(value) {\n    this.name = value;\n    return this;\n  }\n\n  // Poichè è stata aggiunta la pixel perfect collision, valutare l'utilità di questa funzione!\n  setHitAreaSize(width = this.width, height = this.height, offsetX = 0, offsetY = 0) {\n    this.input.hitArea.setSize(width, height);\n    this.input.hitArea.setPosition(((this.width - width) / 2) + offsetX, ((this.height - height) / 2) + offsetY);\n  }\n}\n","/**\n * The plugins namespace.\n * @namespace TDLib.Plugins\n * @since 1.0.0\n */\n\n/**\n * The global plugins namespace.\n * @namespace TDLib.Plugins.GlobalPlugins\n * @since 1.0.0\n */\n\n/**\n * The room plugins namespace.\n * @namespace TDLib.Plugins.RoomPlugins\n * @since 1.0.0\n */\n\n/**\n * Class representing a plugin which manages a room.\n * @extends Phaser.Plugins.ScenePlugin\n * @memberof TDLib.Plugins\n * @since 1.0.0\n */\nexport default class Manager extends Phaser.Plugins.ScenePlugin {\n  /**\n   * Create a TDLRoomPlugin.\n   * @param {TDLib.Rooms.Room|Phaser.Scene} room - The room which contains the plugin.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the plugin manager.\n   */\n  constructor(room, pluginManager) {\n    super(room, pluginManager);\n\n    /**\n     * The room containing this plugin.\n     * @type {TDLib.Rooms.Room}\n     * @since 1.0.0\n     */\n    this.room = room;\n  }\n}\n","import Action from '../Action';\nimport FaceTo from '../face-to/FaceTo';\nimport Settings from './Settings';\n\nexport default class WalkTo extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new FaceTo(this, this.actor, this.config),\n        new Action.BaseAction(\n          this,\n          () => {\n            if (Math.abs(this.actor.x - this.target.x) > Settings.MICRO_MOVEMENT_RADIUS) {\n              if (this.actor.x < this.target.x) {\n                this.actor.anims.play('walk');\n                // this.actor.anims.play('walkRight');\n                this.actor.body.setVelocity(Settings.WALK_VELOCITY);\n              } else if (this.actor.x > this.target.x) {\n                this.actor.anims.play('walk');\n                // this.actor.anims.play('walkLeft');\n                this.actor.body.setVelocity(-Settings.WALK_VELOCITY);\n              }\n            } else {\n              this.finish();\n            }\n          },\n          () => {\n            this.actor.body.setVelocity(0);\n          },\n          () => {\n            if ((this.actor.x - this.target.x) * this.actor.body.velocity.x > 0) this.finish();\n          }\n        )\n      ]\n    );\n  }\n}\n","import Component from './Component';\nimport Effects from '../sprites/effects';\nimport LightSource from '../sprites/world-items/light-sources/LightSource';\n\nexport default class EffectComponent extends Component {\n  constructor(gameObject) {\n    super(gameObject);\n\n    this.previousEffects = [];\n\n    this.currentEffect = null;\n  }\n\n  play(key, config) {\n    if (this.currentEffect) this.stop();\n\n    if (key in Effects) this.currentEffect = new Effects[key](this, config);\n    else if (key in Effects.LightEffects) {\n      if (this.gameObject instanceof LightSource) this.currentEffect = new Effects.LightEffects[key](this, config);\n      else console.log(key + ' can only be run by a LightSource');\n    } else {\n      console.log('No effect with key: ', key);\n    }\n\n    if (this.currentEffect) this.currentEffect.play();\n  }\n\n  stop() {\n    if (this.currentEffect) {\n      this.previousEffects.push(this.currentEffect);\n      this.currentEffect.stop();\n      this.currentEffect = null;\n      console.log(this.previousEffects);\n    }\n  }\n}\n","const Components = {\n  Component: require('./Component'),\n  ActionComponent: require('./ActionComponent'),\n  BehaviourComponent: require('./BehaviourComponent'),\n  EffectComponent: require('./EffectComponent')\n};\n\nmodule.exports = Components;\n","import Component from './Component';\nimport Behaviours from '../sprites/behaviours';\n\n/**\n * The behaviours namespace.\n * @namespace TDLib.Components.SpriteBehaviours\n * @since 1.0.0\n */\n\n/**\n * Class representing a component which determines the behaviour of every sprite.\n * @extends TDLib.Components.TDLComponent\n * @memberof TDLib.Components\n * @since 1.0.0\n */\nexport default class BehaviourComponent extends Component {\n  /**\n   * Create a new SpriteBehaviourComponent\n   * @param {TDLib.Sprites.TDLSprite} gameObject - The sprite which implements the component.\n   * @param {string} type - The type of behaviour of the gameObject.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   */\n  constructor(gameObject, type, pixelPerfect) {\n    super(gameObject);\n\n    /**\n     * A reference to the player in the current room.\n     * @type {TDLib.Sprites.Characters.Players.Player}\n     * @since 1.0.0\n     */\n    this.player;\n    (typeof this.gameObject.room.player === 'undefined') ? this.player = this.gameObject : this.player = this.gameObject.room.player;\n\n    /**\n     * The type of behaviour of the gameObject.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.type = type;\n\n    /**\n     * If not null enable the pixel perfect pointer hit for the sprite.\n     * @type {string}\n     * @since 1.0.0\n     */\n    this.pixelPerfect = pixelPerfect;\n\n    this._addBehaviours();\n  }\n\n  /**\n   * Select the appropriate behaviours for the gameObject.\n   * @private\n   * @since 1.0.0\n   */\n  _addBehaviours() {\n    // Se l'oggetto è osservabile (cioè esaminabile o interagibile) setto il cursore appropriato\n    if (this.type === Behaviours.EXAMINABLE || this.type === Behaviours.INTERACTIVE) {\n      this.observe = new Behaviours.Observable(this);\n      if (this.type === Behaviours.EXAMINABLE) this.examine = new Behaviours.Examinable(this);\n      else if (this.type === Behaviours.INTERACTIVE) this.interact = new Behaviours.Interactive(this);\n    }\n  }\n}\n","const Effects = {\n  Effect: require('./Effect'),\n  LightEffects: require('./light-effects')\n};\n\nmodule.exports = Effects;\n","import EffectComponent from '../../components/EffectComponent';\n\nexport default class Effect {\n  constructor(invoker, config = {}) {\n\n    this.invoker = invoker;\n\n    this.config = config;\n\n    this.gameObject = invoker.gameObject;\n\n    this.name = this.constructor.name;\n  }\n\n  play(callback = () => { }) {\n    if (this.invoker instanceof EffectComponent) {\n      callback();\n      console.log(this.name + 'Effect started');\n    } else console.log('Effects can only be played by the EffectComponent');\n  }\n\n  stop(callback = () => { }) {\n    if (this.invoker instanceof EffectComponent) {\n      callback();\n      console.log(this.name + 'Effect stopped');\n    } else console.log('Effects can only be stopped by the EffectComponent');\n  }\n}\n","import Effect from '../Effect';\n\nexport default class LightEffect extends Effect {\n  constructor(invoker, config, contributeFactor = 1) {\n    super(invoker, config);\n\n    this.contributeFactor = contributeFactor;\n  }\n\n  play(callback) {\n    super.play(() => {\n      this.stopped = false;\n      callback();\n    });\n  }\n\n  stop(callback) {\n    super.stop(() => {\n      this.stopped = true;\n      callback();\n    });\n  }\n}\n","import WorldItem from '../WorldItem';\nimport Behaviours from '../../behaviours';\nimport EffectComponent from '../../../components/EffectComponent';\n\nexport default class LightSource extends WorldItem {\n  /**\n   * constructor of the class\n   * @param {Room} room - Room in which will be created the LightSource.\n   * @param {number} x - X position of the sprite.\n   * @param {number} y - Y position of the sprite.\n   * @param {string} texture - Name of the sprite for the LightSource.\n   * @param {string} layer - Name of the Layer in which will be put the LightSource.\n   * @param {Object} graphicLightConfig - Configuration of the graphic light of the LightSource.\n   * @param {number} graphicLightConfig.intensity - Intensity of the graphic light.\n   * @param {number} graphicLightConfig.radius - Radius of the graphic light.\n   * @param {Object} diffusedLightConfig - Configuration of the diffused light of the LightSource.\n   * @param {number} diffusedLightConfig.intensity - Intensity of the diffused light.\n   * @param {number} diffusedLightConfig.radius - Radius of the diffused light.\n   * @param {Object} offset - Offset of the graphic light respect the center of the sprite.\n   * @param {number} offset.x - X offset.\n   * @param {number} offset.y - Y offset.\n   * @param {Array} allowedBehaviours - List of names of the allowed Behaviour for this light\n   * @param {boolean} [isOn=true] - Light created as switched on or off.\n   */\n  constructor(room, x, y, texture, layer, graphicLightConfig, diffusedLightConfig, offset, allowedBehaviours, isOn = true) {\n    super(room, x, y, texture, layer, true, Behaviours.EXAMINABLE);\n\n    this.setGravityY(0);\n\n    this.initialConfig = {\n      graphicLight: graphicLightConfig,\n      diffusedLight: diffusedLightConfig,\n      offset: offset\n    };\n\n    this.config = this.initialConfig;\n\n    this.isOn = false;\n    if (isOn) {\n      this.turnOn();\n    }\n\n    // Register this LightSource instance to the Room's LightManager\n    this.room.lightSources.add(this);\n    this.effects = new EffectComponent(this);\n  }\n\n  /**\n   * Turn on the lights of the LightSource by creating new ones.\n   */\n  turnOn() {\n    if (!this.isOn) {\n      if (this.initialConfig.diffusedLight !== null) {\n        this.diffusedLight = this.room.lights.addLight(this.x + this.initialConfig.offset.x, this.y + this.initialConfig.offset.y, this.initialConfig.diffusedLight.radius).setIntensity(this.initialConfig.diffusedLight.intensity);\n        this.room.lightSources.diffusedLights.push(this.diffusedLight);\n      }\n\n      if (this.initialConfig.graphicLight !== null) {\n        this.graphicLight = this.room.lights.addLight(this.x + this.initialConfig.offset.x, this.y + this.initialConfig.offset.y, this.initialConfig.graphicLight.radius).setIntensity(this.initialConfig.graphicLight.intensity);\n        this.room.lightSources.graphicLights.push(this.graphicLight);\n      }\n\n      this.isOn = true;\n    }\n  }\n\n  /**\n     * Turn off the lights of the LightSource by deleting the existing ones.\n     * @param {boolean} [stopBehaviours=true] - If true, turning off the light stops all the behaviours.\n     */\n  turnOff(stopBehaviours = true) {\n\n    // if (stopBehaviours) this.lightBehaviour.stopAllBehaviours();\n    if (this.isOn) {\n      let diffusedLightindex = this.room.lightSources.diffusedLights.indexOf(this.diffusedLight);\n\n      if (diffusedLightindex > -1) {\n        this.room.lightSources.diffusedLights.splice(diffusedLightindex, 1);\n        this.room.lights.removeLight(this.diffusedLight);\n      }\n\n      let graphicLightindex = this.room.lightSources.graphicLights.indexOf(this.graphicLight);\n\n      if (graphicLightindex > -1) {\n        this.room.lightSources.graphicLights.splice(graphicLightindex, 1);\n        this.room.lights.removeLight(this.graphicLight);\n      }\n\n      this.isOn = false;\n    }\n  }\n\n  /**\n   * If the light source is on, turn it off and vice versa.\n   */\n  switch() {\n    if (this.isOn) this.turnOff();\n    else this.turnOn();\n  }\n}\n","const Utils = {\n  getScreenProps: require('./Utils')\n};\n\nmodule.exports = Utils;\n","const Managers = {\n  LayerManager: require('./layers/LayerManager'),\n  LightSourceManager: require('./light-sources/LightSourceManager'),\n  Manager: require('./Manager'),\n  UpdateManager: require('./updates/UpdateManager')\n};\n\nmodule.exports = Managers;\n","const Systems = {\n  CursorSystem: require('./cursors/CursorSystem'),\n  RoomSystem: require('./rooms/RoomSystem')\n};\n\nmodule.exports = Systems;\n","import Sprite from '../Sprite';\nimport Behaviour from '../behaviours';\nimport Components from '../../components';\nimport CONST from '../../const';\n\n/**\n * The characters namespace.\n * @namespace TDLib.Sprites.Characters\n * @since 1.0.0\n */\n\n/**\n * Class representing a Character.\n * @extends TDLib.Sprites.Sprite\n * @memberof TDLib.Sprites.Characters\n * @since 1.0.0\n */\nexport default class Character extends Sprite {\n  /**\n   * Create a new Character.\n   * @param {Room} room - The room where the character is created.\n   * @param {number} x - The x coordinate of the character.\n   * @param {number} y - The y coordinate of the character.\n   * @param {string} texture - The character's graphic.\n   * @param {string} layer - The character's layer.\n   */\n  constructor(room, x, y, texture, layer) {\n    super(...arguments, true, Behaviour.INTERACTIVE, { alphaTolerance: 1 });\n\n    /**\n     * The ActionComponent for this character.\n     * @type {Components.ActionComponent}\n     * @since 1.0.0\n     */\n    this.actions = new Components.ActionComponent(this);\n\n    /**\n     * The facing of the character.\n     * @type {TDLCharacter.FACING}\n     * @since 1.0.0\n     */\n    this.facing = CONST.RIGHT;\n  }\n\n  create() {\n    super.create();\n    // this.setPipeline('Light2D');\n  }\n}\n","import CONST from './const';\n/**\n * @namespace TDLib\n */\n\nvar TDLib = {\n  Components: require('./components'),\n  Game: require('./boot/Game'),\n  Managers: require('./managers'),\n  Rooms: require('./rooms'),\n  Sprites: require('./sprites'),\n  Systems: require('./systems'),\n  Utils: require('./utils')\n};\n\nTDLib = Phaser.Utils.Objects.Extend(false, TDLib, CONST);\n\nmodule.exports = TDLib;\nglobal.TDLib = TDLib;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import Component from './Component';\nimport Actions from '../sprites/actions';\n\n/**\n * The actions namespace.\n * @namespace TDLib.Components.Actions\n * @since 1.0.0\n */\n\n/**\n * Class representing a component responsible of every TDLAction preformed.\n * @extends TDLib.Components.TDLComponent\n * @memberof TDLib.Components\n * @since 1.0.0\n */\nexport default class ActionComponent extends Component {\n  /**\n   * Create an ActionComponent.\n   * @param {TDLib.Sprites.TDLSprite} actor - The performer of the action.\n   */\n  constructor(actor) {\n    super(actor);\n\n    /**\n     * The performer of the action.\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.actor = actor;\n\n    /**\n     * The default action to be played.\n     * @type {TDLib.Components.Actions.TDLAction}\n     * @since 1.0.0\n     */\n    this.defaultAction = new Actions.Idle(this, this.actor);\n\n    /**\n     * The queue of actions.\n     * @type {Array}\n     * @private\n     * @since 1.0.0\n     */\n    this._queue = [this.defaultAction];\n    this._queue[0].start();\n  }\n\n  /**\n   * The queue is emptied and the new action is immediately performed.\n   * @since 1.0.0\n   */\n  static get DEFAULT_MODE() {\n    return 0;\n  }\n\n  /**\n   * The new action is added to the queue.\n   * @since 1.0.0\n   */\n  static get QUEUE_MODE() {\n    return 1;\n  }\n\n  /**\n   * The currently performed action is paused and the new action is immediately performed. Then the paused action is resumed.\n   * @since 1.0.0\n   */\n  static get PAUSE_MODE() {\n    return 2;\n  }\n\n  /**\n   * Start a new action or add that to the queue.\n   * @param {TDLib.Components.Actions.TDLAction} action - The action to add or execute.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   * @param {number} [mode=ActionComponent.DEFAULT_MODE] - The mode to execute the action: ActionComponent.DEFAULT_MODE, ActionComponent.QUEUE_MODE or ActionComponent.PAUSE_MODE.\n   * @since 1.0.0\n   */\n  add(Action, config, mode = ActionComponent.DEFAULT_MODE) {\n\n    let newAction = new Action(this, this.actor, config);\n\n    switch (mode) {\n      case ActionComponent.DEFAULT_MODE: {\n        this._queue[0].abort();\n        this._queue = [];\n        this._queue.push(newAction);\n        this._queue[0].start();\n      };\n        break;\n\n      case ActionComponent.QUEUE_MODE: {\n        this._queue.push(newAction);\n      };\n        break;\n\n      case ActionComponent.PAUSE_MODE: {\n        this._queue[0].pause();\n        this._queue.unshift(newAction);\n        this._queue[0].start();\n      };\n        break;\n    }\n\n    return newAction;\n  }\n\n  /**\n   * Remove a completed action from the queue.\n   * @private\n   * @since 1.0.0\n   */\n  remove() {\n    this._queue.shift();\n    if (this._queue.length <= 0) this._queue.push(this.defaultAction);\n    if (this._queue[0].isPaused) this._queue[0].resume();\n    else this._queue[0].start();\n  }\n\n  /**\n   * Update the currently performed action.\n   * @private\n   * @since 1.0.0\n   */\n  update() {\n    if (this._queue.length <= 0) this._queue.push(this.defaultAction);\n    else if (this._queue.length > 1 && this._queue[0].name === 'Idle') {\n      this._queue.shift();\n      if (this._queue[0].isPaused) this._queue[0].resume();\n      else this._queue[0].start();\n    }\n\n    this._queue[0].update();\n  }\n}\n","import Action from '../Action';\nimport WalkTo from '../walk-to/WalkTo';\n\nexport default class Examine extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new WalkTo(this, this.actor, this.config),\n        this.target.behaviour.examine.getAction(this)\n      ]\n    );\n  }\n}\n","const Settings = {\n  MICRO_MOVEMENT_RADIUS: 6\n};\n\nmodule.exports = Settings;\n","const Settings = {\n  WALK_VELOCITY: 100,\n  MICRO_MOVEMENT_RADIUS: 20\n};\n\nmodule.exports = Settings;\n","import Action from '../Action';\nimport CONST from '../../../const';\n\n/**\n * Class representing the idle action.\n * @extends TDLib.Components.Actions.Action\n * @memberof TDLib.Components.Actions\n */\nexport default class Idle extends Action {\n  /**\n   * Start a new idle action.\n   * @param {Components.ActionComponent|Components.Actions.TDLAction} invoker - The invoker of the action.\n   * @param {TDLSprite} actor - The actor who performs the action.\n   * @param {Object} config - The config object for the action.\n   * @param {Object} config.target - The target of the action.\n   * @param {number} config.target.x - The x of the target of the action.\n   */\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      new Action.BaseAction(\n        this,\n        () => {\n          this.actor.body.setVelocity(0);\n          switch (this.actor.facing) {\n\n            case CONST.LEFT: {\n              this.actor.anims.play('idle');\n              // this.actor.anims.play('idleLeft');\n            }\n              break;\n\n            case CONST.RIGHT: {\n              this.actor.anims.play('idle');\n              // this.actor.anims.play('idleRight');\n            }\n              break;\n\n            // possibili altri casi di facing (es girato di spalle o da davanti)\n          }\n        }\n      )\n    );\n  }\n}\n","import Action from '../Action';\nimport WalkTo from '../walk-to/WalkTo';\n\nexport default class Interact extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new WalkTo(this, this.actor, this.config),\n        this.target.behaviour.interact.getAction(this)\n      ]\n    );\n  }\n}\n","import Action from '../Action';\nimport FaceTo from '../face-to/FaceTo';\n\nexport default class Observe extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new FaceTo(this, this.actor, this.config),\n        this.target.behaviour.observe.getAction(this)\n      ]\n    );\n  }\n}\n","import Action from '../Action';\nimport FaceTo from '../face-to/FaceTo';\nimport Settings from './Settings';\n\n// da cambiare e mettere tutta dentro l'AWalkTo e fare un Move to che distingua che azioni chiamare?\nexport default class RunTo extends Action {\n  constructor(invoker, actor, config) {\n    super(...arguments);\n    this.addActions(\n      [\n        new FaceTo(this, this.actor, this.config),\n        new Action.BaseAction(\n          this,\n          () => {\n            if (Math.abs(this.actor.x - this.target.x) > Settings.MICRO_MOVEMENT_RADIUS) {\n              if (this.actor.x < this.target.x) {\n                this.actor.anims.play('run');\n                // this.actor.anims.play('runRight');\n                this.actor.body.setVelocity(Settings.RUN_VELOCITY);\n              } else if (this.actor.x > this.target.x) {\n                this.actor.anims.play('run');\n                // this.actor.anims.play('runLeft');\n                this.actor.body.setVelocity(-Settings.RUN_VELOCITY);\n              }\n              console.log('start to run to ', config.target.x);\n            } else {\n              this.finish();\n            }\n          },\n          () => {\n            this.actor.body.setVelocity(0);\n          },\n          () => {\n            if ((this.actor.x - this.target.x) * this.actor.body.velocity.x > 0) this.finish();\n          }\n        )\n      ]\n    );\n  }\n}\n","const Settings = {\n  RUN_VELOCITY: 240,\n  MICRO_MOVEMENT_RADIUS: 20\n};\n\nmodule.exports = Settings;\n","const CONST = {\n  EXAMINABLE: 'EXAMINABLE',\n  INERT: 'INERT',\n  INTERACTIVE: 'INTERACTIVE',\n  TALKABLE: 'TALKABLE',\n  INVENTORY: 'INVENTORY',\n\n  DEFAULT_MIN_LIGHT_LEVEL_TO_OBSERVE: 0.05,\n  DEFAULT_OBSERVE_TEXT: 'Observe default text',\n  DEFAULT_NO_LIGHT_OBSERVE_TEXT: 'NoLightObserve default text',\n  DEFAULT_MIN_LIGHT_LEVEL_TO_EXAMINE_OR_INTERACT: 0.04,\n  DEFAULT_EXAMINE_OR_INTERACT_TEXT: 'ExamineOrInteract default text',\n  DEFAULT_NO_LIGHT_EXAMINE_OR_INTERACT_TEXT: 'NoLightExamineOrInteract default text'\n};\n\nmodule.exports = CONST;\n","import Behaviour from '../Behaviour';\nimport Action from '../../actions/Action';\n\nexport default class Examinable extends Behaviour {\n  constructor(component) {\n    super(component);\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Action.BaseAction(\n      invoker,\n      () => {\n        // Fare i controlli su quanta luce c'è nella stanza!\n        if (this.checkLight(this.gameObject.minLightLevelToExamineOrInteract)) console.log(this.gameObject.examineOrInteractText);\n        else console.log(this.gameObject.noLightExamineOrInteractText);\n        invoker.finish();\n      }\n    );\n  }\n}\n","import Behaviour from '../Behaviour';\nimport Action from '../../actions/Action';\n\nexport default class Interactive extends Behaviour {\n  constructor(component) {\n    super(component);\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Action.BaseAction(\n      invoker,\n      () => {\n        // Fare i controlli su quanta luce c'è nella stanza!\n        if (this.checkLight(this.gameObject.minLightLevelToExamineOrInteract)) console.log(this.gameObject.examineOrInteractText);\n        else console.log(this.gameObject.noLightExamineOrInteractText);\n        invoker.finish();\n      }\n    );\n  }\n}\n","import Behaviour from '../Behaviour';\nimport Actions from '../../actions';\nimport Settings from './Settings';\n\nexport default class Observable extends Behaviour {\n  constructor(component) {\n    super(component);\n\n    this._timer;\n  }\n\n  add() {\n    super.add();\n\n    this.gameObject.on('pointerover', function (pointer) {\n      this.cursors.setCursor(this.gameObject);\n\n      this._timer = this.gameObject.room.time.addEvent({\n        delay: Settings.DEFAULT_MIN_TIME_TO_OBSERVE,\n        callback: () => {\n          if (this.gameObject !== this.room.player && !this.room.player.isBlocked) this.room.player.actions.add(Actions.Observe, { target: this.gameObject });\n        },\n        callbackScope: this\n      });\n    }.bind(this));\n\n    this.gameObject.on('pointerout', function (pointer) {\n      this._timer.remove(false);\n      this.cursors.setCursor();\n    }.bind(this));\n  }\n\n  /**\n   * Delete the timer which starts the AObserve action.\n   */\n  abort() {\n    this._timer.remove(false);\n  }\n\n  /**\n   * Generate a proper action according to the behaviour and the gameObject settings.\n   * @return {TDLib.Components.Actions.TDLAction}\n   * @since 1.0.0\n   */\n  getAction(invoker) {\n    return new Actions.Action.BaseAction(\n      invoker,\n      () => {\n        // Fare i controlli su quanta luce c'è nella stanza!\n        if (this.checkLight(this.gameObject.minLightLevelToObserve)) console.log(this.gameObject.observeText);\n        else console.log(this.gameObject.noLightObserveText);\n        invoker.finish();\n      }\n    );\n  }\n}\n","const Settings = {\n  DEFAULT_MIN_TIME_TO_OBSERVE: 1200\n};\n\nmodule.exports = Settings;\n","export default class Inventory {\n  constructor() {\n\n  }\n}\n","const LightEffects = {\n  HardFlickering: require('./HardFlickering'),\n  LightEffect: require('./LightEffect')\n};\n\nmodule.exports = LightEffects;\n","import LightEffect from './LightEffect';\n\nexport default class HardFlickering extends LightEffect {\n  constructor(invoker, config) {\n    super(invoker, config, 0.5);\n\n    if (!this.config.minTime) this.config.minTime = 10;\n    if (!this.config.maxTime) this.config.maxTime = 400;\n    if (!this.config.finalState) this.config.finalState = 'on';\n  }\n\n  play() {\n    super.play(() => {\n      let setTimer = () => {\n        this.gameObject.room.time.addEvent({\n          delay: Math.floor(Math.random() * (this.config.maxTime - this.config.minTime)) + this.config.minTime,\n          callback: () => {\n            if (!this.stopped) {\n              if (this.gameObject.initialConfig.graphicLight !== null) {\n                if (this.gameObject.graphicLight.intensity === 0) this.gameObject.graphicLight.setIntensity(this.gameObject.initialConfig.graphicLight.intensity);\n                else this.gameObject.graphicLight.setIntensity(0);\n              }\n\n              if (this.gameObject.initialConfig.diffusedLight !== null) {\n                if (this.gameObject.diffusedLight.intensity === 0) this.gameObject.diffusedLight.setIntensity(this.gameObject.initialConfig.diffusedLight.intensity);\n                else this.gameObject.diffusedLight.setIntensity(0);\n              }\n              setTimer(this);\n            }\n          },\n          callbackScope: this,\n          repeat: 0\n        });\n      };\n\n      setTimer(this);\n    });\n  }\n\n  stop() {\n    super.stop(() => {\n      if (this.config.finalState === 'on') {\n        if (this.gameObject.initialConfig.graphicLight !== null) {\n          this.gameObject.graphicLight.setIntensity(this.gameObject.initialConfig.graphicLight.intensity);\n        }\n        if (this.gameObject.initialConfig.diffusedLight !== null) {\n          this.gameObject.diffusedLight.setIntensity(this.gameObject.initialConfig.diffusedLight.intensity);\n        }\n      } else if (this.config.finalState === 'off') {\n        this.gameObject.turnOff();\n      }\n    });\n  }\n}\n","import Settings from './Settings';\nimport DebugHeader from './DebugHeader';\nimport Utils from '../utils';\nimport Managers from '../managers';\nimport Systems from '../systems';\n\nexport default class Game {\n  constructor(config) {\n    this.config = config;\n    this._setScreenConfig();\n    this._setPhysicsConfig();\n    this._setPlugins();\n    this._setBoot();\n    this._setHeaderProps();\n    this._finalizeConfig();\n\n    // Aggiungere il device e la funzione per determinarlo\n\n    Settings.GAME = new Phaser.Game(this.config);\n\n    DebugHeader(Settings.GAME);\n    return Settings.GAME;\n  }\n\n  _setScreenConfig() {\n    Settings.SCREEN_PROPS = Utils.getScreenProps();\n\n    this.config.width = Settings.SCREEN_PROPS.calculatedWidth;\n    this.config.height = Settings.SCREEN_PROPS.calculatedHeight;\n    this.config.zoom = Settings.SCREEN_PROPS.calculatedZoom;\n\n    this.config.autoResize = false;\n    this.config.backgroundColor = '#000000';\n    this.config.pixelArt = true;\n  }\n\n  _setPhysicsConfig() {\n    this.config.physics = {\n      default: 'arcade',\n      arcade: {\n        debug: false,\n        gravity: { y: 0, x: 0 }\n      }\n    };\n  }\n\n  _setPlugins() {\n    this.config.plugins = {\n      global: [\n        { key: 'RoomSystem', plugin: Systems.RoomSystem, start: false, mapping: 'rooms' },\n        { key: 'CursorSystem', plugin: Systems.CursorSystem, start: false, mapping: 'cursors' }\n      ],\n      scene: [\n        { key: 'UpdateManager', plugin: Managers.UpdateManager, mapping: 'updates' },\n        { key: 'LightSourceManager', plugin: Managers.LightSourceManager, mapping: 'lightSources' },\n        { key: 'LayerManager', plugin: Managers.LayerManager, mapping: 'layers' }\n        // { key: 'ActionManager', plugin: ActionManager, mapping: 'actions' }\n      ]\n    };\n  }\n\n  _setBoot() {\n    this.config.scene = [Boot];\n  }\n\n  _setHeaderProps() {\n    this.config.banner = false;\n  }\n\n  _finalizeConfig() {\n    this.config.type = Phaser.WEBGL;\n    this.config.maxLights = 20;\n    this.config.parent = 'game';\n    this.config.disableContextMenu = true;\n  }\n}\n","var CONST = require('../const');\nvar Settings = require('./Settings');\n\n/**\n * Called automatically by Phaser.Game and responsible for creating the console.log debug header.\n *\n * You can customize or disable the header via the Game Config object.\n *\n * @function Phaser.Boot.DebugHeader\n * @since 3.0.0\n *\n * @param {Phaser.Game} game - The Phaser.Game instance which will output this debug header.\n */\nvar DebugHeader = function (game) {\n  let config = game.config;\n\n  config.bannerBackgroundColor = '#0002e6';\n  config.bannerTextColor = '#ffffff';\n  config.hidePhaser = false;\n\n  let renderType = 'WebGL';\n\n  if (config.renderType !== 2) {\n    renderType = 'NULL';\n  }\n\n  let audioConfig = config.audio;\n  let deviceAudio = game.device.audio;\n\n  let audioType;\n\n  if (deviceAudio.webAudio && !(audioConfig && audioConfig.disableWebAudio)) {\n    audioType = 'Web Audio';\n  } else if ((audioConfig && audioConfig.noAudio) || (!deviceAudio.webAudio && !deviceAudio.audioData)) {\n    audioType = 'No Audio';\n  } else {\n    audioType = 'HTML5 Audio';\n  }\n\n  if (!game.device.browser.ie) {\n    let c = '';\n    let args = [c];\n\n    if (Array.isArray(config.bannerBackgroundColor)) {\n      let lastColor;\n\n      config.bannerBackgroundColor.forEach(function (color) {\n        c = c.concat('%c ');\n\n        args.push('background: ' + color);\n\n        lastColor = color;\n\n      });\n\n      //  inject the text color\n      args[args.length - 1] = 'color: ' + config.bannerTextColor + '; background: ' + lastColor;\n    } else {\n      c = c.concat('%c ');\n\n      args.push('color: ' + config.bannerTextColor + '; background: ' + config.bannerBackgroundColor);\n    }\n\n    //  URL link background color (always white)\n    args.push('background: #fff');\n\n    if (config.gameTitle) {\n      c = c.concat(config.gameTitle);\n\n      if (config.gameVersion) {\n        c = c.concat(' v' + config.gameVersion);\n      }\n\n      if (!config.hidePhaser) {\n        c = c.concat(' / ');\n      }\n    }\n\n    if (!config.hidePhaser) {\n      c = c.concat('TDLib v' + CONST.VERSION + ' / Phaser v' + CONST.PHASER_VERSION);\n      c = c.concat(' (' + renderType + ' | ' + audioType + ' | ' + Settings.DEVICE + ')');\n    }\n\n    c = c.concat(' %c ' + config.gameURL);\n\n    //  Inject the new string back into the args array\n    args[0] = c;\n\n    console.log.apply(console, args);\n  }\n};\n\nmodule.exports = DebugHeader;\n","import Settings from '../boot/Settings';\n\nconst getScreenProps = () => {\n  var returnValue = {};\n\n  // cz : ah = 1 : mh\n  if (Settings.DEVICE === 'MOBILE') {\n    returnValue.availHeight = window.innerHeight;\n    returnValue.availWidth = window.innerWidth;\n    returnValue.calculatedZoom = Math.floor(returnValue.availHeight / ((Settings.ROOM_HEIGHT_IN_TILE + Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE + Settings.ROOM_FRAME_IN_TILES_MOBILE * 2) * Settings.TILE_SIZE) * 100) / 100;\n  } else {\n    returnValue.availHeight = screen.height;\n    returnValue.availWidth = screen.width;\n    returnValue.calculatedZoom = Math.floor(returnValue.availHeight / ((Settings.ROOM_HEIGHT_IN_TILE + Settings.INVENTORY_HEIGHT_IN_TILES_DESKTOP + Settings.ROOM_FRAME_IN_TILES_DESKTOP * 2) * Settings.TILE_SIZE) * 100) / 100;\n  }\n\n  console.log('ZOOM: ' + returnValue.calculatedZoom);\n\n  // Sono le dimensioni riaggiustate rispetto allo zoom scelto\n  // ch : ah = 1 : cz\n  returnValue.calculatedHeight = Math.ceil(returnValue.availHeight / returnValue.calculatedZoom);\n  returnValue.calculatedWidth = Math.ceil(returnValue.availWidth / returnValue.calculatedZoom);\n\n  console.log('AVAIL-H: ' + returnValue.availHeight + '\\nCALC-H: ' + returnValue.calculatedHeight);\n  console.log('AVAIL-W: ' + returnValue.availWidth + '\\nCALC-W: ' + returnValue.calculatedWidth);\n\n  return returnValue;\n};\n\nmodule.exports = getScreenProps;\n","import Manager from '../Manager';\nimport Settings from './Settings';\n\n/**\n * Class representing the manager of the layers in every room.\n * @extends TDLib.Plugins.TDLRoomPlugin\n * @memberof TDLib.Plugins.RoomPlugins\n * @since 1.0.0\n */\nexport default class LayerManager extends Manager {\n  /**\n   * Create a new RoomManager.\n   * @param {TDLib.Rooms.Room} room - The room in which the layer manager operates.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the plugin manager.\n   */\n  constructor(room, pluginManager) {\n    super(room, pluginManager);\n    /**\n     * The size in cells of each layer.\n     * @type {number}\n     * @since 1.0.0\n     */\n    this.layerSize = Settings.layerSize;\n\n    /**\n     * The starting depth of layers.\n     * @type {number}\n     * @since 1.0.0\n     */\n    this.strartingDepth = Settings.startingDepth;\n  }\n\n  /**\n   * Boot all the layers in the correct order.\n   * @since 1.0.0\n   */\n  boot() {\n    /**\n     * The layer containing the background wall.\n     * @type {Phaser.GameObjects.Group}\n     * @since 1.0.0\n     */\n    this.backgroundLayer = this.room.add.group();\n\n    /**\n     * The layer containing the rear doors.\n     * @type {Phaser.GameObjects.Group}\n     * @since 1.0.0\n     */\n    this.rearDoorsLayer = this.room.add.group();\n\n    /**\n     * The layer containing the objects fixed to the background wall.\n     * @type {Phaser.GameObjects.Group}\n     * @since 1.0.0\n     */\n    this.wallFurnitureLayer = this.room.add.group();\n\n    /**\n     * The layer containing the objects in the room.\n     * @type {Phaser.GameObjects.Group}\n     * @since 1.0.0\n     */\n    this.roomFurnitureLayer = this.room.add.group();\n\n    /**\n     * The layer containing the side doors.\n     * @type {Phaser.GameObjects.Group}\n     * @since 1.0.0\n     */\n    this.sideDoorsLayer = this.room.add.group();\n\n    /**\n     * The layer containing the NPCs.\n     * @type {Phaser.GameObjects.Group}\n     * @since 1.0.0\n     */\n    this.npcLayer = this.room.add.group();\n\n    /**\n     * The layer containing the player.\n     * @type {Phaser.GameObjects.Group}\n     * @since 1.0.0\n     */\n    this.playerLayer = this.room.add.group();\n\n    /**\n     * The layer containing the cieling objects from the roof.\n     * @type {Phaser.GameObjects.Group}\n     * @since 1.0.0\n     */\n    this.cielingObjectsLayer = this.room.add.group();\n\n    /**\n     * The layer containing the front doors.\n     * @type {Phaser.GameObjects.Group}\n     * @since 1.0.0\n     */\n    this.frontDoorsLayer = this.room.add.group();\n\n    /**\n     * The layer containing the lateral walls.\n     * @type {Phaser.GameObjects.Group}\n     * @since 1.0.0\n     */\n    this.wallsLayer = this.room.add.group();\n\n    /**\n     * The layer containing the lateral walls black mask.\n     * @type {Phaser.GameObjects.Group}\n     * @since 1.0.0\n     */\n    this.wallsMaskLayer = this.room.add.group();\n\n    /**\n     * The layer containing the overall darkness mask.\n     * @type {Phaser.GameObjects.Group}\n     * @since 1.0.0\n     */\n    this.overallDarknessLayer = this.room.add.group();\n\n    /**\n     * The layer containing the border black masks.\n     * @type {Phaser.GameObjects.Group}\n     * @since 1.0.0\n     */\n    this.borderMasksLayer = this.room.add.group();\n  }\n\n  /**\n   * Set the correct depth for each layer in the right order.\n   * @since 1.0.0\n   */\n  setLayersDepth() {\n    let i = this.strartingDepth;\n\n    this.backgroundLayer.setDepth(this.layerSize * i);\n    i++;\n    this.rearDoorsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.wallFurnitureLayer.setDepth(this.layerSize * i);\n    i++;\n    this.roomFurnitureLayer.setDepth(this.layerSize * i);\n    i++;\n    this.sideDoorsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.npcLayer.setDepth(this.layerSize * i);\n    i++;\n    this.playerLayer.setDepth(this.layerSize * i);\n    i++;\n    this.cielingObjectsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.frontDoorsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.wallsLayer.setDepth(this.layerSize * i);\n    i++;\n    this.wallsMaskLayer.setDepth(this.layerSize * i);\n    i++;\n    this.overallDarknessLayer.setDepth(this.layerSize * i);\n    i++;\n    this.borderMasksLayer.setDepth(this.layerSize * i);\n    i++;\n  }\n}\n","const Settings = {\n  layerSize: 10,\n  startingDepth: 0\n};\n\nmodule.exports = Settings;\n","import Manager from '../Manager';\nimport GlobalSettings from '../../boot/Settings';\n\nexport default class LightSourceManager extends Manager {\n  constructor(room, pluginManager) {\n    super(room, pluginManager);\n\n    this.graphicLights = [];\n    this.diffusedLights = [];\n  }\n\n  boot() {\n    this.lightSources = this.room.add.group();\n  }\n\n  add(source) {\n    this.lightSources.add(source, true);\n    this.lightSources.getChildren().forEach(lightSource => {\n      lightSource.setPipeline('Light2D');\n    });\n\n    return source;\n  }\n\n  // Le luci che flickerano o con comportamenti strani vanno contate?\n  calculateLightsContribuitePoint(target) {\n    let singleLightContributeAccumulator = 0;\n\n    this.lightSources.getChildren().forEach(light => {\n      if (light.isOn) {\n        let singleLightContribute = light.config.diffusedLight.intensity / (Math.abs(light.x + light.config.offset.x - target.x) ^ 2);\n\n        // COSE\n        if (light.effects.currentEffect) {\n          singleLightContribute *= light.effects.currentEffect.contributeFactor;\n        }\n\n        singleLightContributeAccumulator += singleLightContribute;\n      }\n    });\n\n    return Math.floor(singleLightContributeAccumulator * 10000) / 1000;\n  }\n\n  calculateAverageLightsContribute() {\n    let singleLightIntensityAccumulator = 0;\n\n    this.diffusedLights.forEach(light => {\n      singleLightIntensityAccumulator += light.intensity;\n    });\n    let averageLightsContribute = 0;\n\n    if (singleLightIntensityAccumulator !== 0) averageLightsContribute = Math.floor((singleLightIntensityAccumulator * 10000 / this.room.layers.wallsLayer.width / GlobalSettings.TILE_SIZE) * 100) / 100 + 0.3;\n    return averageLightsContribute;\n  }\n}\n","import Manager from '../Manager';\n\n/**\n * Class representing the update plugin.\n * @extends TDLib.Plugins.TDLRoomPlugin\n * @memberof TDLib.Plugins.RoomPlugins\n * @since 1.0.0\n */\nexport default class UpdateManager extends Manager {\n  /**\n   * Create a new UpdatePlugin.\n   * @param {TDLib.Rooms.Room} room - The room in which the layer manager operates.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the plugin manager.\n   */\n  constructor(room, pluginManager) {\n    super(room, pluginManager);\n  }\n\n  /**\n   * Boot the plugin.\n   * @since 1.0.0\n   */\n  boot() {\n    const events = this.systems.events;\n\n    this.gameObjects = new Phaser.Structs.Set();\n\n    events.on('update', this._sceneUpdate, this);\n    events.on('shutdown', this._sceneShutdown, this);\n    events.once('destroy', this._sceneDestroy, this);\n  }\n\n  /**\n   * Update every game object.\n   * @param {*} time\n   * @param {*} delta\n   * @private\n   * @since 1.0.0\n   */\n  _sceneUpdate(time, delta) {\n    this.gameObjects.iterateLocal('update', time, delta);\n  }\n\n  /**\n   * Called at the shutdown of the scene.\n   * @private\n   * @since 1.0.0\n   */\n  _sceneShutdown() {\n    this.gameObjects.clear();\n  }\n\n  /**\n   * Called when the scene is destroyed.\n   * @private\n   * @since 1.0.0\n   */\n  _sceneDestroy() {\n    const events = this.systems.events;\n\n    events.off('update', this._scenePostUpdate, this);\n    events.off('shutdown', this._sceneShutdown, this);\n    events.off('destroy', this._sceneDestroy, this);\n\n    this.gameObjects = null;\n    this.scene = null;\n    this.systems = null;\n  }\n\n  /**\n   * Add an object to the global update loop of the game.\n   * @param {TDLib.Sprites.TDLSprite} obj - The object to add to the update loop.\n   * @since 1.0.0\n   */\n  add(obj) {\n    obj.once('destroy', this.remove, this);\n    this.gameObjects.set(obj);\n  }\n\n  /**\n   * Add multiple objects to the global update loop of the game.\n   * @param {TDLib.Sprites.TDLSprite[]} obj - The objects to add to the update loop.\n   * @since 1.0.0\n   */\n  addMultiple(objs) {\n    objs.forEach(this.add, this);\n  }\n\n  /**\n   * Remove an object from the global update loop of the game.\n   * @param {TDLib.Sprites.TDLSprite} obj - The object to remove from the update loop.\n   * @since 1.0.0\n   */\n  remove(obj) {\n    obj.off('destroy', this.remove, this);\n    this.gameObjects.delete(obj);\n  }\n}\n","import Actions from '../../sprites/actions';\nimport Behaviours from '../../sprites/behaviours';\n\n/**\n * Class representing the CursorSystem, able to select the correct graphic for the cursor and to handle pointer events.\n * @extends Phaser.Plugins.BasePlugin\n * @memberof TDLib.Plugins.GlobalPlugins\n * @since 1.0.0\n */\nexport default class CursorSystem extends Phaser.Plugins.BasePlugin {\n  /**\n   * Create a new CursorSystem.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the plugin manager.\n   */\n  constructor(pluginManager) {\n    super(pluginManager);\n\n    /**\n     * The scene containing the cursor.\n     * @type {CursorSystem.CURSOR_SCENE}\n     * @since 1.0.0\n     */\n    this.cursorScene;\n\n    /**\n     * The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n     * @type {Phaser.Scenes.SceneManager}\n     * @since 1.0.0\n     */\n    this.sceneManager;\n\n    /**\n     * Save the last sprite who called the function setCursor().\n     * @type {TDLib.Sprites.TDLSprite}\n     * @since 1.0.0\n     */\n    this.lastTarget;\n  }\n\n  /**\n   * It's a Phaser.Scene representing the scene containing the cursor which will be put on the rooms level.\n   * @typedef {TDLib.Plugins.GlobalPlugins.CursorSystem.CursorScene}\n   * @extends {Phaser.Scenes.Scene}\n   * @since 1.0.0\n   */\n  static get CursorScene() {\n    return class CursorScene extends Phaser.Scene {\n      constructor() {\n        super(CursorSystem.CURSOR_SCENE_KEY);\n\n        this.cursor;\n      }\n\n      preload() {\n        this.load.image(CursorSystem.EXAMINABLE_CURSOR, 'assets/Cursors/CursorExamine.png');\n        this.load.image(CursorSystem.HOLD_CURSOR, 'assets/Cursors/CursorHold.png');\n        this.load.image(CursorSystem.INTERACTIVE_CURSOR, 'assets/Cursors/CursorInteract.png');\n        this.load.image(CursorSystem.DEFAULT_CURSOR, 'assets/Cursors/CursorMove.png');\n        this.load.image(CursorSystem.TALKABLE_CURSOR, 'assets/Cursors/CursorTalk.png');\n        this.load.image(CursorSystem.CHOICE_CURSOR, 'assets/Cursors/CursorChoice.png');\n        this.load.image(CursorSystem.CHOICE_PRESSED_CURSOR, 'assets/Cursors/CursorChoicePressed.png');\n      }\n\n      create() {\n        this.input.setDefaultCursor('none');\n        this.cursor = this.add.image(0, 0, CursorSystem.DEFAULT_CURSOR).setOrigin(0.4, 0.33).setDepth(100000);\n      }\n\n      update() {\n        this.cursor.setPosition(this.input.activePointer.x, this.input.activePointer.y);\n      }\n    };\n  }\n\n  /**\n   * The key of the scene containing the cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get CURSOR_SCENE_KEY() {\n    return 'CursorScene';\n  }\n\n  /**\n   * The key of the inert cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get DEFAULT_CURSOR() {\n    return 'cursorMove';\n  }\n\n  /**\n   * The key of the examine cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get EXAMINABLE_CURSOR() {\n    return 'cursorExamine';\n  }\n\n  /**\n   * The key of the interact cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get INTERACTIVE_CURSOR() {\n    return 'cursorInteract';\n  }\n\n  /**\n   * The key of the hold cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get HOLD_CURSOR() {\n    return 'cursorHold';\n  }\n\n  /**\n   * The key of the talk cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get TALKABLE_CURSOR() {\n    return 'cursorTalk';\n  }\n\n  /**\n   * The key of the choice cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get CHOICE_CURSOR() {\n    return 'cursorChoice';\n  }\n\n  /**\n   * The key of the choice pressed cursor.\n   * @type {string}\n   * @since 1.0.0\n   */\n  static get CHOICE_PRESSED_CURSOR() {\n    return 'cursorChoicePressed';\n  }\n\n  /**\n   * Configure the cursor manager.\n   * @param {Phaser.Scenes.SceneManager} sceneManager - The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n   * @since 1.0.0\n   */\n  configure(sceneManager) {\n    this.sceneManager = sceneManager;\n    this.cursorScene = this.sceneManager.add(CursorSystem.CURSOR_SCENE_KEY, CursorSystem.CursorScene, true);\n  }\n\n  /**\n   * Handle the pointer down event.\n   * @param {TDLib.Sprites.Characters.TDLCharacter} player - The current player.\n   * @since 1.0.0\n   */\n  pointerDown(player, pointer = null) {\n    if (!player.isBlocked) {\n      switch (this.cursorScene.cursor.texture.key) {\n        case CursorSystem.DEFAULT_CURSOR: {\n          if (typeof player.room.input.activePointer.camera !== 'undefined') player.actions.add(Actions.WalkTo, { target: { x: player.room.input.activePointer.worldX } });\n        }\n          break;\n\n        case CursorSystem.EXAMINABLE_CURSOR: {\n          this.lastTarget.behaviour.observe.abort();\n          player.actions.add(Actions.Examine, { target: this.lastTarget });\n        }\n          break;\n\n        case CursorSystem.INTERACTIVE_CURSOR: {\n          this.lastTarget.behaviour.observe.abort();\n          player.actions.add(Actions.Interact, { target: this.lastTarget });\n        }\n          break;\n\n        case CursorSystem.TALKABLE_CURSOR: {\n          player.actions.add(Actions.TalkTo, { target: this.lastTarget });\n        }\n          break;\n      }\n    }\n  }\n\n  /**\n   * Set the correct cursor for the target selected.\n   * @param {Object} target - The target of the pointer.sceneManager\n   * @param {TDLib.Components.ActionComponent} target.behaviour - The SpriteBehaviourComponent of the target.\n   * @param {string} [target.behaviour.type=TDLib.Sprites.Behaviours.INERT] - The type of the sprite behaviour for this target.\n   * @since 1.0.0\n   */\n  setCursor(target = { behaviour: { type: Behaviours.INERT }, room: {} }) {\n    if ('room' in target && target !== target.room.player) {\n      switch (target.behaviour.type) {\n        case Behaviours.INERT: {\n          this.cursorScene.cursor.setTexture(CursorSystem.DEFAULT_CURSOR).setOrigin(0.4, 0.33);\n        }\n          break;\n\n        case Behaviours.EXAMINABLE: {\n          this.cursorScene.cursor.setTexture(CursorSystem.EXAMINABLE_CURSOR).setOrigin(0.33, 0.29);\n        }\n          break;\n\n        case Behaviours.INTERACTIVE: {\n          this.cursorScene.cursor.setTexture(CursorSystem.INTERACTIVE_CURSOR).setOrigin(0.4, 0.33);\n        }\n          break;\n\n        case Behaviours.TALKABLE: {\n          this.cursorScene.cursor.setTexture(CursorSystem.TALKABLE_CURSOR);\n        }\n          break;\n      }\n\n      this.lastTarget = target;\n    }\n  }\n\n  /**\n   * Show the cursor.\n   * @since 1.0.0\n   */\n  showCursor() {\n    this.cursorScene.cursor.setVisible(true);\n  }\n\n  /**\n   * Hide the cursor.\n   * @since 1.0.0\n   */\n  hideCursor() {\n    this.cursorScene.cursor.setVisible(false);\n  }\n}\n","/**\n * Class representing the manager of the rooms\n * @extends Phaser.Plugins.BasePlugin\n * @memberof TDLib.Plugins.GlobalPlugins\n */\nexport default class RoomSystem extends Phaser.Plugins.BasePlugin {\n  /**\n   * Create a new RoomSystem.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the plugin manager.\n   */\n  constructor(pluginManager) {\n    super(pluginManager);\n\n    /**\n     * The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n     * @type {Phaser.Scenes.SceneManager}\n     */\n    this.sceneManager = {};\n  }\n\n  /**\n   * Add (and start) a new room to the RoomSystem.\n   * @param {TDLib.Rooms.Room} room - The class of the new room to add.\n   * @param {boolean} [autoStart=true] - Specify if the room has to start.\n   */\n  add(room, autoStart = true) {\n    console.log('Added room:', room.name);\n    this.sceneManager.add(room.name, room, autoStart);\n  }\n\n  /**\n   * Configure the RoomSystem.\n   * @param {Phaser.Scenes.SceneManager} sceneManager - The Scene Manager is a Game level system, responsible for creating, processing and updating all of the Scenes in a Game instance.\n   */\n  configure(sceneManager) {\n    this.sceneManager = sceneManager;\n  }\n}\n","const Rooms = {\n  Room: require('./Room')\n};\n\nmodule.exports = Rooms;\n","import Settings from '../boot/Settings';\nimport Utils from './Utils';\n\n/**\n * The rooms namespace.\n * @namespace TDLib.Rooms\n * @since 1.0.0\n */\n\n/**\n * Class representing a TDLRoom.\n * @extends Phaser.Scene\n * @memberof TDLib.Rooms\n * @since 1.0.0\n */\nexport default class Room extends Phaser.Scene {\n  /**\n   * Create a new TDLRoom.\n   * @param {string} sceneKey - The unique key to identify the room.\n   * @param {Object} rawAssets - The raw object of assets needed by the room. (Ripensarlo ?)\n   */\n  constructor(sceneKey, rawAssets) {\n    super(sceneKey);\n\n    /**\n       * This object contains an array with all the assets needed by the room.\n       * @type {Object}\n       * @since 1.0.0\n       */\n    this.assets = { raw: rawAssets, array: [] };\n\n    /**\n       * The average contribute of light sources to the room.\n       * @type {number}\n       * @since 1.0.0\n       */\n    this.averageLightsContribute;\n\n    /**\n       * The Settings cursor manager.\n       * @type {TDLib.Plugins.SettingsPlugins.CursorManager}\n       * @since 1.0.0\n       */\n    this.cursors;\n\n    /**\n       * The layer manager of the room.\n       * @type {TDLib.Plugins.RoomPlugins.LayerManager}\n       * @since 1.0.0\n       */\n    this.layers;\n\n    /**\n       * The tilemap of the room.\n       * @type {Phaser.Tilemaps.Tilemap}\n       * @since 1.0.0\n       */\n    this.map;\n\n    /**\n       * The name of the room.\n       * @type {string}\n       * @since 1.0.0\n       */\n    this.name = this.constructor.name;\n\n    /**\n       * The instance of the TDLCharacter designated as player for the room.\n       * @type {TDLib.Sprites.Characters.TDLCharacter}\n       * @since 1.0.0\n       */\n    this.player;\n\n    /**\n       * The Settings room manager.\n       * @type {TDLib.Plugins.SettingsPlugins.RoomManager}\n       * @since 1.0.0\n       */\n    this.rooms;\n  }\n\n  /**\n   * The preload function is executed once and load all the assets needed by the room.\n   * @since 1.0.0\n   */\n  preload() {\n    this._scrapeAssets();\n    this.assets.array.forEach(obj => {\n      if ('nPath' in obj) {\n        this.load[obj.type](obj.key, [obj.path, obj.nPath]);\n      } else if ('bPath' in obj) {\n        this.load[obj.type](obj.key, obj.path);\n        this.load[obj.type](obj.key + '_b', obj.bPath);\n      } else {\n        this.load[obj.type](obj.key, obj.path);\n      }\n    });\n\n    // Loading Border Camera Masks\n    this.load.image('top-border-mask-camera', 'assets/Masks/topMaskCamera.png');\n    this.load.image('bottom-border-mask-camera', 'assets/Masks/bottomMaskCamera.png');\n    this.load.image('left-border-mask-camera', 'assets/Masks/leftMaskCamera.png');\n    this.load.image('right-border-mask-camera', 'assets/Masks/rightMaskCamera.png');\n  }\n\n  /**\n   * Scrape the object of raw assets.\n   * @private\n   * @since 1.0.0\n   */\n  _scrapeAssets() {\n    for (let type in this.assets.raw) {\n      Utils.scrapeComplexObjKey(\n        this.assets.raw[type],\n        { type: type },\n        'path',\n        (obj, params) => {\n          obj['type'] = params.type;\n          obj['key'] = Utils.findFileNameFromPath(obj.path);\n          this.assets.array.push(obj);\n        }\n      );\n    }\n  }\n\n  /**\n   * The create function is executed once, when the room is initialized.\n   * @param {TDLib.Sprites.Characters.TDLCharacter} player - The instance of the player for the room.\n   * @since 1.0.0\n   */\n  create(player) {\n    this.player = player.setName('player');\n    this.lights.enable(); // Boot Phaser's LightManager\n    // this.scene.bringToTop(CursorManager.CURSOR_SCENE_KEY); // Add the cursor to the Room\n    this.scene.bringToTop('CursorScene');\n\n    this._setCameraViewport();\n    this._createRoom();\n    this._createSprites();\n    this._applyBorderMasks();\n    this.layers.setLayersDepth();\n\n    // Camera bounds, anche il wallsLayer\n    this.cameras.main.setBounds(0, 0, this.layers.wallsLayer.width, this.layers.wallsLayer.height);\n    this.cameras.main.startFollow(this.player);\n    this.cameras.main.setRoundPixels(true);\n    // Physics Bounds, sarà solo lo spazio di gioco (togliamo il wall layer tutto attorno!!)\n    this.physics.world.setBounds(\n      Settings.TILE_SIZE, Settings.TILE_SIZE, this.layers.wallsLayer.width - 2 * Settings.TILE_SIZE,\n      this.layers.wallsLayer.height - 2 * Settings.TILE_SIZE\n    );\n  }\n\n  /**\n   * Set the correct camera viewport.\n   * @private\n   * @since 1.0.0\n   */\n  _setCameraViewport() {\n    if (Settings.DEVICE === 'MOBILE') {\n      this.cameras.main.setPosition(\n        (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_WIDTH_IN_TILES_MOBILE) * Settings.TILE_SIZE,\n        (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_HEIGHT_IN_TILES_MOBILE) * Settings.TILE_SIZE\n      );\n      this.cameras.main.setSize(\n        Settings.SCREEN_PROPS.calculatedWidth - 2 * (Settings.ROOM_FRAME_IN_TILES_MOBILE + Settings.INVENTORY_WIDTH_IN_TILES_MOBILE) * Settings.TILE_SIZE,\n        Settings.ROOM_HEIGHT_IN_TILE * Settings.TILE_SIZE\n      );\n    } else {\n      this.cameras.main.setPosition(\n        Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE,\n        Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE\n      );\n      this.cameras.main.setSize(\n        Settings.SCREEN_PROPS.calculatedWidth - 2 * Settings.ROOM_FRAME_IN_TILES_DESKTOP * Settings.TILE_SIZE,\n        Settings.ROOM_HEIGHT_IN_TILE * Settings.TILE_SIZE\n      );\n    }\n  }\n\n  /**\n   * Create room tilemap and layers.\n   * @private\n   * @since 1.0.0\n   */\n  _createRoom() {\n    this.map = this.make.tilemap({\n      key: Utils.findFileNameFromPath(this.assets.raw.tilemapTiledJSON.path),\n      tileWidth: Settings.TILE_SIZE,\n      tileHeight: Settings.TILE_SIZE\n    });\n\n    this.layers.backgroundLayer = this.map.createDynamicLayer(\n      'backgroundLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.background.path)),\n      0, 0\n    );// .setPipeline('Light2D');\n    this.layers.wallsLayer = this.map.createDynamicLayer(\n      'wallsLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.walls.path)),\n      0, 0\n    );\n    this.layers.wallsMaskLayer = this.map.createDynamicLayer(\n      'wallsMaskLayer',\n      this.map.addTilesetImage(Utils.findFileNameFromPath(this.assets.raw.image.tiles.walls.bPath)),\n      0, 0\n    );\n  }\n\n  /**\n   * Create all the objects present in Tiled JSON map.\n   * @private\n   * @since 1.0.0\n   */\n  _createSprites() {\n    let _this = this;\n\n    this.map.objects.forEach(layer => {\n      layer.objects.forEach(element => {\n        _this;\n        this[element.name] = eval('new ' + element.type + '(_this,' + (element.x + element.width / 2) + ', ' + (element.y - element.height / 2) + ');');\n        this[element.name].setName(element.name);\n      });\n    });\n  }\n\n  /**\n   * Apply the four border masks to the camera.\n   * @private\n   * @since 1.0.0\n   */\n  _applyBorderMasks() {\n    this.layers.borderMasksLayer.create(0,\n      0,\n      'top-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(0,\n      0,\n      'left-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(\n      this.cameras.main.width - Settings.TILE_SIZE,\n      0,\n      'right-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n\n    this.layers.borderMasksLayer.create(\n      0,\n      this.cameras.main.height - Settings.TILE_SIZE,\n      'bottom-border-mask-camera'\n    ).setScrollFactor(0).setOrigin(0, 0);\n  }\n\n  /**\n   * The update function is executed at every cycle of the game loop.\n   * @since 1.0.0\n   */\n  update() {\n    this._updateMasksByLightDiffusion();\n\n    // Updates all Actions in  every ActionComponent (if present)\n    this.children.list.forEach(element => {\n      if ('actions' in element) {\n        element.actions.update();\n      }\n    });\n  }\n\n  /**\n   * Update the border masks alpha according to the average diffused light in the room.\n   * @private\n   * @since 1.0.0\n   */\n  _updateMasksByLightDiffusion() {\n    this.averageLightsContribute = this.lightSources.calculateAverageLightsContribute();\n    this.layers.wallsMaskLayer.setAlpha(1 - this.averageLightsContribute);\n  }\n}\n\n","const Utils = {\n  scrapeComplexObjKey: (obj, params, searchKey, callback) => {\n    if (Array.isArray(obj)) {\n      for (let i = 0; i < obj.length; i++) {\n        Utils.scrapeComplexObjKey(obj[i], params, searchKey, callback);\n      }\n    } else if (obj !== null && typeof obj === 'object') {\n      if (searchKey in obj) {\n        callback(obj, params);\n      } else {\n        for (let prop in obj) {\n          Utils.scrapeComplexObjKey(obj[prop], params, searchKey, callback);\n        }\n      }\n    }\n  },\n  findFileNameFromPath: (path) => {\n    let nameFirstCharachterPosition = path.lastIndexOf('/') + 1;\n    let nameLastCharachterPosition = path.lastIndexOf('.');\n\n    if (nameFirstCharachterPosition === -1) nameFirstCharachterPosition = 0;\n    if (nameLastCharachterPosition === -1) return -1;\n    let filename = path.slice(nameFirstCharachterPosition, nameLastCharachterPosition);\n\n    return filename;\n  }\n};\n\nmodule.exports = Utils;\n","const Sprites = {\n  Actions: require('./actions'),\n  Behaviours: require('./behaviours'),\n  Characters: require('./characters'),\n  Effects: require('./effects'),\n  InventoryItems: require('./inventory-items'),\n  WorldItems: require('./world-items'),\n  Sprite: require('./Sprite')\n};\n\nmodule.exports = Sprites;\n","const Characters = {\n  NPCharacter: require('./npc-characters/NPCharacter'),\n  Player: require('./players/Player')\n};\n\nmodule.exports = Characters;\n","import Character from '../Character';\n\nexport default class NPCharacter extends Character {\n  constructor(room, x, y, texture, layer) {\n    super(room, x, y, texture, layer);\n  }\n}\n","import Character from '../Character';\n\nexport default class Player extends Character {\n  constructor(room, x, y, texture) {\n    super(room, x, y, texture, 'playerLayer');\n\n    this.isBlocked = false;\n  }\n\n  create() {\n    super.create();\n\n    this.room.input.on('pointerdown', function (pointer) {\n      this.room.cursors.pointerDown(this);\n    }, this);\n  }\n}\n","const InventoryItems = {\n  InventoryItem: require('./InventoryItem')\n};\n\nmodule.exports = InventoryItems;\n","import Sprite from '../Sprite';\n\n/**\n * The inventory items namespace.\n * @namespace TDLib.Sprites.InventoryItems\n * @since 1.0.0\n */\n\n/**\n * Class representing an InentoryItem.\n * @extends TDLib.Sprites.Sprite\n * @memberof TDLib.Sprites.InventoryItems\n * @since 1.0.0\n */\n\nexport default class InentoryItem extends Sprite {\n  /**\n   * Create a new InvetoryItem.\n   * @param {Room} room - The room where the item is created.\n   * @param {number} x - The x coordinate of the item.\n   * @param {number} y - The y coordinate of the item.\n   * @param {string} texture - The item's graphic.\n   * @param {string} layer - The item's layer.\n   */\n  constructor(room, x, y, texture, layer) {\n    super(...arguments, false);\n  }\n\n  create() {\n    super.create();\n  }\n}\n","const WorldItems = {\n  WorldItem: require('./WorldItem'),\n  LightSources: require('./light-sources'),\n  RoomFurnitures: require('./room-furnitures'),\n  WallFurnitures: require('./wall-furnitures')\n};\n\nmodule.exports = WorldItems;\n","const LightSources = {\n  LightSource: require('./LightSource')\n};\n\nmodule.exports = LightSources;\n","const RoomFurnitures = {\n  RoomFurniture: require('./RoomFurniture')\n};\n\nmodule.exports = RoomFurnitures;\n","import WorldItem from '../WorldItem';\n\n/**\n * The room furnitures namespace.\n * @namespace TDLib.Sprites.Objects.WorldObjects.RoomFurnitures\n * @since 1.0.0\n */\n\n/**\n * Class representing a RoomFurniture.\n * @extends TDLib.Sprites.Objects.WorldObjects.WorldObject\n * @memberof TDLib.Sprites.Objects.WorldObjects.RoomFurnitures\n * @since 1.0.0\n */\nexport default class RoomFurniture extends WorldItem {\n  /**\n   * Create a RoomFurniture.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   */\n  constructor(room, x, y, texture, behaviourType, pixelPerfect, observeText, examineOrInteractText, blockExamineText, noLightObserveText, noLightExamineOrInteractText, examineOrInteractOffsetX, examineOrInteractThresholdRadius, minLightLevelToExamineOrInteract, minLightLevelToObserve) {\n    super(\n      room,\n      x, y,\n      texture,\n      'roomFurnitureLayer',\n      true,\n      behaviourType,\n      pixelPerfect,\n      observeText,\n      examineOrInteractText,\n      blockExamineText,\n      noLightObserveText,\n      noLightExamineOrInteractText,\n      examineOrInteractOffsetX,\n      examineOrInteractThresholdRadius,\n      minLightLevelToExamineOrInteract,\n      minLightLevelToObserve\n    );\n  }\n}\n","const WallFurnitures = {\n  WallFurniture: require('./WallFurniture')\n};\n\nmodule.exports = WallFurnitures;\n","import WorldItem from '../WorldItem';\n\n/**\n * The wall furnitures namespace.\n * @namespace TDLib.Sprites.Objects.WorldObjects.WallFurnitures\n * @since 1.0.0\n */\n\n/**\n * Class representing a WallFurniture.\n * @extends TDLib.Sprites.Objects.WorldObjects.WorldObject\n * @memberof TDLib.Sprites.Objects.WorldObjects.WallFurnitures\n * @since 1.0.0\n */\nexport default class WallFurniture extends WorldItem {\n  /**\n   * Create a WallFurniture.\n   * @param {TDLib.Rooms.TDLRoom} room - The room where the sprite is created.\n   * @param {number} x - The sprite x coordinate.\n   * @param {number} y - The sprite y coordinate.\n   * @param {string} texture - The graphic of the sprite.\n   * @param {string} [behaviourType=SpriteBehaviour.INERT] - Specify the behaviour of the sprite.\n   * @param {Object} [pixelPerfect=null] - If not null enable the pixel perfect pointer hit for the sprite.\n   * @param {boolean} [pixelPerfect.alphaTolerance] - The alpha tolerance threshold value.\n   * @param {string|string[]} [observeText] - The text which appears when observing the sprite.\n   * @param {string|string[]} [examineOrInteractText] -  The text which appears when examine or interact with the sprite.\n   * @param {string} [blockExamineText=null] - If not null it's the blocking text which appears the first time the sprite is examined.\n   * @param {string|string[]} [noLightObserveText] -  The text which appears when observing the sprite when the diffused light is not sufficient.\n   * @param {string|string[]} [noLightExamineOrInteractText] - The text which appears when examine or interact with the sprite when the diffused light is not sufficient.\n   * @param {number} [examineOrInteractOffsetX=0] - The offset on x axis of the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [examineOrInteractThresholdRadius=0] - The radius of the tolerance in reaching the examineOrInteractPoint, where the player has to move to examine or interact with the sprite.\n   * @param {number} [minLightLevelToExamineOrInteract=???] - The minimum value of diffused light to examine or interact with the sprite.\n   * @param {number} [minLightLevelToObserve=???] - The minimum value of diffused light to observe the sprite.\n   */\n  constructor(room, x, y, texture, behaviourType, pixelPerfect, observeText, examineOrInteractText, blockExamineText, noLightObserveText, noLightExamineOrInteractText, examineOrInteractOffsetX, examineOrInteractThresholdRadius, minLightLevelToExamineOrInteract, minLightLevelToObserve) {\n    super(\n      room,\n      x, y,\n      texture,\n      'wallFurnitureLayer',\n      true,\n      behaviourType,\n      pixelPerfect,\n      observeText,\n      examineOrInteractText,\n      blockExamineText,\n      noLightObserveText,\n      noLightExamineOrInteractText,\n      examineOrInteractOffsetX,\n      examineOrInteractThresholdRadius,\n      minLightLevelToExamineOrInteract,\n      minLightLevelToObserve\n    );\n\n    this.setGravityY(0);\n  }\n}\n"],"sourceRoot":""}